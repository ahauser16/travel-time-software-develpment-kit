// Models.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe OpenAPI spec file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [Coords]
            Decoders.addDecoder(clazz: [Coords].self) { (source: AnyObject) -> [Coords] in
                return Decoders.decode(clazz: [Coords].self, source: source)
            }
            // Decoder for Coords
            Decoders.addDecoder(clazz: Coords.self) { (source: AnyObject) -> Coords in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Coords()
                instance.lat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lat"])
                instance.lng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["lng"])
                return instance
            }


            // Decoder for [RequestArrivalTimePeriod]
            Decoders.addDecoder(clazz: [RequestArrivalTimePeriod].self) { (source: AnyObject) -> [RequestArrivalTimePeriod] in
                return Decoders.decode(clazz: [RequestArrivalTimePeriod].self, source: source)
            }
            // Decoder for RequestArrivalTimePeriod
            Decoders.addDecoder(clazz: RequestArrivalTimePeriod.self) { (source: AnyObject) -> RequestArrivalTimePeriod in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestArrivalTimePeriod()
                return instance
            }


            // Decoder for [RequestLocation]
            Decoders.addDecoder(clazz: [RequestLocation].self) { (source: AnyObject) -> [RequestLocation] in
                return Decoders.decode(clazz: [RequestLocation].self, source: source)
            }
            // Decoder for RequestLocation
            Decoders.addDecoder(clazz: RequestLocation.self) { (source: AnyObject) -> RequestLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestLocation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.coords = Decoders.decodeOptional(clazz: Coords.self, source: sourceDictionary["coords"])
                return instance
            }


            // Decoder for [RequestRangeFull]
            Decoders.addDecoder(clazz: [RequestRangeFull].self) { (source: AnyObject) -> [RequestRangeFull] in
                return Decoders.decode(clazz: [RequestRangeFull].self, source: source)
            }
            // Decoder for RequestRangeFull
            Decoders.addDecoder(clazz: RequestRangeFull.self) { (source: AnyObject) -> RequestRangeFull in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestRangeFull()
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.maxResults = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max_results"])
                instance.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"])
                return instance
            }


            // Decoder for [RequestRangeNoMaxResults]
            Decoders.addDecoder(clazz: [RequestRangeNoMaxResults].self) { (source: AnyObject) -> [RequestRangeNoMaxResults] in
                return Decoders.decode(clazz: [RequestRangeNoMaxResults].self, source: source)
            }
            // Decoder for RequestRangeNoMaxResults
            Decoders.addDecoder(clazz: RequestRangeNoMaxResults.self) { (source: AnyObject) -> RequestRangeNoMaxResults in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestRangeNoMaxResults()
                instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"])
                instance.width = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["width"])
                return instance
            }


            // Decoder for [RequestRoutes]
            Decoders.addDecoder(clazz: [RequestRoutes].self) { (source: AnyObject) -> [RequestRoutes] in
                return Decoders.decode(clazz: [RequestRoutes].self, source: source)
            }
            // Decoder for RequestRoutes
            Decoders.addDecoder(clazz: RequestRoutes.self) { (source: AnyObject) -> RequestRoutes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestRoutes()
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.departureSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_searches"])
                instance.arrivalSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_searches"])
                return instance
            }


            // Decoder for [RequestRoutesArrivalSearch]
            Decoders.addDecoder(clazz: [RequestRoutesArrivalSearch].self) { (source: AnyObject) -> [RequestRoutesArrivalSearch] in
                return Decoders.decode(clazz: [RequestRoutesArrivalSearch].self, source: source)
            }
            // Decoder for RequestRoutesArrivalSearch
            Decoders.addDecoder(clazz: RequestRoutesArrivalSearch.self) { (source: AnyObject) -> RequestRoutesArrivalSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestRoutesArrivalSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.departureLocationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_location_ids"])
                instance.arrivalLocationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_location_id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["arrival_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestRoutesDepartureSearch]
            Decoders.addDecoder(clazz: [RequestRoutesDepartureSearch].self) { (source: AnyObject) -> [RequestRoutesDepartureSearch] in
                return Decoders.decode(clazz: [RequestRoutesDepartureSearch].self, source: source)
            }
            // Decoder for RequestRoutesDepartureSearch
            Decoders.addDecoder(clazz: RequestRoutesDepartureSearch.self) { (source: AnyObject) -> RequestRoutesDepartureSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestRoutesDepartureSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.departureLocationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_location_id"])
                instance.arrivalLocationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_location_ids"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.departureTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["departure_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestRoutesProperty]
            Decoders.addDecoder(clazz: [RequestRoutesProperty].self) { (source: AnyObject) -> [RequestRoutesProperty] in
                return Decoders.decode(clazz: [RequestRoutesProperty].self, source: source)
            }
            // Decoder for RequestRoutesProperty
            Decoders.addDecoder(clazz: RequestRoutesProperty.self) { (source: AnyObject) -> RequestRoutesProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestRoutesProperty()
                return instance
            }


            // Decoder for [RequestSupportedLocations]
            Decoders.addDecoder(clazz: [RequestSupportedLocations].self) { (source: AnyObject) -> [RequestSupportedLocations] in
                return Decoders.decode(clazz: [RequestSupportedLocations].self, source: source)
            }
            // Decoder for RequestSupportedLocations
            Decoders.addDecoder(clazz: RequestSupportedLocations.self) { (source: AnyObject) -> RequestSupportedLocations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestSupportedLocations()
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                return instance
            }


            // Decoder for [RequestTimeFilter]
            Decoders.addDecoder(clazz: [RequestTimeFilter].self) { (source: AnyObject) -> [RequestTimeFilter] in
                return Decoders.decode(clazz: [RequestTimeFilter].self, source: source)
            }
            // Decoder for RequestTimeFilter
            Decoders.addDecoder(clazz: RequestTimeFilter.self) { (source: AnyObject) -> RequestTimeFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilter()
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.departureSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_searches"])
                instance.arrivalSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_searches"])
                return instance
            }


            // Decoder for [RequestTimeFilterArrivalSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterArrivalSearch].self) { (source: AnyObject) -> [RequestTimeFilterArrivalSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterArrivalSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterArrivalSearch
            Decoders.addDecoder(clazz: RequestTimeFilterArrivalSearch.self) { (source: AnyObject) -> RequestTimeFilterArrivalSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterArrivalSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.departureLocationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_location_ids"])
                instance.arrivalLocationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_location_id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["arrival_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterDepartureSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterDepartureSearch].self) { (source: AnyObject) -> [RequestTimeFilterDepartureSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterDepartureSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterDepartureSearch
            Decoders.addDecoder(clazz: RequestTimeFilterDepartureSearch.self) { (source: AnyObject) -> RequestTimeFilterDepartureSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterDepartureSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.departureLocationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_location_id"])
                instance.arrivalLocationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_location_ids"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.departureTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["departure_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterFast]
            Decoders.addDecoder(clazz: [RequestTimeFilterFast].self) { (source: AnyObject) -> [RequestTimeFilterFast] in
                return Decoders.decode(clazz: [RequestTimeFilterFast].self, source: source)
            }
            // Decoder for RequestTimeFilterFast
            Decoders.addDecoder(clazz: RequestTimeFilterFast.self) { (source: AnyObject) -> RequestTimeFilterFast in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterFast()
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.arrivalSearches = Decoders.decodeOptional(clazz: RequestTimeFilterFastArrivalSearches.self, source: sourceDictionary["arrival_searches"])
                return instance
            }


            // Decoder for [RequestTimeFilterFastArrivalManyToOneSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterFastArrivalManyToOneSearch].self) { (source: AnyObject) -> [RequestTimeFilterFastArrivalManyToOneSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterFastArrivalManyToOneSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterFastArrivalManyToOneSearch
            Decoders.addDecoder(clazz: RequestTimeFilterFastArrivalManyToOneSearch.self) { (source: AnyObject) -> RequestTimeFilterFastArrivalManyToOneSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterFastArrivalManyToOneSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.arrivalLocationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_location_id"])
                instance.departureLocationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_location_ids"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportationFast.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.arrivalTimePeriod = Decoders.decodeOptional(clazz: RequestArrivalTimePeriod.self, source: sourceDictionary["arrival_time_period"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [RequestTimeFilterFastArrivalOneToManySearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterFastArrivalOneToManySearch].self) { (source: AnyObject) -> [RequestTimeFilterFastArrivalOneToManySearch] in
                return Decoders.decode(clazz: [RequestTimeFilterFastArrivalOneToManySearch].self, source: source)
            }
            // Decoder for RequestTimeFilterFastArrivalOneToManySearch
            Decoders.addDecoder(clazz: RequestTimeFilterFastArrivalOneToManySearch.self) { (source: AnyObject) -> RequestTimeFilterFastArrivalOneToManySearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterFastArrivalOneToManySearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.departureLocationId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_location_id"])
                instance.arrivalLocationIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_location_ids"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportationFast.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.arrivalTimePeriod = Decoders.decodeOptional(clazz: RequestArrivalTimePeriod.self, source: sourceDictionary["arrival_time_period"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [RequestTimeFilterFastArrivalSearches]
            Decoders.addDecoder(clazz: [RequestTimeFilterFastArrivalSearches].self) { (source: AnyObject) -> [RequestTimeFilterFastArrivalSearches] in
                return Decoders.decode(clazz: [RequestTimeFilterFastArrivalSearches].self, source: source)
            }
            // Decoder for RequestTimeFilterFastArrivalSearches
            Decoders.addDecoder(clazz: RequestTimeFilterFastArrivalSearches.self) { (source: AnyObject) -> RequestTimeFilterFastArrivalSearches in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterFastArrivalSearches()
                instance.manyToOne = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["many_to_one"])
                instance.oneToMany = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["one_to_many"])
                return instance
            }


            // Decoder for [RequestTimeFilterFastProperty]
            Decoders.addDecoder(clazz: [RequestTimeFilterFastProperty].self) { (source: AnyObject) -> [RequestTimeFilterFastProperty] in
                return Decoders.decode(clazz: [RequestTimeFilterFastProperty].self, source: source)
            }
            // Decoder for RequestTimeFilterFastProperty
            Decoders.addDecoder(clazz: RequestTimeFilterFastProperty.self) { (source: AnyObject) -> RequestTimeFilterFastProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterFastProperty()
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeDistricts]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeDistricts].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeDistricts] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeDistricts].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeDistricts
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeDistricts.self) { (source: AnyObject) -> RequestTimeFilterPostcodeDistricts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeDistricts()
                instance.departureSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_searches"])
                instance.arrivalSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_searches"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeDistrictsArrivalSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeDistrictsArrivalSearch].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeDistrictsArrivalSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeDistrictsArrivalSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeDistrictsArrivalSearch
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeDistrictsArrivalSearch.self) { (source: AnyObject) -> RequestTimeFilterPostcodeDistrictsArrivalSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeDistrictsArrivalSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["arrival_time"])
                instance.reachablePostcodesThreshold = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reachable_postcodes_threshold"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeDistrictsDepartureSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeDistrictsDepartureSearch].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeDistrictsDepartureSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeDistrictsDepartureSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeDistrictsDepartureSearch
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeDistrictsDepartureSearch.self) { (source: AnyObject) -> RequestTimeFilterPostcodeDistrictsDepartureSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeDistrictsDepartureSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.departureTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["departure_time"])
                instance.reachablePostcodesThreshold = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reachable_postcodes_threshold"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeDistrictsProperty]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeDistrictsProperty].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeDistrictsProperty] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeDistrictsProperty].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeDistrictsProperty
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeDistrictsProperty.self) { (source: AnyObject) -> RequestTimeFilterPostcodeDistrictsProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeDistrictsProperty()
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeSectors]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeSectors].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeSectors] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeSectors].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeSectors
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeSectors.self) { (source: AnyObject) -> RequestTimeFilterPostcodeSectors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeSectors()
                instance.departureSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_searches"])
                instance.arrivalSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_searches"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeSectorsArrivalSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeSectorsArrivalSearch].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeSectorsArrivalSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeSectorsArrivalSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeSectorsArrivalSearch
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeSectorsArrivalSearch.self) { (source: AnyObject) -> RequestTimeFilterPostcodeSectorsArrivalSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeSectorsArrivalSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["arrival_time"])
                instance.reachablePostcodesThreshold = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reachable_postcodes_threshold"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeSectorsDepartureSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeSectorsDepartureSearch].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeSectorsDepartureSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeSectorsDepartureSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeSectorsDepartureSearch
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeSectorsDepartureSearch.self) { (source: AnyObject) -> RequestTimeFilterPostcodeSectorsDepartureSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeSectorsDepartureSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.departureTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["departure_time"])
                instance.reachablePostcodesThreshold = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["reachable_postcodes_threshold"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodeSectorsProperty]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodeSectorsProperty].self) { (source: AnyObject) -> [RequestTimeFilterPostcodeSectorsProperty] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodeSectorsProperty].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodeSectorsProperty
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodeSectorsProperty.self) { (source: AnyObject) -> RequestTimeFilterPostcodeSectorsProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodeSectorsProperty()
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodes]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodes].self) { (source: AnyObject) -> [RequestTimeFilterPostcodes] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodes].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodes
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodes.self) { (source: AnyObject) -> RequestTimeFilterPostcodes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodes()
                instance.departureSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_searches"])
                instance.arrivalSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_searches"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodesArrivalSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodesArrivalSearch].self) { (source: AnyObject) -> [RequestTimeFilterPostcodesArrivalSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodesArrivalSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodesArrivalSearch
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodesArrivalSearch.self) { (source: AnyObject) -> RequestTimeFilterPostcodesArrivalSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodesArrivalSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["arrival_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodesDepartureSearch]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodesDepartureSearch].self) { (source: AnyObject) -> [RequestTimeFilterPostcodesDepartureSearch] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodesDepartureSearch].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodesDepartureSearch
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodesDepartureSearch.self) { (source: AnyObject) -> RequestTimeFilterPostcodesDepartureSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodesDepartureSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.departureTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["departure_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeFull.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeFilterPostcodesProperty]
            Decoders.addDecoder(clazz: [RequestTimeFilterPostcodesProperty].self) { (source: AnyObject) -> [RequestTimeFilterPostcodesProperty] in
                return Decoders.decode(clazz: [RequestTimeFilterPostcodesProperty].self, source: source)
            }
            // Decoder for RequestTimeFilterPostcodesProperty
            Decoders.addDecoder(clazz: RequestTimeFilterPostcodesProperty.self) { (source: AnyObject) -> RequestTimeFilterPostcodesProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterPostcodesProperty()
                return instance
            }


            // Decoder for [RequestTimeFilterProperty]
            Decoders.addDecoder(clazz: [RequestTimeFilterProperty].self) { (source: AnyObject) -> [RequestTimeFilterProperty] in
                return Decoders.decode(clazz: [RequestTimeFilterProperty].self, source: source)
            }
            // Decoder for RequestTimeFilterProperty
            Decoders.addDecoder(clazz: RequestTimeFilterProperty.self) { (source: AnyObject) -> RequestTimeFilterProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeFilterProperty()
                return instance
            }


            // Decoder for [RequestTimeMap]
            Decoders.addDecoder(clazz: [RequestTimeMap].self) { (source: AnyObject) -> [RequestTimeMap] in
                return Decoders.decode(clazz: [RequestTimeMap].self, source: source)
            }
            // Decoder for RequestTimeMap
            Decoders.addDecoder(clazz: RequestTimeMap.self) { (source: AnyObject) -> RequestTimeMap in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeMap()
                instance.departureSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["departure_searches"])
                instance.arrivalSearches = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["arrival_searches"])
                instance.unions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["unions"])
                instance.intersections = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["intersections"])
                return instance
            }


            // Decoder for [RequestTimeMapArrivalSearch]
            Decoders.addDecoder(clazz: [RequestTimeMapArrivalSearch].self) { (source: AnyObject) -> [RequestTimeMapArrivalSearch] in
                return Decoders.decode(clazz: [RequestTimeMapArrivalSearch].self, source: source)
            }
            // Decoder for RequestTimeMapArrivalSearch
            Decoders.addDecoder(clazz: RequestTimeMapArrivalSearch.self) { (source: AnyObject) -> RequestTimeMapArrivalSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeMapArrivalSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.coords = Decoders.decodeOptional(clazz: Coords.self, source: sourceDictionary["coords"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["arrival_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeNoMaxResults.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeMapDepartureSearch]
            Decoders.addDecoder(clazz: [RequestTimeMapDepartureSearch].self) { (source: AnyObject) -> [RequestTimeMapDepartureSearch] in
                return Decoders.decode(clazz: [RequestTimeMapDepartureSearch].self, source: source)
            }
            // Decoder for RequestTimeMapDepartureSearch
            Decoders.addDecoder(clazz: RequestTimeMapDepartureSearch.self) { (source: AnyObject) -> RequestTimeMapDepartureSearch in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeMapDepartureSearch()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.coords = Decoders.decodeOptional(clazz: Coords.self, source: sourceDictionary["coords"])
                instance.transportation = Decoders.decodeOptional(clazz: RequestTransportation.self, source: sourceDictionary["transportation"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.departureTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["departure_time"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                instance.range = Decoders.decodeOptional(clazz: RequestRangeNoMaxResults.self, source: sourceDictionary["range"])
                return instance
            }


            // Decoder for [RequestTimeMapProperty]
            Decoders.addDecoder(clazz: [RequestTimeMapProperty].self) { (source: AnyObject) -> [RequestTimeMapProperty] in
                return Decoders.decode(clazz: [RequestTimeMapProperty].self, source: source)
            }
            // Decoder for RequestTimeMapProperty
            Decoders.addDecoder(clazz: RequestTimeMapProperty.self) { (source: AnyObject) -> RequestTimeMapProperty in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTimeMapProperty()
                return instance
            }


            // Decoder for [RequestTransportation]
            Decoders.addDecoder(clazz: [RequestTransportation].self) { (source: AnyObject) -> [RequestTransportation] in
                return Decoders.decode(clazz: [RequestTransportation].self, source: source)
            }
            // Decoder for RequestTransportation
            Decoders.addDecoder(clazz: RequestTransportation.self) { (source: AnyObject) -> RequestTransportation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTransportation()
                instance.type = RequestTransportation.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.ptChangeDelay = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pt_change_delay"])
                instance.walkingTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["walking_time"])
                instance.drivingTimeToStation = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["driving_time_to_station"])
                instance.parkingTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["parking_time"])
                instance.boardingTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["boarding_time"])
                return instance
            }


            // Decoder for [RequestTransportationFast]
            Decoders.addDecoder(clazz: [RequestTransportationFast].self) { (source: AnyObject) -> [RequestTransportationFast] in
                return Decoders.decode(clazz: [RequestTransportationFast].self, source: source)
            }
            // Decoder for RequestTransportationFast
            Decoders.addDecoder(clazz: RequestTransportationFast.self) { (source: AnyObject) -> RequestTransportationFast in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestTransportationFast()
                instance.type = RequestTransportationFast.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                return instance
            }


            // Decoder for [RequestUnionOnIntersection]
            Decoders.addDecoder(clazz: [RequestUnionOnIntersection].self) { (source: AnyObject) -> [RequestUnionOnIntersection] in
                return Decoders.decode(clazz: [RequestUnionOnIntersection].self, source: source)
            }
            // Decoder for RequestUnionOnIntersection
            Decoders.addDecoder(clazz: RequestUnionOnIntersection.self) { (source: AnyObject) -> RequestUnionOnIntersection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = RequestUnionOnIntersection()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.searchIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["search_ids"])
                return instance
            }


            // Decoder for [ResponseBoundingBox]
            Decoders.addDecoder(clazz: [ResponseBoundingBox].self) { (source: AnyObject) -> [ResponseBoundingBox] in
                return Decoders.decode(clazz: [ResponseBoundingBox].self, source: source)
            }
            // Decoder for ResponseBoundingBox
            Decoders.addDecoder(clazz: ResponseBoundingBox.self) { (source: AnyObject) -> ResponseBoundingBox in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseBoundingBox()
                instance.envelope = Decoders.decodeOptional(clazz: ResponseBox.self, source: sourceDictionary["envelope"])
                instance.boxes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["boxes"])
                return instance
            }


            // Decoder for [ResponseBox]
            Decoders.addDecoder(clazz: [ResponseBox].self) { (source: AnyObject) -> [ResponseBox] in
                return Decoders.decode(clazz: [ResponseBox].self, source: source)
            }
            // Decoder for ResponseBox
            Decoders.addDecoder(clazz: ResponseBox.self) { (source: AnyObject) -> ResponseBox in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseBox()
                instance.minLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_lat"])
                instance.maxLat = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max_lat"])
                instance.minLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["min_lng"])
                instance.maxLng = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["max_lng"])
                return instance
            }


            // Decoder for [ResponseDistanceBreakdownItem]
            Decoders.addDecoder(clazz: [ResponseDistanceBreakdownItem].self) { (source: AnyObject) -> [ResponseDistanceBreakdownItem] in
                return Decoders.decode(clazz: [ResponseDistanceBreakdownItem].self, source: source)
            }
            // Decoder for ResponseDistanceBreakdownItem
            Decoders.addDecoder(clazz: ResponseDistanceBreakdownItem.self) { (source: AnyObject) -> ResponseDistanceBreakdownItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseDistanceBreakdownItem()
                instance.mode = Decoders.decodeOptional(clazz: ResponseTransportationMode.self, source: sourceDictionary["mode"])
                instance.distance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["distance"])
                return instance
            }


            // Decoder for [ResponseError]
            Decoders.addDecoder(clazz: [ResponseError].self) { (source: AnyObject) -> [ResponseError] in
                return Decoders.decode(clazz: [ResponseError].self, source: source)
            }
            // Decoder for ResponseError
            Decoders.addDecoder(clazz: ResponseError.self) { (source: AnyObject) -> ResponseError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseError()
                instance.httpStatus = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["http_status"])
                instance.errorCode = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["error_code"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.documentationLink = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["documentation_link"])
                instance.additionalInfo = Decoders.decodeOptional(clazz: Dictionary.self, source: sourceDictionary["additional_info"])
                return instance
            }


            // Decoder for [ResponseFareTicket]
            Decoders.addDecoder(clazz: [ResponseFareTicket].self) { (source: AnyObject) -> [ResponseFareTicket] in
                return Decoders.decode(clazz: [ResponseFareTicket].self, source: source)
            }
            // Decoder for ResponseFareTicket
            Decoders.addDecoder(clazz: ResponseFareTicket.self) { (source: AnyObject) -> ResponseFareTicket in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseFareTicket()
                instance.type = ResponseFareTicket.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.price = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["price"])
                instance.currency = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["currency"])
                return instance
            }


            // Decoder for [ResponseFares]
            Decoders.addDecoder(clazz: [ResponseFares].self) { (source: AnyObject) -> [ResponseFares] in
                return Decoders.decode(clazz: [ResponseFares].self, source: source)
            }
            // Decoder for ResponseFares
            Decoders.addDecoder(clazz: ResponseFares.self) { (source: AnyObject) -> ResponseFares in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseFares()
                instance.breakdown = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["breakdown"])
                instance.ticketsTotal = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tickets_total"])
                return instance
            }


            // Decoder for [ResponseFaresBreakdownItem]
            Decoders.addDecoder(clazz: [ResponseFaresBreakdownItem].self) { (source: AnyObject) -> [ResponseFaresBreakdownItem] in
                return Decoders.decode(clazz: [ResponseFaresBreakdownItem].self, source: source)
            }
            // Decoder for ResponseFaresBreakdownItem
            Decoders.addDecoder(clazz: ResponseFaresBreakdownItem.self) { (source: AnyObject) -> ResponseFaresBreakdownItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseFaresBreakdownItem()
                instance.modes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["modes"])
                instance.routePartIds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["route_part_ids"])
                instance.tickets = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tickets"])
                return instance
            }


            // Decoder for [ResponseFaresFast]
            Decoders.addDecoder(clazz: [ResponseFaresFast].self) { (source: AnyObject) -> [ResponseFaresFast] in
                return Decoders.decode(clazz: [ResponseFaresFast].self, source: source)
            }
            // Decoder for ResponseFaresFast
            Decoders.addDecoder(clazz: ResponseFaresFast.self) { (source: AnyObject) -> ResponseFaresFast in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseFaresFast()
                instance.ticketsTotal = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tickets_total"])
                return instance
            }


            // Decoder for [ResponseGeocoding]
            Decoders.addDecoder(clazz: [ResponseGeocoding].self) { (source: AnyObject) -> [ResponseGeocoding] in
                return Decoders.decode(clazz: [ResponseGeocoding].self, source: source)
            }
            // Decoder for ResponseGeocoding
            Decoders.addDecoder(clazz: ResponseGeocoding.self) { (source: AnyObject) -> ResponseGeocoding in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseGeocoding()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.features = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["features"])
                return instance
            }


            // Decoder for [ResponseGeocodingGeoJsonFeature]
            Decoders.addDecoder(clazz: [ResponseGeocodingGeoJsonFeature].self) { (source: AnyObject) -> [ResponseGeocodingGeoJsonFeature] in
                return Decoders.decode(clazz: [ResponseGeocodingGeoJsonFeature].self, source: source)
            }
            // Decoder for ResponseGeocodingGeoJsonFeature
            Decoders.addDecoder(clazz: ResponseGeocodingGeoJsonFeature.self) { (source: AnyObject) -> ResponseGeocodingGeoJsonFeature in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseGeocodingGeoJsonFeature()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.geometry = Decoders.decodeOptional(clazz: ResponseGeocodingGeometry.self, source: sourceDictionary["geometry"])
                instance.properties = Decoders.decodeOptional(clazz: ResponseGeocodingProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseGeocodingGeometry]
            Decoders.addDecoder(clazz: [ResponseGeocodingGeometry].self) { (source: AnyObject) -> [ResponseGeocodingGeometry] in
                return Decoders.decode(clazz: [ResponseGeocodingGeometry].self, source: source)
            }
            // Decoder for ResponseGeocodingGeometry
            Decoders.addDecoder(clazz: ResponseGeocodingGeometry.self) { (source: AnyObject) -> ResponseGeocodingGeometry in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseGeocodingGeometry()
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"])
                return instance
            }


            // Decoder for [ResponseGeocodingProperties]
            Decoders.addDecoder(clazz: [ResponseGeocodingProperties].self) { (source: AnyObject) -> [ResponseGeocodingProperties] in
                return Decoders.decode(clazz: [ResponseGeocodingProperties].self, source: source)
            }
            // Decoder for ResponseGeocodingProperties
            Decoders.addDecoder(clazz: ResponseGeocodingProperties.self) { (source: AnyObject) -> ResponseGeocodingProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseGeocodingProperties()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.label = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"])
                instance.score = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["score"])
                instance.houseNumber = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["house_number"])
                instance.street = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["street"])
                instance.region = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region"])
                instance.regionCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["region_code"])
                instance.neighbourhood = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["neighbourhood"])
                instance.county = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["county"])
                instance.macroregion = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["macroregion"])
                instance.city = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["city"])
                instance.country = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country"])
                instance.countryCode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["country_code"])
                instance.continent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["continent"])
                instance.postcode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["postcode"])
                instance.features = Decoders.decodeOptional(clazz: ResponseMapInfoFeatures.self, source: sourceDictionary["features"])
                return instance
            }


            // Decoder for [ResponseMapInfo]
            Decoders.addDecoder(clazz: [ResponseMapInfo].self) { (source: AnyObject) -> [ResponseMapInfo] in
                return Decoders.decode(clazz: [ResponseMapInfo].self, source: source)
            }
            // Decoder for ResponseMapInfo
            Decoders.addDecoder(clazz: ResponseMapInfo.self) { (source: AnyObject) -> ResponseMapInfo in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseMapInfo()
                instance.maps = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["maps"])
                return instance
            }


            // Decoder for [ResponseMapInfoFeatures]
            Decoders.addDecoder(clazz: [ResponseMapInfoFeatures].self) { (source: AnyObject) -> [ResponseMapInfoFeatures] in
                return Decoders.decode(clazz: [ResponseMapInfoFeatures].self, source: source)
            }
            // Decoder for ResponseMapInfoFeatures
            Decoders.addDecoder(clazz: ResponseMapInfoFeatures.self) { (source: AnyObject) -> ResponseMapInfoFeatures in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseMapInfoFeatures()
                instance.publicTransport = Decoders.decodeOptional(clazz: ResponseMapInfoFeaturesPublicTransport.self, source: sourceDictionary["public_transport"])
                instance.fares = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["fares"])
                instance.postcodes = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["postcodes"])
                return instance
            }


            // Decoder for [ResponseMapInfoFeaturesPublicTransport]
            Decoders.addDecoder(clazz: [ResponseMapInfoFeaturesPublicTransport].self) { (source: AnyObject) -> [ResponseMapInfoFeaturesPublicTransport] in
                return Decoders.decode(clazz: [ResponseMapInfoFeaturesPublicTransport].self, source: source)
            }
            // Decoder for ResponseMapInfoFeaturesPublicTransport
            Decoders.addDecoder(clazz: ResponseMapInfoFeaturesPublicTransport.self) { (source: AnyObject) -> ResponseMapInfoFeaturesPublicTransport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseMapInfoFeaturesPublicTransport()
                instance.dateStart = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date_start"])
                instance.dateEnd = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["date_end"])
                return instance
            }


            // Decoder for [ResponseMapInfoMap]
            Decoders.addDecoder(clazz: [ResponseMapInfoMap].self) { (source: AnyObject) -> [ResponseMapInfoMap] in
                return Decoders.decode(clazz: [ResponseMapInfoMap].self, source: source)
            }
            // Decoder for ResponseMapInfoMap
            Decoders.addDecoder(clazz: ResponseMapInfoMap.self) { (source: AnyObject) -> ResponseMapInfoMap in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseMapInfoMap()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.features = Decoders.decodeOptional(clazz: ResponseMapInfoFeatures.self, source: sourceDictionary["features"])
                return instance
            }


            // Decoder for [ResponseRoute]
            Decoders.addDecoder(clazz: [ResponseRoute].self) { (source: AnyObject) -> [ResponseRoute] in
                return Decoders.decode(clazz: [ResponseRoute].self, source: source)
            }
            // Decoder for ResponseRoute
            Decoders.addDecoder(clazz: ResponseRoute.self) { (source: AnyObject) -> ResponseRoute in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseRoute()
                instance.departureTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["departure_time"])
                instance.arrivalTime = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["arrival_time"])
                instance.parts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parts"])
                return instance
            }


            // Decoder for [ResponseRoutePart]
            Decoders.addDecoder(clazz: [ResponseRoutePart].self) { (source: AnyObject) -> [ResponseRoutePart] in
                return Decoders.decode(clazz: [ResponseRoutePart].self, source: source)
            }
            // Decoder for ResponseRoutePart
            Decoders.addDecoder(clazz: ResponseRoutePart.self) { (source: AnyObject) -> ResponseRoutePart in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseRoutePart()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.type = ResponseRoutePart.ModelType(rawValue: (sourceDictionary["type"] as? String) ?? "") 
                instance.mode = Decoders.decodeOptional(clazz: ResponseTransportationMode.self, source: sourceDictionary["mode"])
                instance.directions = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["directions"])
                instance.distance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["distance"])
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.coords = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coords"])
                instance.direction = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["direction"])
                instance.road = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["road"])
                instance.turn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["turn"])
                instance.line = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["line"])
                instance.departureStation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departure_station"])
                instance.arrivalStation = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrival_station"])
                instance.departsAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["departs_at"])
                instance.arrivesAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["arrives_at"])
                instance.numStops = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["num_stops"])
                return instance
            }


            // Decoder for [ResponseRoutes]
            Decoders.addDecoder(clazz: [ResponseRoutes].self) { (source: AnyObject) -> [ResponseRoutes] in
                return Decoders.decode(clazz: [ResponseRoutes].self, source: source)
            }
            // Decoder for ResponseRoutes
            Decoders.addDecoder(clazz: ResponseRoutes.self) { (source: AnyObject) -> ResponseRoutes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseRoutes()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseRoutesLocation]
            Decoders.addDecoder(clazz: [ResponseRoutesLocation].self) { (source: AnyObject) -> [ResponseRoutesLocation] in
                return Decoders.decode(clazz: [ResponseRoutesLocation].self, source: source)
            }
            // Decoder for ResponseRoutesLocation
            Decoders.addDecoder(clazz: ResponseRoutesLocation.self) { (source: AnyObject) -> ResponseRoutesLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseRoutesLocation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseRoutesProperties]
            Decoders.addDecoder(clazz: [ResponseRoutesProperties].self) { (source: AnyObject) -> [ResponseRoutesProperties] in
                return Decoders.decode(clazz: [ResponseRoutesProperties].self, source: source)
            }
            // Decoder for ResponseRoutesProperties
            Decoders.addDecoder(clazz: ResponseRoutesProperties.self) { (source: AnyObject) -> ResponseRoutesProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseRoutesProperties()
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.distance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["distance"])
                instance.fares = Decoders.decodeOptional(clazz: ResponseFares.self, source: sourceDictionary["fares"])
                instance.route = Decoders.decodeOptional(clazz: ResponseRoute.self, source: sourceDictionary["route"])
                return instance
            }


            // Decoder for [ResponseRoutesResult]
            Decoders.addDecoder(clazz: [ResponseRoutesResult].self) { (source: AnyObject) -> [ResponseRoutesResult] in
                return Decoders.decode(clazz: [ResponseRoutesResult].self, source: source)
            }
            // Decoder for ResponseRoutesResult
            Decoders.addDecoder(clazz: ResponseRoutesResult.self) { (source: AnyObject) -> ResponseRoutesResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseRoutesResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.unreachable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["unreachable"])
                return instance
            }


            // Decoder for [ResponseShape]
            Decoders.addDecoder(clazz: [ResponseShape].self) { (source: AnyObject) -> [ResponseShape] in
                return Decoders.decode(clazz: [ResponseShape].self, source: source)
            }
            // Decoder for ResponseShape
            Decoders.addDecoder(clazz: ResponseShape.self) { (source: AnyObject) -> ResponseShape in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseShape()
                instance.shell = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shell"])
                instance.holes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["holes"])
                return instance
            }


            // Decoder for [ResponseSupportedLocation]
            Decoders.addDecoder(clazz: [ResponseSupportedLocation].self) { (source: AnyObject) -> [ResponseSupportedLocation] in
                return Decoders.decode(clazz: [ResponseSupportedLocation].self, source: source)
            }
            // Decoder for ResponseSupportedLocation
            Decoders.addDecoder(clazz: ResponseSupportedLocation.self) { (source: AnyObject) -> ResponseSupportedLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseSupportedLocation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.mapName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["map_name"])
                return instance
            }


            // Decoder for [ResponseSupportedLocations]
            Decoders.addDecoder(clazz: [ResponseSupportedLocations].self) { (source: AnyObject) -> [ResponseSupportedLocations] in
                return Decoders.decode(clazz: [ResponseSupportedLocations].self, source: source)
            }
            // Decoder for ResponseSupportedLocations
            Decoders.addDecoder(clazz: ResponseSupportedLocations.self) { (source: AnyObject) -> ResponseSupportedLocations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseSupportedLocations()
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.unsupportedLocations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["unsupported_locations"])
                return instance
            }


            // Decoder for [ResponseTimeFilter]
            Decoders.addDecoder(clazz: [ResponseTimeFilter].self) { (source: AnyObject) -> [ResponseTimeFilter] in
                return Decoders.decode(clazz: [ResponseTimeFilter].self, source: source)
            }
            // Decoder for ResponseTimeFilter
            Decoders.addDecoder(clazz: ResponseTimeFilter.self) { (source: AnyObject) -> ResponseTimeFilter in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilter()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeFilterFast]
            Decoders.addDecoder(clazz: [ResponseTimeFilterFast].self) { (source: AnyObject) -> [ResponseTimeFilterFast] in
                return Decoders.decode(clazz: [ResponseTimeFilterFast].self, source: source)
            }
            // Decoder for ResponseTimeFilterFast
            Decoders.addDecoder(clazz: ResponseTimeFilterFast.self) { (source: AnyObject) -> ResponseTimeFilterFast in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterFast()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeFilterFastLocation]
            Decoders.addDecoder(clazz: [ResponseTimeFilterFastLocation].self) { (source: AnyObject) -> [ResponseTimeFilterFastLocation] in
                return Decoders.decode(clazz: [ResponseTimeFilterFastLocation].self, source: source)
            }
            // Decoder for ResponseTimeFilterFastLocation
            Decoders.addDecoder(clazz: ResponseTimeFilterFastLocation.self) { (source: AnyObject) -> ResponseTimeFilterFastLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterFastLocation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTimeFilterFastProperties]
            Decoders.addDecoder(clazz: [ResponseTimeFilterFastProperties].self) { (source: AnyObject) -> [ResponseTimeFilterFastProperties] in
                return Decoders.decode(clazz: [ResponseTimeFilterFastProperties].self, source: source)
            }
            // Decoder for ResponseTimeFilterFastProperties
            Decoders.addDecoder(clazz: ResponseTimeFilterFastProperties.self) { (source: AnyObject) -> ResponseTimeFilterFastProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterFastProperties()
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.fares = Decoders.decodeOptional(clazz: ResponseFaresFast.self, source: sourceDictionary["fares"])
                return instance
            }


            // Decoder for [ResponseTimeFilterFastResult]
            Decoders.addDecoder(clazz: [ResponseTimeFilterFastResult].self) { (source: AnyObject) -> [ResponseTimeFilterFastResult] in
                return Decoders.decode(clazz: [ResponseTimeFilterFastResult].self, source: source)
            }
            // Decoder for ResponseTimeFilterFastResult
            Decoders.addDecoder(clazz: ResponseTimeFilterFastResult.self) { (source: AnyObject) -> ResponseTimeFilterFastResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterFastResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.unreachable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["unreachable"])
                return instance
            }


            // Decoder for [ResponseTimeFilterLocation]
            Decoders.addDecoder(clazz: [ResponseTimeFilterLocation].self) { (source: AnyObject) -> [ResponseTimeFilterLocation] in
                return Decoders.decode(clazz: [ResponseTimeFilterLocation].self, source: source)
            }
            // Decoder for ResponseTimeFilterLocation
            Decoders.addDecoder(clazz: ResponseTimeFilterLocation.self) { (source: AnyObject) -> ResponseTimeFilterLocation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterLocation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcode]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcode].self) { (source: AnyObject) -> [ResponseTimeFilterPostcode] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcode].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcode
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcode.self) { (source: AnyObject) -> ResponseTimeFilterPostcode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcode()
                instance.code = Decoders.decodeOptional(clazz: ModelString.self, source: sourceDictionary["code"])
                instance.properties = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeDistrict]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeDistrict].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeDistrict] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeDistrict].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeDistrict
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeDistrict.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeDistrict in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeDistrict()
                instance.code = Decoders.decodeOptional(clazz: ModelString.self, source: sourceDictionary["code"])
                instance.properties = Decoders.decodeOptional(clazz: ResponseTimeFilterPostcodeDistrictProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeDistrictProperties]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeDistrictProperties].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeDistrictProperties] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeDistrictProperties].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeDistrictProperties
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeDistrictProperties.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeDistrictProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeDistrictProperties()
                instance.travelTimeReachable = Decoders.decodeOptional(clazz: ResponseTravelTimeStatistics.self, source: sourceDictionary["travel_time_reachable"])
                instance.travelTimeAll = Decoders.decodeOptional(clazz: ResponseTravelTimeStatistics.self, source: sourceDictionary["travel_time_all"])
                instance.coverage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["coverage"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeDistricts]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeDistricts].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeDistricts] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeDistricts].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeDistricts
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeDistricts.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeDistricts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeDistricts()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeDistrictsResult]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeDistrictsResult].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeDistrictsResult] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeDistrictsResult].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeDistrictsResult
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeDistrictsResult.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeDistrictsResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeDistrictsResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.districts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["districts"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeSector]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeSector].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeSector] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeSector].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeSector
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeSector.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeSector in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeSector()
                instance.code = Decoders.decodeOptional(clazz: ModelString.self, source: sourceDictionary["code"])
                instance.properties = Decoders.decodeOptional(clazz: ResponseTimeFilterPostcodeSectorProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeSectorProperties]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeSectorProperties].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeSectorProperties] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeSectorProperties].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeSectorProperties
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeSectorProperties.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeSectorProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeSectorProperties()
                instance.travelTimeReachable = Decoders.decodeOptional(clazz: ResponseTravelTimeStatistics.self, source: sourceDictionary["travel_time_reachable"])
                instance.travelTimeAll = Decoders.decodeOptional(clazz: ResponseTravelTimeStatistics.self, source: sourceDictionary["travel_time_all"])
                instance.coverage = Decoders.decodeOptional(clazz: Double.self, source: sourceDictionary["coverage"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeSectors]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeSectors].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeSectors] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeSectors].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeSectors
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeSectors.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeSectors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeSectors()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodeSectorsResult]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodeSectorsResult].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodeSectorsResult] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodeSectorsResult].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodeSectorsResult
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodeSectorsResult.self) { (source: AnyObject) -> ResponseTimeFilterPostcodeSectorsResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodeSectorsResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.sectors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["sectors"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodes]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodes].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodes] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodes].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodes
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodes.self) { (source: AnyObject) -> ResponseTimeFilterPostcodes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodes()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodesProperties]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodesProperties].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodesProperties] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodesProperties].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodesProperties
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodesProperties.self) { (source: AnyObject) -> ResponseTimeFilterPostcodesProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodesProperties()
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.distance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["distance"])
                return instance
            }


            // Decoder for [ResponseTimeFilterPostcodesResult]
            Decoders.addDecoder(clazz: [ResponseTimeFilterPostcodesResult].self) { (source: AnyObject) -> [ResponseTimeFilterPostcodesResult] in
                return Decoders.decode(clazz: [ResponseTimeFilterPostcodesResult].self, source: source)
            }
            // Decoder for ResponseTimeFilterPostcodesResult
            Decoders.addDecoder(clazz: ResponseTimeFilterPostcodesResult.self) { (source: AnyObject) -> ResponseTimeFilterPostcodesResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterPostcodesResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.postcodes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["postcodes"])
                return instance
            }


            // Decoder for [ResponseTimeFilterProperties]
            Decoders.addDecoder(clazz: [ResponseTimeFilterProperties].self) { (source: AnyObject) -> [ResponseTimeFilterProperties] in
                return Decoders.decode(clazz: [ResponseTimeFilterProperties].self, source: source)
            }
            // Decoder for ResponseTimeFilterProperties
            Decoders.addDecoder(clazz: ResponseTimeFilterProperties.self) { (source: AnyObject) -> ResponseTimeFilterProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterProperties()
                instance.travelTime = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["travel_time"])
                instance.distance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["distance"])
                instance.distanceBreakdown = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["distance_breakdown"])
                instance.fares = Decoders.decodeOptional(clazz: ResponseFares.self, source: sourceDictionary["fares"])
                instance.route = Decoders.decodeOptional(clazz: ResponseRoute.self, source: sourceDictionary["route"])
                return instance
            }


            // Decoder for [ResponseTimeFilterResult]
            Decoders.addDecoder(clazz: [ResponseTimeFilterResult].self) { (source: AnyObject) -> [ResponseTimeFilterResult] in
                return Decoders.decode(clazz: [ResponseTimeFilterResult].self, source: source)
            }
            // Decoder for ResponseTimeFilterResult
            Decoders.addDecoder(clazz: ResponseTimeFilterResult.self) { (source: AnyObject) -> ResponseTimeFilterResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeFilterResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.locations = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["locations"])
                instance.unreachable = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["unreachable"])
                return instance
            }


            // Decoder for [ResponseTimeMap]
            Decoders.addDecoder(clazz: [ResponseTimeMap].self) { (source: AnyObject) -> [ResponseTimeMap] in
                return Decoders.decode(clazz: [ResponseTimeMap].self, source: source)
            }
            // Decoder for ResponseTimeMap
            Decoders.addDecoder(clazz: ResponseTimeMap.self) { (source: AnyObject) -> ResponseTimeMap in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMap()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeMapBoundingBoxes]
            Decoders.addDecoder(clazz: [ResponseTimeMapBoundingBoxes].self) { (source: AnyObject) -> [ResponseTimeMapBoundingBoxes] in
                return Decoders.decode(clazz: [ResponseTimeMapBoundingBoxes].self, source: source)
            }
            // Decoder for ResponseTimeMapBoundingBoxes
            Decoders.addDecoder(clazz: ResponseTimeMapBoundingBoxes.self) { (source: AnyObject) -> ResponseTimeMapBoundingBoxes in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMapBoundingBoxes()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeMapBoundingBoxesResult]
            Decoders.addDecoder(clazz: [ResponseTimeMapBoundingBoxesResult].self) { (source: AnyObject) -> [ResponseTimeMapBoundingBoxesResult] in
                return Decoders.decode(clazz: [ResponseTimeMapBoundingBoxesResult].self, source: source)
            }
            // Decoder for ResponseTimeMapBoundingBoxesResult
            Decoders.addDecoder(clazz: ResponseTimeMapBoundingBoxesResult.self) { (source: AnyObject) -> ResponseTimeMapBoundingBoxesResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMapBoundingBoxesResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.boundingBoxes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["bounding_boxes"])
                instance.properties = Decoders.decodeOptional(clazz: ResponseTimeMapProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTimeMapProperties]
            Decoders.addDecoder(clazz: [ResponseTimeMapProperties].self) { (source: AnyObject) -> [ResponseTimeMapProperties] in
                return Decoders.decode(clazz: [ResponseTimeMapProperties].self, source: source)
            }
            // Decoder for ResponseTimeMapProperties
            Decoders.addDecoder(clazz: ResponseTimeMapProperties.self) { (source: AnyObject) -> ResponseTimeMapProperties in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMapProperties()
                instance.isOnlyWalking = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["is_only_walking"])
                return instance
            }


            // Decoder for [ResponseTimeMapResult]
            Decoders.addDecoder(clazz: [ResponseTimeMapResult].self) { (source: AnyObject) -> [ResponseTimeMapResult] in
                return Decoders.decode(clazz: [ResponseTimeMapResult].self, source: source)
            }
            // Decoder for ResponseTimeMapResult
            Decoders.addDecoder(clazz: ResponseTimeMapResult.self) { (source: AnyObject) -> ResponseTimeMapResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMapResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.shapes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["shapes"])
                instance.properties = Decoders.decodeOptional(clazz: ResponseTimeMapProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTimeMapWkt]
            Decoders.addDecoder(clazz: [ResponseTimeMapWkt].self) { (source: AnyObject) -> [ResponseTimeMapWkt] in
                return Decoders.decode(clazz: [ResponseTimeMapWkt].self, source: source)
            }
            // Decoder for ResponseTimeMapWkt
            Decoders.addDecoder(clazz: ResponseTimeMapWkt.self) { (source: AnyObject) -> ResponseTimeMapWkt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMapWkt()
                instance.results = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["results"])
                return instance
            }


            // Decoder for [ResponseTimeMapWktResult]
            Decoders.addDecoder(clazz: [ResponseTimeMapWktResult].self) { (source: AnyObject) -> [ResponseTimeMapWktResult] in
                return Decoders.decode(clazz: [ResponseTimeMapWktResult].self, source: source)
            }
            // Decoder for ResponseTimeMapWktResult
            Decoders.addDecoder(clazz: ResponseTimeMapWktResult.self) { (source: AnyObject) -> ResponseTimeMapWktResult in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTimeMapWktResult()
                instance.searchId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["search_id"])
                instance.shape = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shape"])
                instance.properties = Decoders.decodeOptional(clazz: ResponseTimeMapProperties.self, source: sourceDictionary["properties"])
                return instance
            }


            // Decoder for [ResponseTransportationMode]
            Decoders.addDecoder(clazz: [ResponseTransportationMode].self) { (source: AnyObject) -> [ResponseTransportationMode] in
                return Decoders.decode(clazz: [ResponseTransportationMode].self, source: source)
            }
            // Decoder for ResponseTransportationMode
            Decoders.addDecoder(clazz: ResponseTransportationMode.self) { (source: AnyObject) -> ResponseTransportationMode in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTransportationMode()
                return instance
            }


            // Decoder for [ResponseTravelTimeStatistics]
            Decoders.addDecoder(clazz: [ResponseTravelTimeStatistics].self) { (source: AnyObject) -> [ResponseTravelTimeStatistics] in
                return Decoders.decode(clazz: [ResponseTravelTimeStatistics].self, source: source)
            }
            // Decoder for ResponseTravelTimeStatistics
            Decoders.addDecoder(clazz: ResponseTravelTimeStatistics.self) { (source: AnyObject) -> ResponseTravelTimeStatistics in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ResponseTravelTimeStatistics()
                instance.min = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["min"])
                instance.max = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["max"])
                instance.mean = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["mean"])
                instance.median = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["median"])
                return instance
            }
        }
    }
}
