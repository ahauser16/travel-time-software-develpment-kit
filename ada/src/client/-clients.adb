--  TravelTime Platform API
--  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
--
--  The version of the OpenAPI document: 1.0.0
--  Contact: support@igeolise.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 4.0.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

with Swagger.Streams;
package body .Clients is

   --  
   procedure Geocoding_Reverse_Search
      (Client : in out Client_Type;
       Focus_Periodlat : in double;
       Focus_Periodlng : in double;
       Within_Periodcountry : in Swagger.Nullable_UString;
       Result : out .Models.ResponseGeocodingType) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("focus.lat", Focus_Periodlat);
      URI.Add_Param ("focus.lng", Focus_Periodlng);
      URI.Add_Param ("within.country", Within_Periodcountry);
      URI.Set_Path ("/v4/geocoding/reverse");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Geocoding_Reverse_Search;

   --  
   procedure Geocoding_Search
      (Client : in out Client_Type;
       Query : in Swagger.UString;
       Within_Periodcountry : in Swagger.Nullable_UString;
       Focus_Periodlat : in double;
       Focus_Periodlng : in double;
       Result : out .Models.ResponseGeocodingType) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("query", Query);
      URI.Add_Param ("within.country", Within_Periodcountry);
      URI.Add_Param ("focus.lat", Focus_Periodlat);
      URI.Add_Param ("focus.lng", Focus_Periodlng);
      URI.Set_Path ("/v4/geocoding/search");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Geocoding_Search;

   --  
   procedure Map_Info
      (Client : in out Client_Type;
       Result : out .Models.ResponseMapInfoType) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/v4/map-info");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Map_Info;

   --  
   procedure Routes
      (Client : in out Client_Type;
       Request_Routes_Type : in .Models.RequestRoutesType;
       Result : out .Models.ResponseRoutesType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Routes_Type);

      URI.Set_Path ("/v4/routes");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Routes;

   --  
   procedure Supported_Locations
      (Client : in out Client_Type;
       Request_Supported_Locations_Type : in .Models.RequestSupportedLocationsType;
       Result : out .Models.ResponseSupportedLocationsType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Supported_Locations_Type);

      URI.Set_Path ("/v4/supported-locations");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Supported_Locations;

   --  
   procedure Time_Filter
      (Client : in out Client_Type;
       Request_Time_Filter_Type : in .Models.RequestTimeFilterType;
       Result : out .Models.ResponseTimeFilterType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Time_Filter_Type);

      URI.Set_Path ("/v4/time-filter");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Time_Filter;

   --  
   procedure Time_Filter_Fast
      (Client : in out Client_Type;
       Request_Time_Filter_Fast_Type : in .Models.RequestTimeFilterFastType;
       Result : out .Models.ResponseTimeFilterFastType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Time_Filter_Fast_Type);

      URI.Set_Path ("/v4/time-filter/fast");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Time_Filter_Fast;

   --  
   procedure Time_Filter_Postcode_Districts
      (Client : in out Client_Type;
       Request_Time_Filter_Postcode_Districts_Type : in .Models.RequestTimeFilterPostcodeDistrictsType;
       Result : out .Models.ResponseTimeFilterPostcodeDistrictsType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Time_Filter_Postcode_Districts_Type);

      URI.Set_Path ("/v4/time-filter/postcode-districts");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Time_Filter_Postcode_Districts;

   --  
   procedure Time_Filter_Postcode_Sectors
      (Client : in out Client_Type;
       Request_Time_Filter_Postcode_Sectors_Type : in .Models.RequestTimeFilterPostcodeSectorsType;
       Result : out .Models.ResponseTimeFilterPostcodeSectorsType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Time_Filter_Postcode_Sectors_Type);

      URI.Set_Path ("/v4/time-filter/postcode-sectors");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Time_Filter_Postcode_Sectors;

   --  
   procedure Time_Filter_Postcodes
      (Client : in out Client_Type;
       Request_Time_Filter_Postcodes_Type : in .Models.RequestTimeFilterPostcodesType;
       Result : out .Models.ResponseTimeFilterPostcodesType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Time_Filter_Postcodes_Type);

      URI.Set_Path ("/v4/time-filter/postcodes");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Time_Filter_Postcodes;

   --  
   procedure Time_Map
      (Client : in out Client_Type;
       Request_Time_Map_Type : in .Models.RequestTimeMapType;
       Result : out .Models.ResponseTimeMapType) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((Swagger.Clients.APPLICATION_JSON,
                          Swagger.Clients.APPLICATION_VND.WKT+JSON,
                          Swagger.Clients.APPLICATION_VND.WKT_NO_HOLES+JSON,
                          Swagger.Clients.APPLICATION_VND.BOUNDING_BOXES+JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Request_Time_Map_Type);

      URI.Set_Path ("/v4/time-map");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Time_Map;
end .Clients;
