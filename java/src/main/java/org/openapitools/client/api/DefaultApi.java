/*
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RequestRoutes;
import org.openapitools.client.model.RequestSupportedLocations;
import org.openapitools.client.model.RequestTimeFilter;
import org.openapitools.client.model.RequestTimeFilterFast;
import org.openapitools.client.model.RequestTimeFilterPostcodeDistricts;
import org.openapitools.client.model.RequestTimeFilterPostcodeSectors;
import org.openapitools.client.model.RequestTimeFilterPostcodes;
import org.openapitools.client.model.RequestTimeMap;
import org.openapitools.client.model.ResponseError;
import org.openapitools.client.model.ResponseGeocoding;
import org.openapitools.client.model.ResponseMapInfo;
import org.openapitools.client.model.ResponseRoutes;
import org.openapitools.client.model.ResponseSupportedLocations;
import org.openapitools.client.model.ResponseTimeFilter;
import org.openapitools.client.model.ResponseTimeFilterFast;
import org.openapitools.client.model.ResponseTimeFilterPostcodeDistricts;
import org.openapitools.client.model.ResponseTimeFilterPostcodeSectors;
import org.openapitools.client.model.ResponseTimeFilterPostcodes;
import org.openapitools.client.model.ResponseTimeMap;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for geocodingReverseSearch
     * @param focusLat  (required)
     * @param focusLng  (required)
     * @param withinCountry  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-reverse"> Documentation</a>
     */
    public com.squareup.okhttp.Call geocodingReverseSearchCall(Double focusLat, Double focusLng, String withinCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v4/geocoding/reverse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (focusLat != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("focus.lat", focusLat));
        }

        if (focusLng != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("focus.lng", focusLng));
        }

        if (withinCountry != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("within.country", withinCountry));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call geocodingReverseSearchValidateBeforeCall(Double focusLat, Double focusLng, String withinCountry, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'focusLat' is set
        if (focusLat == null) {
            throw new ApiException("Missing the required parameter 'focusLat' when calling geocodingReverseSearch(Async)");
        }
        
        // verify the required parameter 'focusLng' is set
        if (focusLng == null) {
            throw new ApiException("Missing the required parameter 'focusLng' when calling geocodingReverseSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = geocodingReverseSearchCall(focusLat, focusLng, withinCountry, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param focusLat  (required)
     * @param focusLng  (required)
     * @param withinCountry  (optional)
     * @return ResponseGeocoding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-reverse"> Documentation</a>
     */
    public ResponseGeocoding geocodingReverseSearch(Double focusLat, Double focusLng, String withinCountry) throws ApiException {
        ApiResponse<ResponseGeocoding> resp = geocodingReverseSearchWithHttpInfo(focusLat, focusLng, withinCountry);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param focusLat  (required)
     * @param focusLng  (required)
     * @param withinCountry  (optional)
     * @return ApiResponse&lt;ResponseGeocoding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-reverse"> Documentation</a>
     */
    public ApiResponse<ResponseGeocoding> geocodingReverseSearchWithHttpInfo(Double focusLat, Double focusLng, String withinCountry) throws ApiException {
        com.squareup.okhttp.Call call = geocodingReverseSearchValidateBeforeCall(focusLat, focusLng, withinCountry, null, null);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param focusLat  (required)
     * @param focusLng  (required)
     * @param withinCountry  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-reverse"> Documentation</a>
     */
    public com.squareup.okhttp.Call geocodingReverseSearchAsync(Double focusLat, Double focusLng, String withinCountry, final ApiCallback<ResponseGeocoding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = geocodingReverseSearchValidateBeforeCall(focusLat, focusLng, withinCountry, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for geocodingSearch
     * @param query  (required)
     * @param withinCountry  (optional)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-search"> Documentation</a>
     */
    public com.squareup.okhttp.Call geocodingSearchCall(String query, String withinCountry, Double focusLat, Double focusLng, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v4/geocoding/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("query", query));
        }

        if (withinCountry != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("within.country", withinCountry));
        }

        if (focusLat != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("focus.lat", focusLat));
        }

        if (focusLng != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("focus.lng", focusLng));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call geocodingSearchValidateBeforeCall(String query, String withinCountry, Double focusLat, Double focusLng, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling geocodingSearch(Async)");
        }
        

        com.squareup.okhttp.Call call = geocodingSearchCall(query, withinCountry, focusLat, focusLng, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param query  (required)
     * @param withinCountry  (optional)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @return ResponseGeocoding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-search"> Documentation</a>
     */
    public ResponseGeocoding geocodingSearch(String query, String withinCountry, Double focusLat, Double focusLng) throws ApiException {
        ApiResponse<ResponseGeocoding> resp = geocodingSearchWithHttpInfo(query, withinCountry, focusLat, focusLng);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param query  (required)
     * @param withinCountry  (optional)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @return ApiResponse&lt;ResponseGeocoding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-search"> Documentation</a>
     */
    public ApiResponse<ResponseGeocoding> geocodingSearchWithHttpInfo(String query, String withinCountry, Double focusLat, Double focusLng) throws ApiException {
        com.squareup.okhttp.Call call = geocodingSearchValidateBeforeCall(query, withinCountry, focusLat, focusLng, null, null);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (required)
     * @param withinCountry  (optional)
     * @param focusLat  (optional)
     * @param focusLng  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/geocoding-search"> Documentation</a>
     */
    public com.squareup.okhttp.Call geocodingSearchAsync(String query, String withinCountry, Double focusLat, Double focusLng, final ApiCallback<ResponseGeocoding> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = geocodingSearchValidateBeforeCall(query, withinCountry, focusLat, focusLng, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseGeocoding>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for mapInfo
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/map-info"> Documentation</a>
     */
    public com.squareup.okhttp.Call mapInfoCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v4/map-info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call mapInfoValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = mapInfoCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return ResponseMapInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/map-info"> Documentation</a>
     */
    public ResponseMapInfo mapInfo() throws ApiException {
        ApiResponse<ResponseMapInfo> resp = mapInfoWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ResponseMapInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/map-info"> Documentation</a>
     */
    public ApiResponse<ResponseMapInfo> mapInfoWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = mapInfoValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ResponseMapInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/map-info"> Documentation</a>
     */
    public com.squareup.okhttp.Call mapInfoAsync(final ApiCallback<ResponseMapInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = mapInfoValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseMapInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for routes
     * @param requestRoutes  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/routes"> Documentation</a>
     */
    public com.squareup.okhttp.Call routesCall(RequestRoutes requestRoutes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestRoutes;

        // create path and map variables
        String localVarPath = "/v4/routes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call routesValidateBeforeCall(RequestRoutes requestRoutes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestRoutes' is set
        if (requestRoutes == null) {
            throw new ApiException("Missing the required parameter 'requestRoutes' when calling routes(Async)");
        }
        

        com.squareup.okhttp.Call call = routesCall(requestRoutes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestRoutes  (required)
     * @return ResponseRoutes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/routes"> Documentation</a>
     */
    public ResponseRoutes routes(RequestRoutes requestRoutes) throws ApiException {
        ApiResponse<ResponseRoutes> resp = routesWithHttpInfo(requestRoutes);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestRoutes  (required)
     * @return ApiResponse&lt;ResponseRoutes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/routes"> Documentation</a>
     */
    public ApiResponse<ResponseRoutes> routesWithHttpInfo(RequestRoutes requestRoutes) throws ApiException {
        com.squareup.okhttp.Call call = routesValidateBeforeCall(requestRoutes, null, null);
        Type localVarReturnType = new TypeToken<ResponseRoutes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestRoutes  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/routes"> Documentation</a>
     */
    public com.squareup.okhttp.Call routesAsync(RequestRoutes requestRoutes, final ApiCallback<ResponseRoutes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = routesValidateBeforeCall(requestRoutes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseRoutes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for supportedLocations
     * @param requestSupportedLocations  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/supported-locations"> Documentation</a>
     */
    public com.squareup.okhttp.Call supportedLocationsCall(RequestSupportedLocations requestSupportedLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestSupportedLocations;

        // create path and map variables
        String localVarPath = "/v4/supported-locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call supportedLocationsValidateBeforeCall(RequestSupportedLocations requestSupportedLocations, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestSupportedLocations' is set
        if (requestSupportedLocations == null) {
            throw new ApiException("Missing the required parameter 'requestSupportedLocations' when calling supportedLocations(Async)");
        }
        

        com.squareup.okhttp.Call call = supportedLocationsCall(requestSupportedLocations, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestSupportedLocations  (required)
     * @return ResponseSupportedLocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/supported-locations"> Documentation</a>
     */
    public ResponseSupportedLocations supportedLocations(RequestSupportedLocations requestSupportedLocations) throws ApiException {
        ApiResponse<ResponseSupportedLocations> resp = supportedLocationsWithHttpInfo(requestSupportedLocations);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestSupportedLocations  (required)
     * @return ApiResponse&lt;ResponseSupportedLocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/supported-locations"> Documentation</a>
     */
    public ApiResponse<ResponseSupportedLocations> supportedLocationsWithHttpInfo(RequestSupportedLocations requestSupportedLocations) throws ApiException {
        com.squareup.okhttp.Call call = supportedLocationsValidateBeforeCall(requestSupportedLocations, null, null);
        Type localVarReturnType = new TypeToken<ResponseSupportedLocations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestSupportedLocations  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/supported-locations"> Documentation</a>
     */
    public com.squareup.okhttp.Call supportedLocationsAsync(RequestSupportedLocations requestSupportedLocations, final ApiCallback<ResponseSupportedLocations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = supportedLocationsValidateBeforeCall(requestSupportedLocations, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseSupportedLocations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeFilter
     * @param requestTimeFilter  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterCall(RequestTimeFilter requestTimeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestTimeFilter;

        // create path and map variables
        String localVarPath = "/v4/time-filter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeFilterValidateBeforeCall(RequestTimeFilter requestTimeFilter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestTimeFilter' is set
        if (requestTimeFilter == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilter' when calling timeFilter(Async)");
        }
        

        com.squareup.okhttp.Call call = timeFilterCall(requestTimeFilter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestTimeFilter  (required)
     * @return ResponseTimeFilter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter"> Documentation</a>
     */
    public ResponseTimeFilter timeFilter(RequestTimeFilter requestTimeFilter) throws ApiException {
        ApiResponse<ResponseTimeFilter> resp = timeFilterWithHttpInfo(requestTimeFilter);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilter  (required)
     * @return ApiResponse&lt;ResponseTimeFilter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilter> timeFilterWithHttpInfo(RequestTimeFilter requestTimeFilter) throws ApiException {
        com.squareup.okhttp.Call call = timeFilterValidateBeforeCall(requestTimeFilter, null, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilter  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterAsync(RequestTimeFilter requestTimeFilter, final ApiCallback<ResponseTimeFilter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeFilterValidateBeforeCall(requestTimeFilter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseTimeFilter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeFilterFast
     * @param requestTimeFilterFast  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter-fast"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterFastCall(RequestTimeFilterFast requestTimeFilterFast, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestTimeFilterFast;

        // create path and map variables
        String localVarPath = "/v4/time-filter/fast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeFilterFastValidateBeforeCall(RequestTimeFilterFast requestTimeFilterFast, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterFast' is set
        if (requestTimeFilterFast == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast(Async)");
        }
        

        com.squareup.okhttp.Call call = timeFilterFastCall(requestTimeFilterFast, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestTimeFilterFast  (required)
     * @return ResponseTimeFilterFast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter-fast"> Documentation</a>
     */
    public ResponseTimeFilterFast timeFilterFast(RequestTimeFilterFast requestTimeFilterFast) throws ApiException {
        ApiResponse<ResponseTimeFilterFast> resp = timeFilterFastWithHttpInfo(requestTimeFilterFast);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterFast  (required)
     * @return ApiResponse&lt;ResponseTimeFilterFast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter-fast"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterFast> timeFilterFastWithHttpInfo(RequestTimeFilterFast requestTimeFilterFast) throws ApiException {
        com.squareup.okhttp.Call call = timeFilterFastValidateBeforeCall(requestTimeFilterFast, null, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterFast>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterFast  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-filter-fast"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterFastAsync(RequestTimeFilterFast requestTimeFilterFast, final ApiCallback<ResponseTimeFilterFast> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeFilterFastValidateBeforeCall(requestTimeFilterFast, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterFast>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeFilterPostcodeDistricts
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterPostcodeDistrictsCall(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestTimeFilterPostcodeDistricts;

        // create path and map variables
        String localVarPath = "/v4/time-filter/postcode-districts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeFilterPostcodeDistrictsValidateBeforeCall(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
        if (requestTimeFilterPostcodeDistricts == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts(Async)");
        }
        

        com.squareup.okhttp.Call call = timeFilterPostcodeDistrictsCall(requestTimeFilterPostcodeDistricts, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @return ResponseTimeFilterPostcodeDistricts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public ResponseTimeFilterPostcodeDistricts timeFilterPostcodeDistricts(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts) throws ApiException {
        ApiResponse<ResponseTimeFilterPostcodeDistricts> resp = timeFilterPostcodeDistrictsWithHttpInfo(requestTimeFilterPostcodeDistricts);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @return ApiResponse&lt;ResponseTimeFilterPostcodeDistricts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterPostcodeDistricts> timeFilterPostcodeDistrictsWithHttpInfo(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts) throws ApiException {
        com.squareup.okhttp.Call call = timeFilterPostcodeDistrictsValidateBeforeCall(requestTimeFilterPostcodeDistricts, null, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeDistricts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterPostcodeDistricts  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterPostcodeDistrictsAsync(RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts, final ApiCallback<ResponseTimeFilterPostcodeDistricts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeFilterPostcodeDistrictsValidateBeforeCall(requestTimeFilterPostcodeDistricts, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeDistricts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeFilterPostcodeSectors
     * @param requestTimeFilterPostcodeSectors  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterPostcodeSectorsCall(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestTimeFilterPostcodeSectors;

        // create path and map variables
        String localVarPath = "/v4/time-filter/postcode-sectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeFilterPostcodeSectorsValidateBeforeCall(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
        if (requestTimeFilterPostcodeSectors == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors(Async)");
        }
        

        com.squareup.okhttp.Call call = timeFilterPostcodeSectorsCall(requestTimeFilterPostcodeSectors, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeSectors  (required)
     * @return ResponseTimeFilterPostcodeSectors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public ResponseTimeFilterPostcodeSectors timeFilterPostcodeSectors(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors) throws ApiException {
        ApiResponse<ResponseTimeFilterPostcodeSectors> resp = timeFilterPostcodeSectorsWithHttpInfo(requestTimeFilterPostcodeSectors);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodeSectors  (required)
     * @return ApiResponse&lt;ResponseTimeFilterPostcodeSectors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterPostcodeSectors> timeFilterPostcodeSectorsWithHttpInfo(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors) throws ApiException {
        com.squareup.okhttp.Call call = timeFilterPostcodeSectorsValidateBeforeCall(requestTimeFilterPostcodeSectors, null, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeSectors>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterPostcodeSectors  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-sector-filter"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterPostcodeSectorsAsync(RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors, final ApiCallback<ResponseTimeFilterPostcodeSectors> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeFilterPostcodeSectorsValidateBeforeCall(requestTimeFilterPostcodeSectors, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodeSectors>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeFilterPostcodes
     * @param requestTimeFilterPostcodes  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterPostcodesCall(RequestTimeFilterPostcodes requestTimeFilterPostcodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestTimeFilterPostcodes;

        // create path and map variables
        String localVarPath = "/v4/time-filter/postcodes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeFilterPostcodesValidateBeforeCall(RequestTimeFilterPostcodes requestTimeFilterPostcodes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestTimeFilterPostcodes' is set
        if (requestTimeFilterPostcodes == null) {
            throw new ApiException("Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes(Async)");
        }
        

        com.squareup.okhttp.Call call = timeFilterPostcodesCall(requestTimeFilterPostcodes, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodes  (required)
     * @return ResponseTimeFilterPostcodes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public ResponseTimeFilterPostcodes timeFilterPostcodes(RequestTimeFilterPostcodes requestTimeFilterPostcodes) throws ApiException {
        ApiResponse<ResponseTimeFilterPostcodes> resp = timeFilterPostcodesWithHttpInfo(requestTimeFilterPostcodes);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeFilterPostcodes  (required)
     * @return ApiResponse&lt;ResponseTimeFilterPostcodes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public ApiResponse<ResponseTimeFilterPostcodes> timeFilterPostcodesWithHttpInfo(RequestTimeFilterPostcodes requestTimeFilterPostcodes) throws ApiException {
        com.squareup.okhttp.Call call = timeFilterPostcodesValidateBeforeCall(requestTimeFilterPostcodes, null, null);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeFilterPostcodes  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/postcode-search"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeFilterPostcodesAsync(RequestTimeFilterPostcodes requestTimeFilterPostcodes, final ApiCallback<ResponseTimeFilterPostcodes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeFilterPostcodesValidateBeforeCall(requestTimeFilterPostcodes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseTimeFilterPostcodes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for timeMap
     * @param requestTimeMap  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-map"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeMapCall(RequestTimeMap requestTimeMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = requestTimeMap;

        // create path and map variables
        String localVarPath = "/v4/time-map";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "application/vnd.wkt+json", "application/vnd.wkt-no-holes+json", "application/vnd.bounding-boxes+json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "ApplicationId" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call timeMapValidateBeforeCall(RequestTimeMap requestTimeMap, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'requestTimeMap' is set
        if (requestTimeMap == null) {
            throw new ApiException("Missing the required parameter 'requestTimeMap' when calling timeMap(Async)");
        }
        

        com.squareup.okhttp.Call call = timeMapCall(requestTimeMap, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param requestTimeMap  (required)
     * @return ResponseTimeMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-map"> Documentation</a>
     */
    public ResponseTimeMap timeMap(RequestTimeMap requestTimeMap) throws ApiException {
        ApiResponse<ResponseTimeMap> resp = timeMapWithHttpInfo(requestTimeMap);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param requestTimeMap  (required)
     * @return ApiResponse&lt;ResponseTimeMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-map"> Documentation</a>
     */
    public ApiResponse<ResponseTimeMap> timeMapWithHttpInfo(RequestTimeMap requestTimeMap) throws ApiException {
        com.squareup.okhttp.Call call = timeMapValidateBeforeCall(requestTimeMap, null, null);
        Type localVarReturnType = new TypeToken<ResponseTimeMap>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestTimeMap  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * 
     * @see <a href="http://docs.traveltimeplatform.com/reference/time-map"> Documentation</a>
     */
    public com.squareup.okhttp.Call timeMapAsync(RequestTimeMap requestTimeMap, final ApiCallback<ResponseTimeMap> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = timeMapValidateBeforeCall(requestTimeMap, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseTimeMap>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
