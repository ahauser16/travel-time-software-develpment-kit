/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "DefaultApi.h"
#include "Helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

DefaultApi::DefaultApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void DefaultApi::init() {
    setupRoutes();
}

void DefaultApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/v4/geocoding/reverse", Routes::bind(&DefaultApi::geocoding_reverse_search_handler, this));
    Routes::Get(*router, base + "/v4/geocoding/search", Routes::bind(&DefaultApi::geocoding_search_handler, this));
    Routes::Get(*router, base + "/v4/map-info", Routes::bind(&DefaultApi::map_info_handler, this));
    Routes::Post(*router, base + "/v4/routes", Routes::bind(&DefaultApi::routes_handler, this));
    Routes::Post(*router, base + "/v4/supported-locations", Routes::bind(&DefaultApi::supported_locations_handler, this));
    Routes::Post(*router, base + "/v4/time-filter", Routes::bind(&DefaultApi::time_filter_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/fast", Routes::bind(&DefaultApi::time_filter_fast_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/postcode-districts", Routes::bind(&DefaultApi::time_filter_postcode_districts_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/postcode-sectors", Routes::bind(&DefaultApi::time_filter_postcode_sectors_handler, this));
    Routes::Post(*router, base + "/v4/time-filter/postcodes", Routes::bind(&DefaultApi::time_filter_postcodes_handler, this));
    Routes::Post(*router, base + "/v4/time-map", Routes::bind(&DefaultApi::time_map_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&DefaultApi::default_api_default_handler, this));
}

void DefaultApi::geocoding_reverse_search_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto focusPeriodlatQuery = request.query().get("focus.lat");
    Pistache::Optional<double> focusPeriodlat;
    if(!focusPeriodlatQuery.isEmpty()){
        double value;
        if(fromStringValue(focusPeriodlatQuery.get(), value)){
            focusPeriodlat = Pistache::Some(value);
        }
    }
    auto focusPeriodlngQuery = request.query().get("focus.lng");
    Pistache::Optional<double> focusPeriodlng;
    if(!focusPeriodlngQuery.isEmpty()){
        double value;
        if(fromStringValue(focusPeriodlngQuery.get(), value)){
            focusPeriodlng = Pistache::Some(value);
        }
    }
    auto withinPeriodcountryQuery = request.query().get("within.country");
    Pistache::Optional<std::string> withinPeriodcountry;
    if(!withinPeriodcountryQuery.isEmpty()){
        std::string value;
        if(fromStringValue(withinPeriodcountryQuery.get(), value)){
            withinPeriodcountry = Pistache::Some(value);
        }
    }
    
    try {
      this->geocoding_reverse_search(focusPeriodlat, focusPeriodlng, withinPeriodcountry, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::geocoding_search_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the query params
    auto queryQuery = request.query().get("query");
    Pistache::Optional<std::string> query;
    if(!queryQuery.isEmpty()){
        std::string value;
        if(fromStringValue(queryQuery.get(), value)){
            query = Pistache::Some(value);
        }
    }
    auto withinPeriodcountryQuery = request.query().get("within.country");
    Pistache::Optional<std::string> withinPeriodcountry;
    if(!withinPeriodcountryQuery.isEmpty()){
        std::string value;
        if(fromStringValue(withinPeriodcountryQuery.get(), value)){
            withinPeriodcountry = Pistache::Some(value);
        }
    }
    auto focusPeriodlatQuery = request.query().get("focus.lat");
    Pistache::Optional<double> focusPeriodlat;
    if(!focusPeriodlatQuery.isEmpty()){
        double value;
        if(fromStringValue(focusPeriodlatQuery.get(), value)){
            focusPeriodlat = Pistache::Some(value);
        }
    }
    auto focusPeriodlngQuery = request.query().get("focus.lng");
    Pistache::Optional<double> focusPeriodlng;
    if(!focusPeriodlngQuery.isEmpty()){
        double value;
        if(fromStringValue(focusPeriodlngQuery.get(), value)){
            focusPeriodlng = Pistache::Some(value);
        }
    }
    
    try {
      this->geocoding_search(query, withinPeriodcountry, focusPeriodlat, focusPeriodlng, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::map_info_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->map_info(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::routes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestRoutes requestRoutes;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestRoutes.fromJson(request_body);
    
      this->routes(requestRoutes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::supported_locations_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestSupportedLocations requestSupportedLocations;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestSupportedLocations.fromJson(request_body);
    
      this->supported_locations(requestSupportedLocations, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::time_filter_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestTimeFilter requestTimeFilter;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestTimeFilter.fromJson(request_body);
    
      this->time_filter(requestTimeFilter, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::time_filter_fast_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestTimeFilterFast requestTimeFilterFast;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestTimeFilterFast.fromJson(request_body);
    
      this->time_filter_fast(requestTimeFilterFast, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::time_filter_postcode_districts_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestTimeFilterPostcodeDistricts.fromJson(request_body);
    
      this->time_filter_postcode_districts(requestTimeFilterPostcodeDistricts, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::time_filter_postcode_sectors_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestTimeFilterPostcodeSectors.fromJson(request_body);
    
      this->time_filter_postcode_sectors(requestTimeFilterPostcodeSectors, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::time_filter_postcodes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestTimeFilterPostcodes requestTimeFilterPostcodes;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestTimeFilterPostcodes.fromJson(request_body);
    
      this->time_filter_postcodes(requestTimeFilterPostcodes, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void DefaultApi::time_map_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    RequestTimeMap requestTimeMap;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      requestTimeMap.fromJson(request_body);
    
      this->time_map(requestTimeMap, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void DefaultApi::default_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

