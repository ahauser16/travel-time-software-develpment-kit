/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseRoutePart.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseRoutePart::ResponseRoutePart()
{
    m_Id = "";
    m_Type = "";
    m_Directions = "";
    m_Distance = 0;
    m_Travel_time = 0;
    m_Direction = "";
    m_DirectionIsSet = false;
    m_Road = "";
    m_RoadIsSet = false;
    m_Turn = "";
    m_TurnIsSet = false;
    m_Line = "";
    m_LineIsSet = false;
    m_Departure_station = "";
    m_Departure_stationIsSet = false;
    m_Arrival_station = "";
    m_Arrival_stationIsSet = false;
    m_Departs_at = "";
    m_Departs_atIsSet = false;
    m_Arrives_at = "";
    m_Arrives_atIsSet = false;
    m_Num_stops = 0;
    m_Num_stopsIsSet = false;
    
}

ResponseRoutePart::~ResponseRoutePart()
{
}

void ResponseRoutePart::validate()
{
    // TODO: implement validation
}

nlohmann::json ResponseRoutePart::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["type"] = ModelBase::toJson(m_Type);
    val["mode"] = ModelBase::toJson(m_Mode);
    val["directions"] = ModelBase::toJson(m_Directions);
    val["distance"] = m_Distance;
    val["travel_time"] = m_Travel_time;
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Coords )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["coords"] = jsonArray;
        
    }
    if(m_DirectionIsSet)
    {
        val["direction"] = ModelBase::toJson(m_Direction);
    }
    if(m_RoadIsSet)
    {
        val["road"] = ModelBase::toJson(m_Road);
    }
    if(m_TurnIsSet)
    {
        val["turn"] = ModelBase::toJson(m_Turn);
    }
    if(m_LineIsSet)
    {
        val["line"] = ModelBase::toJson(m_Line);
    }
    if(m_Departure_stationIsSet)
    {
        val["departure_station"] = ModelBase::toJson(m_Departure_station);
    }
    if(m_Arrival_stationIsSet)
    {
        val["arrival_station"] = ModelBase::toJson(m_Arrival_station);
    }
    if(m_Departs_atIsSet)
    {
        val["departs_at"] = ModelBase::toJson(m_Departs_at);
    }
    if(m_Arrives_atIsSet)
    {
        val["arrives_at"] = ModelBase::toJson(m_Arrives_at);
    }
    if(m_Num_stopsIsSet)
    {
        val["num_stops"] = m_Num_stops;
    }
    

    return val;
}

void ResponseRoutePart::fromJson(const nlohmann::json& val)
{
    setId(val.at("id"));
    setType(val.at("type"));
    setDirections(val.at("directions"));
    setDistance(val.at("distance"));
    setTravelTime(val.at("travel_time"));
    {
        m_Coords.clear();
                    for( auto& item : val["coords"] )
            {
                
                if(item.is_null())
                {
                    m_Coords.push_back( Coords() );
                }
                else
                {
                    Coords newItem;
                    newItem.fromJson(item);
                    m_Coords.push_back( newItem );
                }
                
            }
    }
    if(val.find("direction") != val.end())
    {
        setDirection(val.at("direction"));
    }
    if(val.find("road") != val.end())
    {
        setRoad(val.at("road"));
    }
    if(val.find("turn") != val.end())
    {
        setTurn(val.at("turn"));
    }
    if(val.find("line") != val.end())
    {
        setLine(val.at("line"));
    }
    if(val.find("departure_station") != val.end())
    {
        setDepartureStation(val.at("departure_station"));
    }
    if(val.find("arrival_station") != val.end())
    {
        setArrivalStation(val.at("arrival_station"));
    }
    if(val.find("departs_at") != val.end())
    {
        setDepartsAt(val.at("departs_at"));
    }
    if(val.find("arrives_at") != val.end())
    {
        setArrivesAt(val.at("arrives_at"));
    }
    if(val.find("num_stops") != val.end())
    {
        setNumStops(val.at("num_stops"));
    }
    
}


std::string ResponseRoutePart::getId() const
{
    return m_Id;
}
void ResponseRoutePart::setId(std::string const& value)
{
    m_Id = value;
    
}
std::string ResponseRoutePart::getType() const
{
    return m_Type;
}
void ResponseRoutePart::setType(std::string const& value)
{
    m_Type = value;
    
}
ResponseTransportationMode ResponseRoutePart::getMode() const
{
    return m_Mode;
}
void ResponseRoutePart::setMode(ResponseTransportationMode const& value)
{
    m_Mode = value;
    
}
std::string ResponseRoutePart::getDirections() const
{
    return m_Directions;
}
void ResponseRoutePart::setDirections(std::string const& value)
{
    m_Directions = value;
    
}
int32_t ResponseRoutePart::getDistance() const
{
    return m_Distance;
}
void ResponseRoutePart::setDistance(int32_t const value)
{
    m_Distance = value;
    
}
int32_t ResponseRoutePart::getTravelTime() const
{
    return m_Travel_time;
}
void ResponseRoutePart::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
    
}
std::vector<Coords>& ResponseRoutePart::getCoords()
{
    return m_Coords;
}
std::string ResponseRoutePart::getDirection() const
{
    return m_Direction;
}
void ResponseRoutePart::setDirection(std::string const& value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}
bool ResponseRoutePart::directionIsSet() const
{
    return m_DirectionIsSet;
}
void ResponseRoutePart::unsetDirection()
{
    m_DirectionIsSet = false;
}
std::string ResponseRoutePart::getRoad() const
{
    return m_Road;
}
void ResponseRoutePart::setRoad(std::string const& value)
{
    m_Road = value;
    m_RoadIsSet = true;
}
bool ResponseRoutePart::roadIsSet() const
{
    return m_RoadIsSet;
}
void ResponseRoutePart::unsetRoad()
{
    m_RoadIsSet = false;
}
std::string ResponseRoutePart::getTurn() const
{
    return m_Turn;
}
void ResponseRoutePart::setTurn(std::string const& value)
{
    m_Turn = value;
    m_TurnIsSet = true;
}
bool ResponseRoutePart::turnIsSet() const
{
    return m_TurnIsSet;
}
void ResponseRoutePart::unsetTurn()
{
    m_TurnIsSet = false;
}
std::string ResponseRoutePart::getLine() const
{
    return m_Line;
}
void ResponseRoutePart::setLine(std::string const& value)
{
    m_Line = value;
    m_LineIsSet = true;
}
bool ResponseRoutePart::lineIsSet() const
{
    return m_LineIsSet;
}
void ResponseRoutePart::unsetLine()
{
    m_LineIsSet = false;
}
std::string ResponseRoutePart::getDepartureStation() const
{
    return m_Departure_station;
}
void ResponseRoutePart::setDepartureStation(std::string const& value)
{
    m_Departure_station = value;
    m_Departure_stationIsSet = true;
}
bool ResponseRoutePart::departureStationIsSet() const
{
    return m_Departure_stationIsSet;
}
void ResponseRoutePart::unsetDeparture_station()
{
    m_Departure_stationIsSet = false;
}
std::string ResponseRoutePart::getArrivalStation() const
{
    return m_Arrival_station;
}
void ResponseRoutePart::setArrivalStation(std::string const& value)
{
    m_Arrival_station = value;
    m_Arrival_stationIsSet = true;
}
bool ResponseRoutePart::arrivalStationIsSet() const
{
    return m_Arrival_stationIsSet;
}
void ResponseRoutePart::unsetArrival_station()
{
    m_Arrival_stationIsSet = false;
}
std::string ResponseRoutePart::getDepartsAt() const
{
    return m_Departs_at;
}
void ResponseRoutePart::setDepartsAt(std::string const& value)
{
    m_Departs_at = value;
    m_Departs_atIsSet = true;
}
bool ResponseRoutePart::departsAtIsSet() const
{
    return m_Departs_atIsSet;
}
void ResponseRoutePart::unsetDeparts_at()
{
    m_Departs_atIsSet = false;
}
std::string ResponseRoutePart::getArrivesAt() const
{
    return m_Arrives_at;
}
void ResponseRoutePart::setArrivesAt(std::string const& value)
{
    m_Arrives_at = value;
    m_Arrives_atIsSet = true;
}
bool ResponseRoutePart::arrivesAtIsSet() const
{
    return m_Arrives_atIsSet;
}
void ResponseRoutePart::unsetArrives_at()
{
    m_Arrives_atIsSet = false;
}
int32_t ResponseRoutePart::getNumStops() const
{
    return m_Num_stops;
}
void ResponseRoutePart::setNumStops(int32_t const value)
{
    m_Num_stops = value;
    m_Num_stopsIsSet = true;
}
bool ResponseRoutePart::numStopsIsSet() const
{
    return m_Num_stopsIsSet;
}
void ResponseRoutePart::unsetNum_stops()
{
    m_Num_stopsIsSet = false;
}

}
}
}
}

