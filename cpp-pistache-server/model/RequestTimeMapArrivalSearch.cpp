/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeMapArrivalSearch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTimeMapArrivalSearch::RequestTimeMapArrivalSearch()
{
    m_Id = "";
    m_Travel_time = 0;
    m_Arrival_time = "";
    m_PropertiesIsSet = false;
    m_RangeIsSet = false;
    
}

RequestTimeMapArrivalSearch::~RequestTimeMapArrivalSearch()
{
}

void RequestTimeMapArrivalSearch::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestTimeMapArrivalSearch::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["coords"] = ModelBase::toJson(m_Coords);
    val["transportation"] = ModelBase::toJson(m_Transportation);
    val["travel_time"] = m_Travel_time;
    val["arrival_time"] = ModelBase::toJson(m_Arrival_time);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["properties"] = jsonArray;
        } 
    }
    if(m_RangeIsSet)
    {
        val["range"] = ModelBase::toJson(m_Range);
    }
    

    return val;
}

void RequestTimeMapArrivalSearch::fromJson(const nlohmann::json& val)
{
    setId(val.at("id"));
    setTravelTime(val.at("travel_time"));
    setArrivalTime(val.at("arrival_time"));
    {
        m_Properties.clear();
        if(val.find("properties") != val.end())
        {
            for( auto& item : val["properties"] )
            {
                
                if(item.is_null())
                {
                    m_Properties.push_back( RequestTimeMapProperty() );
                }
                else
                {
                    RequestTimeMapProperty newItem;
                    newItem.fromJson(item);
                    m_Properties.push_back( newItem );
                }
                
            }
        }
    }
    if(val.find("range") != val.end())
    {
        if(!val["range"].is_null())
        {
            RequestRangeNoMaxResults newItem;
            newItem.fromJson(val["range"]);
            setRange( newItem );
        }
        
    }
    
}


std::string RequestTimeMapArrivalSearch::getId() const
{
    return m_Id;
}
void RequestTimeMapArrivalSearch::setId(std::string const& value)
{
    m_Id = value;
    
}
Coords RequestTimeMapArrivalSearch::getCoords() const
{
    return m_Coords;
}
void RequestTimeMapArrivalSearch::setCoords(Coords const& value)
{
    m_Coords = value;
    
}
RequestTransportation RequestTimeMapArrivalSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestTimeMapArrivalSearch::setTransportation(RequestTransportation const& value)
{
    m_Transportation = value;
    
}
int32_t RequestTimeMapArrivalSearch::getTravelTime() const
{
    return m_Travel_time;
}
void RequestTimeMapArrivalSearch::setTravelTime(int32_t const value)
{
    m_Travel_time = value;
    
}
std::string RequestTimeMapArrivalSearch::getArrivalTime() const
{
    return m_Arrival_time;
}
void RequestTimeMapArrivalSearch::setArrivalTime(std::string const& value)
{
    m_Arrival_time = value;
    
}
std::vector<RequestTimeMapProperty>& RequestTimeMapArrivalSearch::getProperties()
{
    return m_Properties;
}
bool RequestTimeMapArrivalSearch::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}
void RequestTimeMapArrivalSearch::unsetProperties()
{
    m_PropertiesIsSet = false;
}
RequestRangeNoMaxResults RequestTimeMapArrivalSearch::getRange() const
{
    return m_Range;
}
void RequestTimeMapArrivalSearch::setRange(RequestRangeNoMaxResults const& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}
bool RequestTimeMapArrivalSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}
void RequestTimeMapArrivalSearch::unsetRange()
{
    m_RangeIsSet = false;
}

}
}
}
}

