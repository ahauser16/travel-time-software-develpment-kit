/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseFaresBreakdownItem.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseFaresBreakdownItem::ResponseFaresBreakdownItem()
{
    
}

ResponseFaresBreakdownItem::~ResponseFaresBreakdownItem()
{
}

void ResponseFaresBreakdownItem::validate()
{
    // TODO: implement validation
}

nlohmann::json ResponseFaresBreakdownItem::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Modes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["modes"] = jsonArray;
        
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Route_part_ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["route_part_ids"] = jsonArray;
        
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Tickets )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["tickets"] = jsonArray;
        
    }
    

    return val;
}

void ResponseFaresBreakdownItem::fromJson(const nlohmann::json& val)
{
    {
        m_Modes.clear();
                    for( auto& item : val["modes"] )
            {
                
                if(item.is_null())
                {
                    m_Modes.push_back( ResponseTransportationMode() );
                }
                else
                {
                    ResponseTransportationMode newItem;
                    newItem.fromJson(item);
                    m_Modes.push_back( newItem );
                }
                
            }
    }
    {
        m_Route_part_ids.clear();
                    for( auto& item : val["route_part_ids"] )
            {
                m_Route_part_ids.push_back(item);
                
            }
    }
    {
        m_Tickets.clear();
                    for( auto& item : val["tickets"] )
            {
                
                if(item.is_null())
                {
                    m_Tickets.push_back( ResponseFareTicket() );
                }
                else
                {
                    ResponseFareTicket newItem;
                    newItem.fromJson(item);
                    m_Tickets.push_back( newItem );
                }
                
            }
    }
    
}


std::vector<ResponseTransportationMode>& ResponseFaresBreakdownItem::getModes()
{
    return m_Modes;
}
std::vector<int32_t>& ResponseFaresBreakdownItem::getRoutePartIds()
{
    return m_Route_part_ids;
}
std::vector<ResponseFareTicket>& ResponseFaresBreakdownItem::getTickets()
{
    return m_Tickets;
}

}
}
}
}

