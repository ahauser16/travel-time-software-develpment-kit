/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseGeocodingProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseGeocodingProperties::ResponseGeocodingProperties()
{
    m_Name = "";
    m_Label = "";
    m_Score = 0.0;
    m_ScoreIsSet = false;
    m_House_number = "";
    m_House_numberIsSet = false;
    m_Street = "";
    m_StreetIsSet = false;
    m_Region = "";
    m_RegionIsSet = false;
    m_Region_code = "";
    m_Region_codeIsSet = false;
    m_Neighbourhood = "";
    m_NeighbourhoodIsSet = false;
    m_County = "";
    m_CountyIsSet = false;
    m_Macroregion = "";
    m_MacroregionIsSet = false;
    m_City = "";
    m_CityIsSet = false;
    m_Country = "";
    m_CountryIsSet = false;
    m_Country_code = "";
    m_Country_codeIsSet = false;
    m_Continent = "";
    m_ContinentIsSet = false;
    m_Postcode = "";
    m_PostcodeIsSet = false;
    m_FeaturesIsSet = false;
    
}

ResponseGeocodingProperties::~ResponseGeocodingProperties()
{
}

void ResponseGeocodingProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ResponseGeocodingProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["name"] = ModelBase::toJson(m_Name);
    val["label"] = ModelBase::toJson(m_Label);
    if(m_ScoreIsSet)
    {
        val["score"] = m_Score;
    }
    if(m_House_numberIsSet)
    {
        val["house_number"] = ModelBase::toJson(m_House_number);
    }
    if(m_StreetIsSet)
    {
        val["street"] = ModelBase::toJson(m_Street);
    }
    if(m_RegionIsSet)
    {
        val["region"] = ModelBase::toJson(m_Region);
    }
    if(m_Region_codeIsSet)
    {
        val["region_code"] = ModelBase::toJson(m_Region_code);
    }
    if(m_NeighbourhoodIsSet)
    {
        val["neighbourhood"] = ModelBase::toJson(m_Neighbourhood);
    }
    if(m_CountyIsSet)
    {
        val["county"] = ModelBase::toJson(m_County);
    }
    if(m_MacroregionIsSet)
    {
        val["macroregion"] = ModelBase::toJson(m_Macroregion);
    }
    if(m_CityIsSet)
    {
        val["city"] = ModelBase::toJson(m_City);
    }
    if(m_CountryIsSet)
    {
        val["country"] = ModelBase::toJson(m_Country);
    }
    if(m_Country_codeIsSet)
    {
        val["country_code"] = ModelBase::toJson(m_Country_code);
    }
    if(m_ContinentIsSet)
    {
        val["continent"] = ModelBase::toJson(m_Continent);
    }
    if(m_PostcodeIsSet)
    {
        val["postcode"] = ModelBase::toJson(m_Postcode);
    }
    if(m_FeaturesIsSet)
    {
        val["features"] = ModelBase::toJson(m_Features);
    }
    

    return val;
}

void ResponseGeocodingProperties::fromJson(const nlohmann::json& val)
{
    setName(val.at("name"));
    setLabel(val.at("label"));
    if(val.find("score") != val.end())
    {
        setScore(val.at("score"));
    }
    if(val.find("house_number") != val.end())
    {
        setHouseNumber(val.at("house_number"));
    }
    if(val.find("street") != val.end())
    {
        setStreet(val.at("street"));
    }
    if(val.find("region") != val.end())
    {
        setRegion(val.at("region"));
    }
    if(val.find("region_code") != val.end())
    {
        setRegionCode(val.at("region_code"));
    }
    if(val.find("neighbourhood") != val.end())
    {
        setNeighbourhood(val.at("neighbourhood"));
    }
    if(val.find("county") != val.end())
    {
        setCounty(val.at("county"));
    }
    if(val.find("macroregion") != val.end())
    {
        setMacroregion(val.at("macroregion"));
    }
    if(val.find("city") != val.end())
    {
        setCity(val.at("city"));
    }
    if(val.find("country") != val.end())
    {
        setCountry(val.at("country"));
    }
    if(val.find("country_code") != val.end())
    {
        setCountryCode(val.at("country_code"));
    }
    if(val.find("continent") != val.end())
    {
        setContinent(val.at("continent"));
    }
    if(val.find("postcode") != val.end())
    {
        setPostcode(val.at("postcode"));
    }
    if(val.find("features") != val.end())
    {
        if(!val["features"].is_null())
        {
            ResponseMapInfoFeatures newItem;
            newItem.fromJson(val["features"]);
            setFeatures( newItem );
        }
        
    }
    
}


std::string ResponseGeocodingProperties::getName() const
{
    return m_Name;
}
void ResponseGeocodingProperties::setName(std::string const& value)
{
    m_Name = value;
    
}
std::string ResponseGeocodingProperties::getLabel() const
{
    return m_Label;
}
void ResponseGeocodingProperties::setLabel(std::string const& value)
{
    m_Label = value;
    
}
double ResponseGeocodingProperties::getScore() const
{
    return m_Score;
}
void ResponseGeocodingProperties::setScore(double const value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}
bool ResponseGeocodingProperties::scoreIsSet() const
{
    return m_ScoreIsSet;
}
void ResponseGeocodingProperties::unsetScore()
{
    m_ScoreIsSet = false;
}
std::string ResponseGeocodingProperties::getHouseNumber() const
{
    return m_House_number;
}
void ResponseGeocodingProperties::setHouseNumber(std::string const& value)
{
    m_House_number = value;
    m_House_numberIsSet = true;
}
bool ResponseGeocodingProperties::houseNumberIsSet() const
{
    return m_House_numberIsSet;
}
void ResponseGeocodingProperties::unsetHouse_number()
{
    m_House_numberIsSet = false;
}
std::string ResponseGeocodingProperties::getStreet() const
{
    return m_Street;
}
void ResponseGeocodingProperties::setStreet(std::string const& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}
bool ResponseGeocodingProperties::streetIsSet() const
{
    return m_StreetIsSet;
}
void ResponseGeocodingProperties::unsetStreet()
{
    m_StreetIsSet = false;
}
std::string ResponseGeocodingProperties::getRegion() const
{
    return m_Region;
}
void ResponseGeocodingProperties::setRegion(std::string const& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}
bool ResponseGeocodingProperties::regionIsSet() const
{
    return m_RegionIsSet;
}
void ResponseGeocodingProperties::unsetRegion()
{
    m_RegionIsSet = false;
}
std::string ResponseGeocodingProperties::getRegionCode() const
{
    return m_Region_code;
}
void ResponseGeocodingProperties::setRegionCode(std::string const& value)
{
    m_Region_code = value;
    m_Region_codeIsSet = true;
}
bool ResponseGeocodingProperties::regionCodeIsSet() const
{
    return m_Region_codeIsSet;
}
void ResponseGeocodingProperties::unsetRegion_code()
{
    m_Region_codeIsSet = false;
}
std::string ResponseGeocodingProperties::getNeighbourhood() const
{
    return m_Neighbourhood;
}
void ResponseGeocodingProperties::setNeighbourhood(std::string const& value)
{
    m_Neighbourhood = value;
    m_NeighbourhoodIsSet = true;
}
bool ResponseGeocodingProperties::neighbourhoodIsSet() const
{
    return m_NeighbourhoodIsSet;
}
void ResponseGeocodingProperties::unsetNeighbourhood()
{
    m_NeighbourhoodIsSet = false;
}
std::string ResponseGeocodingProperties::getCounty() const
{
    return m_County;
}
void ResponseGeocodingProperties::setCounty(std::string const& value)
{
    m_County = value;
    m_CountyIsSet = true;
}
bool ResponseGeocodingProperties::countyIsSet() const
{
    return m_CountyIsSet;
}
void ResponseGeocodingProperties::unsetCounty()
{
    m_CountyIsSet = false;
}
std::string ResponseGeocodingProperties::getMacroregion() const
{
    return m_Macroregion;
}
void ResponseGeocodingProperties::setMacroregion(std::string const& value)
{
    m_Macroregion = value;
    m_MacroregionIsSet = true;
}
bool ResponseGeocodingProperties::macroregionIsSet() const
{
    return m_MacroregionIsSet;
}
void ResponseGeocodingProperties::unsetMacroregion()
{
    m_MacroregionIsSet = false;
}
std::string ResponseGeocodingProperties::getCity() const
{
    return m_City;
}
void ResponseGeocodingProperties::setCity(std::string const& value)
{
    m_City = value;
    m_CityIsSet = true;
}
bool ResponseGeocodingProperties::cityIsSet() const
{
    return m_CityIsSet;
}
void ResponseGeocodingProperties::unsetCity()
{
    m_CityIsSet = false;
}
std::string ResponseGeocodingProperties::getCountry() const
{
    return m_Country;
}
void ResponseGeocodingProperties::setCountry(std::string const& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}
bool ResponseGeocodingProperties::countryIsSet() const
{
    return m_CountryIsSet;
}
void ResponseGeocodingProperties::unsetCountry()
{
    m_CountryIsSet = false;
}
std::string ResponseGeocodingProperties::getCountryCode() const
{
    return m_Country_code;
}
void ResponseGeocodingProperties::setCountryCode(std::string const& value)
{
    m_Country_code = value;
    m_Country_codeIsSet = true;
}
bool ResponseGeocodingProperties::countryCodeIsSet() const
{
    return m_Country_codeIsSet;
}
void ResponseGeocodingProperties::unsetCountry_code()
{
    m_Country_codeIsSet = false;
}
std::string ResponseGeocodingProperties::getContinent() const
{
    return m_Continent;
}
void ResponseGeocodingProperties::setContinent(std::string const& value)
{
    m_Continent = value;
    m_ContinentIsSet = true;
}
bool ResponseGeocodingProperties::continentIsSet() const
{
    return m_ContinentIsSet;
}
void ResponseGeocodingProperties::unsetContinent()
{
    m_ContinentIsSet = false;
}
std::string ResponseGeocodingProperties::getPostcode() const
{
    return m_Postcode;
}
void ResponseGeocodingProperties::setPostcode(std::string const& value)
{
    m_Postcode = value;
    m_PostcodeIsSet = true;
}
bool ResponseGeocodingProperties::postcodeIsSet() const
{
    return m_PostcodeIsSet;
}
void ResponseGeocodingProperties::unsetPostcode()
{
    m_PostcodeIsSet = false;
}
ResponseMapInfoFeatures ResponseGeocodingProperties::getFeatures() const
{
    return m_Features;
}
void ResponseGeocodingProperties::setFeatures(ResponseMapInfoFeatures const& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}
bool ResponseGeocodingProperties::featuresIsSet() const
{
    return m_FeaturesIsSet;
}
void ResponseGeocodingProperties::unsetFeatures()
{
    m_FeaturesIsSet = false;
}

}
}
}
}

