/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeFilterPostcodeSectors.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTimeFilterPostcodeSectors::RequestTimeFilterPostcodeSectors()
{
    m_Departure_searchesIsSet = false;
    m_Arrival_searchesIsSet = false;
    
}

RequestTimeFilterPostcodeSectors::~RequestTimeFilterPostcodeSectors()
{
}

void RequestTimeFilterPostcodeSectors::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestTimeFilterPostcodeSectors::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Departure_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["departure_searches"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Arrival_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["arrival_searches"] = jsonArray;
        } 
    }
    

    return val;
}

void RequestTimeFilterPostcodeSectors::fromJson(const nlohmann::json& val)
{
    {
        m_Departure_searches.clear();
        if(val.find("departure_searches") != val.end())
        {
            for( auto& item : val["departure_searches"] )
            {
                
                if(item.is_null())
                {
                    m_Departure_searches.push_back( RequestTimeFilterPostcodeSectorsDepartureSearch() );
                }
                else
                {
                    RequestTimeFilterPostcodeSectorsDepartureSearch newItem;
                    newItem.fromJson(item);
                    m_Departure_searches.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_Arrival_searches.clear();
        if(val.find("arrival_searches") != val.end())
        {
            for( auto& item : val["arrival_searches"] )
            {
                
                if(item.is_null())
                {
                    m_Arrival_searches.push_back( RequestTimeFilterPostcodeSectorsArrivalSearch() );
                }
                else
                {
                    RequestTimeFilterPostcodeSectorsArrivalSearch newItem;
                    newItem.fromJson(item);
                    m_Arrival_searches.push_back( newItem );
                }
                
            }
        }
    }
    
}


std::vector<RequestTimeFilterPostcodeSectorsDepartureSearch>& RequestTimeFilterPostcodeSectors::getDepartureSearches()
{
    return m_Departure_searches;
}
bool RequestTimeFilterPostcodeSectors::departureSearchesIsSet() const
{
    return m_Departure_searchesIsSet;
}
void RequestTimeFilterPostcodeSectors::unsetDeparture_searches()
{
    m_Departure_searchesIsSet = false;
}
std::vector<RequestTimeFilterPostcodeSectorsArrivalSearch>& RequestTimeFilterPostcodeSectors::getArrivalSearches()
{
    return m_Arrival_searches;
}
bool RequestTimeFilterPostcodeSectors::arrivalSearchesIsSet() const
{
    return m_Arrival_searchesIsSet;
}
void RequestTimeFilterPostcodeSectors::unsetArrival_searches()
{
    m_Arrival_searchesIsSet = false;
}

}
}
}
}

