/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTransportation.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTransportation::RequestTransportation()
{
    m_Type = "";
    m_Pt_change_delay = 0;
    m_Pt_change_delayIsSet = false;
    m_Walking_time = 0;
    m_Walking_timeIsSet = false;
    m_Driving_time_to_station = 0;
    m_Driving_time_to_stationIsSet = false;
    m_Parking_time = 0;
    m_Parking_timeIsSet = false;
    m_Boarding_time = 0;
    m_Boarding_timeIsSet = false;
    
}

RequestTransportation::~RequestTransportation()
{
}

void RequestTransportation::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestTransportation::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["type"] = ModelBase::toJson(m_Type);
    if(m_Pt_change_delayIsSet)
    {
        val["pt_change_delay"] = m_Pt_change_delay;
    }
    if(m_Walking_timeIsSet)
    {
        val["walking_time"] = m_Walking_time;
    }
    if(m_Driving_time_to_stationIsSet)
    {
        val["driving_time_to_station"] = m_Driving_time_to_station;
    }
    if(m_Parking_timeIsSet)
    {
        val["parking_time"] = m_Parking_time;
    }
    if(m_Boarding_timeIsSet)
    {
        val["boarding_time"] = m_Boarding_time;
    }
    

    return val;
}

void RequestTransportation::fromJson(const nlohmann::json& val)
{
    setType(val.at("type"));
    if(val.find("pt_change_delay") != val.end())
    {
        setPtChangeDelay(val.at("pt_change_delay"));
    }
    if(val.find("walking_time") != val.end())
    {
        setWalkingTime(val.at("walking_time"));
    }
    if(val.find("driving_time_to_station") != val.end())
    {
        setDrivingTimeToStation(val.at("driving_time_to_station"));
    }
    if(val.find("parking_time") != val.end())
    {
        setParkingTime(val.at("parking_time"));
    }
    if(val.find("boarding_time") != val.end())
    {
        setBoardingTime(val.at("boarding_time"));
    }
    
}


std::string RequestTransportation::getType() const
{
    return m_Type;
}
void RequestTransportation::setType(std::string const& value)
{
    m_Type = value;
    
}
int32_t RequestTransportation::getPtChangeDelay() const
{
    return m_Pt_change_delay;
}
void RequestTransportation::setPtChangeDelay(int32_t const value)
{
    m_Pt_change_delay = value;
    m_Pt_change_delayIsSet = true;
}
bool RequestTransportation::ptChangeDelayIsSet() const
{
    return m_Pt_change_delayIsSet;
}
void RequestTransportation::unsetPt_change_delay()
{
    m_Pt_change_delayIsSet = false;
}
int32_t RequestTransportation::getWalkingTime() const
{
    return m_Walking_time;
}
void RequestTransportation::setWalkingTime(int32_t const value)
{
    m_Walking_time = value;
    m_Walking_timeIsSet = true;
}
bool RequestTransportation::walkingTimeIsSet() const
{
    return m_Walking_timeIsSet;
}
void RequestTransportation::unsetWalking_time()
{
    m_Walking_timeIsSet = false;
}
int32_t RequestTransportation::getDrivingTimeToStation() const
{
    return m_Driving_time_to_station;
}
void RequestTransportation::setDrivingTimeToStation(int32_t const value)
{
    m_Driving_time_to_station = value;
    m_Driving_time_to_stationIsSet = true;
}
bool RequestTransportation::drivingTimeToStationIsSet() const
{
    return m_Driving_time_to_stationIsSet;
}
void RequestTransportation::unsetDriving_time_to_station()
{
    m_Driving_time_to_stationIsSet = false;
}
int32_t RequestTransportation::getParkingTime() const
{
    return m_Parking_time;
}
void RequestTransportation::setParkingTime(int32_t const value)
{
    m_Parking_time = value;
    m_Parking_timeIsSet = true;
}
bool RequestTransportation::parkingTimeIsSet() const
{
    return m_Parking_timeIsSet;
}
void RequestTransportation::unsetParking_time()
{
    m_Parking_timeIsSet = false;
}
int32_t RequestTransportation::getBoardingTime() const
{
    return m_Boarding_time;
}
void RequestTransportation::setBoardingTime(int32_t const value)
{
    m_Boarding_time = value;
    m_Boarding_timeIsSet = true;
}
bool RequestTransportation::boardingTimeIsSet() const
{
    return m_Boarding_timeIsSet;
}
void RequestTransportation::unsetBoarding_time()
{
    m_Boarding_timeIsSet = false;
}

}
}
}
}

