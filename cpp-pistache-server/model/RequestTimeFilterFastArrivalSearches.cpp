/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeFilterFastArrivalSearches.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTimeFilterFastArrivalSearches::RequestTimeFilterFastArrivalSearches()
{
    m_Many_to_oneIsSet = false;
    m_One_to_manyIsSet = false;
    
}

RequestTimeFilterFastArrivalSearches::~RequestTimeFilterFastArrivalSearches()
{
}

void RequestTimeFilterFastArrivalSearches::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestTimeFilterFastArrivalSearches::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Many_to_one )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["many_to_one"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_One_to_many )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["one_to_many"] = jsonArray;
        } 
    }
    

    return val;
}

void RequestTimeFilterFastArrivalSearches::fromJson(const nlohmann::json& val)
{
    {
        m_Many_to_one.clear();
        if(val.find("many_to_one") != val.end())
        {
            for( auto& item : val["many_to_one"] )
            {
                
                if(item.is_null())
                {
                    m_Many_to_one.push_back( RequestTimeFilterFastArrivalManyToOneSearch() );
                }
                else
                {
                    RequestTimeFilterFastArrivalManyToOneSearch newItem;
                    newItem.fromJson(item);
                    m_Many_to_one.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_One_to_many.clear();
        if(val.find("one_to_many") != val.end())
        {
            for( auto& item : val["one_to_many"] )
            {
                
                if(item.is_null())
                {
                    m_One_to_many.push_back( RequestTimeFilterFastArrivalOneToManySearch() );
                }
                else
                {
                    RequestTimeFilterFastArrivalOneToManySearch newItem;
                    newItem.fromJson(item);
                    m_One_to_many.push_back( newItem );
                }
                
            }
        }
    }
    
}


std::vector<RequestTimeFilterFastArrivalManyToOneSearch>& RequestTimeFilterFastArrivalSearches::getManyToOne()
{
    return m_Many_to_one;
}
bool RequestTimeFilterFastArrivalSearches::manyToOneIsSet() const
{
    return m_Many_to_oneIsSet;
}
void RequestTimeFilterFastArrivalSearches::unsetMany_to_one()
{
    m_Many_to_oneIsSet = false;
}
std::vector<RequestTimeFilterFastArrivalOneToManySearch>& RequestTimeFilterFastArrivalSearches::getOneToMany()
{
    return m_One_to_many;
}
bool RequestTimeFilterFastArrivalSearches::oneToManyIsSet() const
{
    return m_One_to_manyIsSet;
}
void RequestTimeFilterFastArrivalSearches::unsetOne_to_many()
{
    m_One_to_manyIsSet = false;
}

}
}
}
}

