/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestTimeMap.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTimeMap::RequestTimeMap()
{
    m_Departure_searchesIsSet = false;
    m_Arrival_searchesIsSet = false;
    m_UnionsIsSet = false;
    m_IntersectionsIsSet = false;
    
}

RequestTimeMap::~RequestTimeMap()
{
}

void RequestTimeMap::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestTimeMap::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Departure_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["departure_searches"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Arrival_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["arrival_searches"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Unions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["unions"] = jsonArray;
        } 
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Intersections )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val["intersections"] = jsonArray;
        } 
    }
    

    return val;
}

void RequestTimeMap::fromJson(const nlohmann::json& val)
{
    {
        m_Departure_searches.clear();
        if(val.find("departure_searches") != val.end())
        {
            for( auto& item : val["departure_searches"] )
            {
                
                if(item.is_null())
                {
                    m_Departure_searches.push_back( RequestTimeMapDepartureSearch() );
                }
                else
                {
                    RequestTimeMapDepartureSearch newItem;
                    newItem.fromJson(item);
                    m_Departure_searches.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_Arrival_searches.clear();
        if(val.find("arrival_searches") != val.end())
        {
            for( auto& item : val["arrival_searches"] )
            {
                
                if(item.is_null())
                {
                    m_Arrival_searches.push_back( RequestTimeMapArrivalSearch() );
                }
                else
                {
                    RequestTimeMapArrivalSearch newItem;
                    newItem.fromJson(item);
                    m_Arrival_searches.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_Unions.clear();
        if(val.find("unions") != val.end())
        {
            for( auto& item : val["unions"] )
            {
                
                if(item.is_null())
                {
                    m_Unions.push_back( RequestUnionOnIntersection() );
                }
                else
                {
                    RequestUnionOnIntersection newItem;
                    newItem.fromJson(item);
                    m_Unions.push_back( newItem );
                }
                
            }
        }
    }
    {
        m_Intersections.clear();
        if(val.find("intersections") != val.end())
        {
            for( auto& item : val["intersections"] )
            {
                
                if(item.is_null())
                {
                    m_Intersections.push_back( RequestUnionOnIntersection() );
                }
                else
                {
                    RequestUnionOnIntersection newItem;
                    newItem.fromJson(item);
                    m_Intersections.push_back( newItem );
                }
                
            }
        }
    }
    
}


std::vector<RequestTimeMapDepartureSearch>& RequestTimeMap::getDepartureSearches()
{
    return m_Departure_searches;
}
bool RequestTimeMap::departureSearchesIsSet() const
{
    return m_Departure_searchesIsSet;
}
void RequestTimeMap::unsetDeparture_searches()
{
    m_Departure_searchesIsSet = false;
}
std::vector<RequestTimeMapArrivalSearch>& RequestTimeMap::getArrivalSearches()
{
    return m_Arrival_searches;
}
bool RequestTimeMap::arrivalSearchesIsSet() const
{
    return m_Arrival_searchesIsSet;
}
void RequestTimeMap::unsetArrival_searches()
{
    m_Arrival_searchesIsSet = false;
}
std::vector<RequestUnionOnIntersection>& RequestTimeMap::getUnions()
{
    return m_Unions;
}
bool RequestTimeMap::unionsIsSet() const
{
    return m_UnionsIsSet;
}
void RequestTimeMap::unsetUnions()
{
    m_UnionsIsSet = false;
}
std::vector<RequestUnionOnIntersection>& RequestTimeMap::getIntersections()
{
    return m_Intersections;
}
bool RequestTimeMap::intersectionsIsSet() const
{
    return m_IntersectionsIsSet;
}
void RequestTimeMap::unsetIntersections()
{
    m_IntersectionsIsSet = false;
}

}
}
}
}

