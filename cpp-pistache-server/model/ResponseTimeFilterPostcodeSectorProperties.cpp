/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ResponseTimeFilterPostcodeSectorProperties.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

ResponseTimeFilterPostcodeSectorProperties::ResponseTimeFilterPostcodeSectorProperties()
{
    m_Travel_time_reachableIsSet = false;
    m_Travel_time_allIsSet = false;
    m_Coverage = 0.0;
    m_CoverageIsSet = false;
    
}

ResponseTimeFilterPostcodeSectorProperties::~ResponseTimeFilterPostcodeSectorProperties()
{
}

void ResponseTimeFilterPostcodeSectorProperties::validate()
{
    // TODO: implement validation
}

nlohmann::json ResponseTimeFilterPostcodeSectorProperties::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m_Travel_time_reachableIsSet)
    {
        val["travel_time_reachable"] = ModelBase::toJson(m_Travel_time_reachable);
    }
    if(m_Travel_time_allIsSet)
    {
        val["travel_time_all"] = ModelBase::toJson(m_Travel_time_all);
    }
    if(m_CoverageIsSet)
    {
        val["coverage"] = m_Coverage;
    }
    

    return val;
}

void ResponseTimeFilterPostcodeSectorProperties::fromJson(const nlohmann::json& val)
{
    if(val.find("travel_time_reachable") != val.end())
    {
        if(!val["travel_time_reachable"].is_null())
        {
            ResponseTravelTimeStatistics newItem;
            newItem.fromJson(val["travel_time_reachable"]);
            setTravelTimeReachable( newItem );
        }
        
    }
    if(val.find("travel_time_all") != val.end())
    {
        if(!val["travel_time_all"].is_null())
        {
            ResponseTravelTimeStatistics newItem;
            newItem.fromJson(val["travel_time_all"]);
            setTravelTimeAll( newItem );
        }
        
    }
    if(val.find("coverage") != val.end())
    {
        setCoverage(val.at("coverage"));
    }
    
}


ResponseTravelTimeStatistics ResponseTimeFilterPostcodeSectorProperties::getTravelTimeReachable() const
{
    return m_Travel_time_reachable;
}
void ResponseTimeFilterPostcodeSectorProperties::setTravelTimeReachable(ResponseTravelTimeStatistics const& value)
{
    m_Travel_time_reachable = value;
    m_Travel_time_reachableIsSet = true;
}
bool ResponseTimeFilterPostcodeSectorProperties::travelTimeReachableIsSet() const
{
    return m_Travel_time_reachableIsSet;
}
void ResponseTimeFilterPostcodeSectorProperties::unsetTravel_time_reachable()
{
    m_Travel_time_reachableIsSet = false;
}
ResponseTravelTimeStatistics ResponseTimeFilterPostcodeSectorProperties::getTravelTimeAll() const
{
    return m_Travel_time_all;
}
void ResponseTimeFilterPostcodeSectorProperties::setTravelTimeAll(ResponseTravelTimeStatistics const& value)
{
    m_Travel_time_all = value;
    m_Travel_time_allIsSet = true;
}
bool ResponseTimeFilterPostcodeSectorProperties::travelTimeAllIsSet() const
{
    return m_Travel_time_allIsSet;
}
void ResponseTimeFilterPostcodeSectorProperties::unsetTravel_time_all()
{
    m_Travel_time_allIsSet = false;
}
double ResponseTimeFilterPostcodeSectorProperties::getCoverage() const
{
    return m_Coverage;
}
void ResponseTimeFilterPostcodeSectorProperties::setCoverage(double const value)
{
    m_Coverage = value;
    m_CoverageIsSet = true;
}
bool ResponseTimeFilterPostcodeSectorProperties::coverageIsSet() const
{
    return m_CoverageIsSet;
}
void ResponseTimeFilterPostcodeSectorProperties::unsetCoverage()
{
    m_CoverageIsSet = false;
}

}
}
}
}

