/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RequestTimeMap.h
 *
 * 
 */

#ifndef RequestTimeMap_H_
#define RequestTimeMap_H_


#include "ModelBase.h"

#include "RequestTimeMapDepartureSearch.h"
#include "RequestUnionOnIntersection.h"
#include "RequestTimeMapArrivalSearch.h"
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  RequestTimeMap
    : public ModelBase
{
public:
    RequestTimeMap();
    virtual ~RequestTimeMap();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(const nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// RequestTimeMap members

    /// <summary>
    /// 
    /// </summary>
    std::vector<RequestTimeMapDepartureSearch>& getDepartureSearches();
    bool departureSearchesIsSet() const;
    void unsetDeparture_searches();
    /// <summary>
    /// 
    /// </summary>
    std::vector<RequestTimeMapArrivalSearch>& getArrivalSearches();
    bool arrivalSearchesIsSet() const;
    void unsetArrival_searches();
    /// <summary>
    /// 
    /// </summary>
    std::vector<RequestUnionOnIntersection>& getUnions();
    bool unionsIsSet() const;
    void unsetUnions();
    /// <summary>
    /// 
    /// </summary>
    std::vector<RequestUnionOnIntersection>& getIntersections();
    bool intersectionsIsSet() const;
    void unsetIntersections();

protected:
    std::vector<RequestTimeMapDepartureSearch> m_Departure_searches;
    bool m_Departure_searchesIsSet;
    std::vector<RequestTimeMapArrivalSearch> m_Arrival_searches;
    bool m_Arrival_searchesIsSet;
    std::vector<RequestUnionOnIntersection> m_Unions;
    bool m_UnionsIsSet;
    std::vector<RequestUnionOnIntersection> m_Intersections;
    bool m_IntersectionsIsSet;
};

}
}
}
}

#endif /* RequestTimeMap_H_ */
