/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestRoutesDepartureSearch.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestRoutesDepartureSearch::RequestRoutesDepartureSearch()
{
    m_Id = "";
    m_Departure_location_id = "";
    m_Departure_time = "";
    m_RangeIsSet = false;
    
}

RequestRoutesDepartureSearch::~RequestRoutesDepartureSearch()
{
}

void RequestRoutesDepartureSearch::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestRoutesDepartureSearch::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    val["departure_location_id"] = ModelBase::toJson(m_Departure_location_id);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Arrival_location_ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["arrival_location_ids"] = jsonArray;
        
    }
    val["transportation"] = ModelBase::toJson(m_Transportation);
    val["departure_time"] = ModelBase::toJson(m_Departure_time);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["properties"] = jsonArray;
        
    }
    if(m_RangeIsSet)
    {
        val["range"] = ModelBase::toJson(m_Range);
    }
    

    return val;
}

void RequestRoutesDepartureSearch::fromJson(const nlohmann::json& val)
{
    setId(val.at("id"));
    setDepartureLocationId(val.at("departure_location_id"));
    {
        m_Arrival_location_ids.clear();
                    for( auto& item : val["arrival_location_ids"] )
            {
                m_Arrival_location_ids.push_back(item);
                
            }
    }
    setDepartureTime(val.at("departure_time"));
    {
        m_Properties.clear();
                    for( auto& item : val["properties"] )
            {
                
                if(item.is_null())
                {
                    m_Properties.push_back( RequestRoutesProperty() );
                }
                else
                {
                    RequestRoutesProperty newItem;
                    newItem.fromJson(item);
                    m_Properties.push_back( newItem );
                }
                
            }
    }
    if(val.find("range") != val.end())
    {
        if(!val["range"].is_null())
        {
            RequestRangeFull newItem;
            newItem.fromJson(val["range"]);
            setRange( newItem );
        }
        
    }
    
}


std::string RequestRoutesDepartureSearch::getId() const
{
    return m_Id;
}
void RequestRoutesDepartureSearch::setId(std::string const& value)
{
    m_Id = value;
    
}
std::string RequestRoutesDepartureSearch::getDepartureLocationId() const
{
    return m_Departure_location_id;
}
void RequestRoutesDepartureSearch::setDepartureLocationId(std::string const& value)
{
    m_Departure_location_id = value;
    
}
std::vector<std::string>& RequestRoutesDepartureSearch::getArrivalLocationIds()
{
    return m_Arrival_location_ids;
}
RequestTransportation RequestRoutesDepartureSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestRoutesDepartureSearch::setTransportation(RequestTransportation const& value)
{
    m_Transportation = value;
    
}
std::string RequestRoutesDepartureSearch::getDepartureTime() const
{
    return m_Departure_time;
}
void RequestRoutesDepartureSearch::setDepartureTime(std::string const& value)
{
    m_Departure_time = value;
    
}
std::vector<RequestRoutesProperty>& RequestRoutesDepartureSearch::getProperties()
{
    return m_Properties;
}
RequestRangeFull RequestRoutesDepartureSearch::getRange() const
{
    return m_Range;
}
void RequestRoutesDepartureSearch::setRange(RequestRangeFull const& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}
bool RequestRoutesDepartureSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}
void RequestRoutesDepartureSearch::unsetRange()
{
    m_RangeIsSet = false;
}

}
}
}
}

