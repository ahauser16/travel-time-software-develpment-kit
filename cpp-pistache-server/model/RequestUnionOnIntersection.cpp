/**
* TravelTime Platform API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 1.0.0
* Contact: support@igeolise.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "RequestUnionOnIntersection.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestUnionOnIntersection::RequestUnionOnIntersection()
{
    m_Id = "";
    
}

RequestUnionOnIntersection::~RequestUnionOnIntersection()
{
}

void RequestUnionOnIntersection::validate()
{
    // TODO: implement validation
}

nlohmann::json RequestUnionOnIntersection::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["id"] = ModelBase::toJson(m_Id);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Search_ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["search_ids"] = jsonArray;
        
    }
    

    return val;
}

void RequestUnionOnIntersection::fromJson(const nlohmann::json& val)
{
    setId(val.at("id"));
    {
        m_Search_ids.clear();
                    for( auto& item : val["search_ids"] )
            {
                m_Search_ids.push_back(item);
                
            }
    }
    
}


std::string RequestUnionOnIntersection::getId() const
{
    return m_Id;
}
void RequestUnionOnIntersection::setId(std::string const& value)
{
    m_Id = value;
    
}
std::vector<std::string>& RequestUnionOnIntersection::getSearchIds()
{
    return m_Search_ids;
}

}
}
}
}

