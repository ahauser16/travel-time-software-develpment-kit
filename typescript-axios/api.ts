// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "https://api.traveltimeapp.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Coords
 */
export interface Coords {
    /**
     * 
     * @type {number}
     * @memberof Coords
     */
    lat: number;
    /**
     * 
     * @type {number}
     * @memberof Coords
     */
    lng: number;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestArrivalTimePeriod {
    WeekdayMorning = 'weekday_morning'
}

/**
 * 
 * @export
 * @interface RequestLocation
 */
export interface RequestLocation {
    /**
     * 
     * @type {string}
     * @memberof RequestLocation
     */
    id: string;
    /**
     * 
     * @type {Coords}
     * @memberof RequestLocation
     */
    coords: Coords;
}

/**
 * 
 * @export
 * @interface RequestRangeFull
 */
export interface RequestRangeFull {
    /**
     * 
     * @type {boolean}
     * @memberof RequestRangeFull
     */
    enabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof RequestRangeFull
     */
    maxResults: number;
    /**
     * 
     * @type {number}
     * @memberof RequestRangeFull
     */
    width: number;
}

/**
 * 
 * @export
 * @interface RequestRangeNoMaxResults
 */
export interface RequestRangeNoMaxResults {
    /**
     * 
     * @type {boolean}
     * @memberof RequestRangeNoMaxResults
     */
    enabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof RequestRangeNoMaxResults
     */
    width: number;
}

/**
 * 
 * @export
 * @interface RequestRoutes
 */
export interface RequestRoutes {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestRoutes
     */
    locations: Array<RequestLocation>;
    /**
     * 
     * @type {Array<RequestRoutesDepartureSearch>}
     * @memberof RequestRoutes
     */
    departureSearches?: Array<RequestRoutesDepartureSearch>;
    /**
     * 
     * @type {Array<RequestRoutesArrivalSearch>}
     * @memberof RequestRoutes
     */
    arrivalSearches?: Array<RequestRoutesArrivalSearch>;
}

/**
 * 
 * @export
 * @interface RequestRoutesArrivalSearch
 */
export interface RequestRoutesArrivalSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestRoutesArrivalSearch
     */
    departureLocationIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesArrivalSearch
     */
    arrivalLocationId: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestRoutesArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {Date}
     * @memberof RequestRoutesArrivalSearch
     */
    arrivalTime: Date;
    /**
     * 
     * @type {Array<RequestRoutesProperty>}
     * @memberof RequestRoutesArrivalSearch
     */
    properties: Array<RequestRoutesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestRoutesArrivalSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @interface RequestRoutesDepartureSearch
 */
export interface RequestRoutesDepartureSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestRoutesDepartureSearch
     */
    departureLocationId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestRoutesDepartureSearch
     */
    arrivalLocationIds: Array<string>;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestRoutesDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {Date}
     * @memberof RequestRoutesDepartureSearch
     */
    departureTime: Date;
    /**
     * 
     * @type {Array<RequestRoutesProperty>}
     * @memberof RequestRoutesDepartureSearch
     */
    properties: Array<RequestRoutesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestRoutesDepartureSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestRoutesProperty {
    TravelTime = 'travel_time',
    Distance = 'distance',
    Fares = 'fares',
    Route = 'route'
}

/**
 * 
 * @export
 * @interface RequestSupportedLocations
 */
export interface RequestSupportedLocations {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestSupportedLocations
     */
    locations: Array<RequestLocation>;
}

/**
 * 
 * @export
 * @interface RequestTimeFilter
 */
export interface RequestTimeFilter {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestTimeFilter
     */
    locations: Array<RequestLocation>;
    /**
     * 
     * @type {Array<RequestTimeFilterDepartureSearch>}
     * @memberof RequestTimeFilter
     */
    departureSearches?: Array<RequestTimeFilterDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterArrivalSearch>}
     * @memberof RequestTimeFilter
     */
    arrivalSearches?: Array<RequestTimeFilterArrivalSearch>;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterArrivalSearch
 */
export interface RequestTimeFilterArrivalSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterArrivalSearch
     */
    departureLocationIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterArrivalSearch
     */
    arrivalLocationId: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterArrivalSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterArrivalSearch
     */
    arrivalTime: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterProperty>}
     * @memberof RequestTimeFilterArrivalSearch
     */
    properties: Array<RequestTimeFilterProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterArrivalSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterDepartureSearch
 */
export interface RequestTimeFilterDepartureSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterDepartureSearch
     */
    departureLocationId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterDepartureSearch
     */
    arrivalLocationIds: Array<string>;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterDepartureSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterDepartureSearch
     */
    departureTime: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterProperty>}
     * @memberof RequestTimeFilterDepartureSearch
     */
    properties: Array<RequestTimeFilterProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterDepartureSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterFast
 */
export interface RequestTimeFilterFast {
    /**
     * 
     * @type {Array<RequestLocation>}
     * @memberof RequestTimeFilterFast
     */
    locations: Array<RequestLocation>;
    /**
     * 
     * @type {RequestTimeFilterFastArrivalSearches}
     * @memberof RequestTimeFilterFast
     */
    arrivalSearches: RequestTimeFilterFastArrivalSearches;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterFastArrivalManyToOneSearch
 */
export interface RequestTimeFilterFastArrivalManyToOneSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    arrivalLocationId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    departureLocationIds: Array<string>;
    /**
     * 
     * @type {RequestTransportationFast}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    transportation: RequestTransportationFast;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    travelTime: number;
    /**
     * 
     * @type {RequestArrivalTimePeriod}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    arrivalTimePeriod: RequestArrivalTimePeriod;
    /**
     * 
     * @type {Array<RequestTimeFilterFastProperty>}
     * @memberof RequestTimeFilterFastArrivalManyToOneSearch
     */
    properties: Array<RequestTimeFilterFastProperty>;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterFastArrivalOneToManySearch
 */
export interface RequestTimeFilterFastArrivalOneToManySearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    departureLocationId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    arrivalLocationIds: Array<string>;
    /**
     * 
     * @type {RequestTransportationFast}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    transportation: RequestTransportationFast;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    travelTime: number;
    /**
     * 
     * @type {RequestArrivalTimePeriod}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    arrivalTimePeriod: RequestArrivalTimePeriod;
    /**
     * 
     * @type {Array<RequestTimeFilterFastProperty>}
     * @memberof RequestTimeFilterFastArrivalOneToManySearch
     */
    properties: Array<RequestTimeFilterFastProperty>;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterFastArrivalSearches
 */
export interface RequestTimeFilterFastArrivalSearches {
    /**
     * 
     * @type {Array<RequestTimeFilterFastArrivalManyToOneSearch>}
     * @memberof RequestTimeFilterFastArrivalSearches
     */
    manyToOne?: Array<RequestTimeFilterFastArrivalManyToOneSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterFastArrivalOneToManySearch>}
     * @memberof RequestTimeFilterFastArrivalSearches
     */
    oneToMany?: Array<RequestTimeFilterFastArrivalOneToManySearch>;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestTimeFilterFastProperty {
    TravelTime = 'travel_time',
    Fares = 'fares'
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodeDistricts
 */
export interface RequestTimeFilterPostcodeDistricts {
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsDepartureSearch>}
     * @memberof RequestTimeFilterPostcodeDistricts
     */
    departureSearches?: Array<RequestTimeFilterPostcodeDistrictsDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsArrivalSearch>}
     * @memberof RequestTimeFilterPostcodeDistricts
     */
    arrivalSearches?: Array<RequestTimeFilterPostcodeDistrictsArrivalSearch>;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodeDistrictsArrivalSearch
 */
export interface RequestTimeFilterPostcodeDistrictsArrivalSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    arrivalTime: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    reachablePostcodesThreshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsProperty>}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeDistrictsArrivalSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodeDistrictsDepartureSearch
 */
export interface RequestTimeFilterPostcodeDistrictsDepartureSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    departureTime: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    reachablePostcodesThreshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeDistrictsProperty>}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeDistrictsDepartureSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestTimeFilterPostcodeDistrictsProperty {
    TravelTimeReachable = 'travel_time_reachable',
    TravelTimeAll = 'travel_time_all',
    Coverage = 'coverage'
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodeSectors
 */
export interface RequestTimeFilterPostcodeSectors {
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsDepartureSearch>}
     * @memberof RequestTimeFilterPostcodeSectors
     */
    departureSearches?: Array<RequestTimeFilterPostcodeSectorsDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsArrivalSearch>}
     * @memberof RequestTimeFilterPostcodeSectors
     */
    arrivalSearches?: Array<RequestTimeFilterPostcodeSectorsArrivalSearch>;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodeSectorsArrivalSearch
 */
export interface RequestTimeFilterPostcodeSectorsArrivalSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    arrivalTime: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    reachablePostcodesThreshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsProperty>}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeSectorsArrivalSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodeSectorsDepartureSearch
 */
export interface RequestTimeFilterPostcodeSectorsDepartureSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    departureTime: Date;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    reachablePostcodesThreshold: number;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodeSectorsProperty>}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodeSectorsDepartureSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestTimeFilterPostcodeSectorsProperty {
    TravelTimeReachable = 'travel_time_reachable',
    TravelTimeAll = 'travel_time_all',
    Coverage = 'coverage'
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodes
 */
export interface RequestTimeFilterPostcodes {
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesDepartureSearch>}
     * @memberof RequestTimeFilterPostcodes
     */
    departureSearches?: Array<RequestTimeFilterPostcodesDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesArrivalSearch>}
     * @memberof RequestTimeFilterPostcodes
     */
    arrivalSearches?: Array<RequestTimeFilterPostcodesArrivalSearch>;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodesArrivalSearch
 */
export interface RequestTimeFilterPostcodesArrivalSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    arrivalTime: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesProperty>}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    properties: Array<RequestTimeFilterPostcodesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodesArrivalSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @interface RequestTimeFilterPostcodesDepartureSearch
 */
export interface RequestTimeFilterPostcodesDepartureSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    departureTime: Date;
    /**
     * 
     * @type {Array<RequestTimeFilterPostcodesProperty>}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    properties: Array<RequestTimeFilterPostcodesProperty>;
    /**
     * 
     * @type {RequestRangeFull}
     * @memberof RequestTimeFilterPostcodesDepartureSearch
     */
    range?: RequestRangeFull;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestTimeFilterPostcodesProperty {
    TravelTime = 'travel_time',
    Distance = 'distance'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestTimeFilterProperty {
    TravelTime = 'travel_time',
    Distance = 'distance',
    DistanceBreakdown = 'distance_breakdown',
    Fares = 'fares',
    Route = 'route'
}

/**
 * 
 * @export
 * @interface RequestTimeMap
 */
export interface RequestTimeMap {
    /**
     * 
     * @type {Array<RequestTimeMapDepartureSearch>}
     * @memberof RequestTimeMap
     */
    departureSearches?: Array<RequestTimeMapDepartureSearch>;
    /**
     * 
     * @type {Array<RequestTimeMapArrivalSearch>}
     * @memberof RequestTimeMap
     */
    arrivalSearches?: Array<RequestTimeMapArrivalSearch>;
    /**
     * 
     * @type {Array<RequestUnionOnIntersection>}
     * @memberof RequestTimeMap
     */
    unions?: Array<RequestUnionOnIntersection>;
    /**
     * 
     * @type {Array<RequestUnionOnIntersection>}
     * @memberof RequestTimeMap
     */
    intersections?: Array<RequestUnionOnIntersection>;
}

/**
 * 
 * @export
 * @interface RequestTimeMapArrivalSearch
 */
export interface RequestTimeMapArrivalSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeMapArrivalSearch
     */
    id: string;
    /**
     * 
     * @type {Coords}
     * @memberof RequestTimeMapArrivalSearch
     */
    coords: Coords;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeMapArrivalSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeMapArrivalSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeMapArrivalSearch
     */
    arrivalTime: Date;
    /**
     * 
     * @type {Array<RequestTimeMapProperty>}
     * @memberof RequestTimeMapArrivalSearch
     */
    properties?: Array<RequestTimeMapProperty>;
    /**
     * 
     * @type {RequestRangeNoMaxResults}
     * @memberof RequestTimeMapArrivalSearch
     */
    range?: RequestRangeNoMaxResults;
}

/**
 * 
 * @export
 * @interface RequestTimeMapDepartureSearch
 */
export interface RequestTimeMapDepartureSearch {
    /**
     * 
     * @type {string}
     * @memberof RequestTimeMapDepartureSearch
     */
    id: string;
    /**
     * 
     * @type {Coords}
     * @memberof RequestTimeMapDepartureSearch
     */
    coords: Coords;
    /**
     * 
     * @type {RequestTransportation}
     * @memberof RequestTimeMapDepartureSearch
     */
    transportation: RequestTransportation;
    /**
     * 
     * @type {number}
     * @memberof RequestTimeMapDepartureSearch
     */
    travelTime: number;
    /**
     * 
     * @type {Date}
     * @memberof RequestTimeMapDepartureSearch
     */
    departureTime: Date;
    /**
     * 
     * @type {Array<RequestTimeMapProperty>}
     * @memberof RequestTimeMapDepartureSearch
     */
    properties?: Array<RequestTimeMapProperty>;
    /**
     * 
     * @type {RequestRangeNoMaxResults}
     * @memberof RequestTimeMapDepartureSearch
     */
    range?: RequestRangeNoMaxResults;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum RequestTimeMapProperty {
    IsOnlyWalking = 'is_only_walking'
}

/**
 * 
 * @export
 * @interface RequestTransportation
 */
export interface RequestTransportation {
    /**
     * 
     * @type {string}
     * @memberof RequestTransportation
     */
    type: RequestTransportation.TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    ptChangeDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    walkingTime?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    drivingTimeToStation?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    parkingTime?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestTransportation
     */
    boardingTime?: number;
}

/**
 * @export
 * @namespace RequestTransportation
 */
export namespace RequestTransportation {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Cycling = 'cycling',
        Driving = 'driving',
        Drivingtrain = 'driving+train',
        PublicTransport = 'public_transport',
        Walking = 'walking',
        Coach = 'coach',
        Bus = 'bus',
        Train = 'train',
        Ferry = 'ferry',
        Drivingferry = 'driving+ferry',
        Cyclingferry = 'cycling+ferry'
    }
}

/**
 * 
 * @export
 * @interface RequestTransportationFast
 */
export interface RequestTransportationFast {
    /**
     * 
     * @type {string}
     * @memberof RequestTransportationFast
     */
    type: RequestTransportationFast.TypeEnum;
}

/**
 * @export
 * @namespace RequestTransportationFast
 */
export namespace RequestTransportationFast {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        PublicTransport = 'public_transport',
        Driving = 'driving',
        DrivingpublicTransport = 'driving+public_transport'
    }
}

/**
 * 
 * @export
 * @interface RequestUnionOnIntersection
 */
export interface RequestUnionOnIntersection {
    /**
     * 
     * @type {string}
     * @memberof RequestUnionOnIntersection
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestUnionOnIntersection
     */
    searchIds: Array<string>;
}

/**
 * 
 * @export
 * @interface ResponseBoundingBox
 */
export interface ResponseBoundingBox {
    /**
     * 
     * @type {ResponseBox}
     * @memberof ResponseBoundingBox
     */
    envelope: ResponseBox;
    /**
     * 
     * @type {Array<ResponseBox>}
     * @memberof ResponseBoundingBox
     */
    boxes: Array<ResponseBox>;
}

/**
 * 
 * @export
 * @interface ResponseBox
 */
export interface ResponseBox {
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    minLat: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    maxLat: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    minLng: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBox
     */
    maxLng: number;
}

/**
 * 
 * @export
 * @interface ResponseDistanceBreakdownItem
 */
export interface ResponseDistanceBreakdownItem {
    /**
     * 
     * @type {ResponseTransportationMode}
     * @memberof ResponseDistanceBreakdownItem
     */
    mode: ResponseTransportationMode;
    /**
     * 
     * @type {number}
     * @memberof ResponseDistanceBreakdownItem
     */
    distance: number;
}

/**
 * 
 * @export
 * @interface ResponseError
 */
export interface ResponseError {
    /**
     * 
     * @type {number}
     * @memberof ResponseError
     */
    httpStatus?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseError
     */
    errorCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseError
     */
    documentationLink?: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ResponseError
     */
    additionalInfo?: { [key: string]: Array<string>; };
}

/**
 * 
 * @export
 * @interface ResponseFareTicket
 */
export interface ResponseFareTicket {
    /**
     * 
     * @type {string}
     * @memberof ResponseFareTicket
     */
    type: ResponseFareTicket.TypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ResponseFareTicket
     */
    price: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseFareTicket
     */
    currency: string;
}

/**
 * @export
 * @namespace ResponseFareTicket
 */
export namespace ResponseFareTicket {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Single = 'single',
        Week = 'week',
        Month = 'month',
        Year = 'year'
    }
}

/**
 * 
 * @export
 * @interface ResponseFares
 */
export interface ResponseFares {
    /**
     * 
     * @type {Array<ResponseFaresBreakdownItem>}
     * @memberof ResponseFares
     */
    breakdown: Array<ResponseFaresBreakdownItem>;
    /**
     * 
     * @type {Array<ResponseFareTicket>}
     * @memberof ResponseFares
     */
    ticketsTotal: Array<ResponseFareTicket>;
}

/**
 * 
 * @export
 * @interface ResponseFaresBreakdownItem
 */
export interface ResponseFaresBreakdownItem {
    /**
     * 
     * @type {Array<ResponseTransportationMode>}
     * @memberof ResponseFaresBreakdownItem
     */
    modes: Array<ResponseTransportationMode>;
    /**
     * 
     * @type {Array<number>}
     * @memberof ResponseFaresBreakdownItem
     */
    routePartIds: Array<number>;
    /**
     * 
     * @type {Array<ResponseFareTicket>}
     * @memberof ResponseFaresBreakdownItem
     */
    tickets: Array<ResponseFareTicket>;
}

/**
 * 
 * @export
 * @interface ResponseFaresFast
 */
export interface ResponseFaresFast {
    /**
     * 
     * @type {Array<ResponseFareTicket>}
     * @memberof ResponseFaresFast
     */
    ticketsTotal: Array<ResponseFareTicket>;
}

/**
 * 
 * @export
 * @interface ResponseGeocoding
 */
export interface ResponseGeocoding {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocoding
     */
    type: string;
    /**
     * 
     * @type {Array<ResponseGeocodingGeoJsonFeature>}
     * @memberof ResponseGeocoding
     */
    features: Array<ResponseGeocodingGeoJsonFeature>;
}

/**
 * 
 * @export
 * @interface ResponseGeocodingGeoJsonFeature
 */
export interface ResponseGeocodingGeoJsonFeature {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    type: string;
    /**
     * 
     * @type {ResponseGeocodingGeometry}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    geometry: ResponseGeocodingGeometry;
    /**
     * 
     * @type {ResponseGeocodingProperties}
     * @memberof ResponseGeocodingGeoJsonFeature
     */
    properties: ResponseGeocodingProperties;
}

/**
 * 
 * @export
 * @interface ResponseGeocodingGeometry
 */
export interface ResponseGeocodingGeometry {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingGeometry
     */
    type: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ResponseGeocodingGeometry
     */
    coordinates: Array<number>;
}

/**
 * 
 * @export
 * @interface ResponseGeocodingProperties
 */
export interface ResponseGeocodingProperties {
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    label: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseGeocodingProperties
     */
    score?: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    houseNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    street?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    region?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    regionCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    neighbourhood?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    county?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    macroregion?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    city?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    countryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    continent?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGeocodingProperties
     */
    postcode?: string;
    /**
     * 
     * @type {ResponseMapInfoFeatures}
     * @memberof ResponseGeocodingProperties
     */
    features?: ResponseMapInfoFeatures;
}

/**
 * 
 * @export
 * @interface ResponseMapInfo
 */
export interface ResponseMapInfo {
    /**
     * 
     * @type {Array<ResponseMapInfoMap>}
     * @memberof ResponseMapInfo
     */
    maps: Array<ResponseMapInfoMap>;
}

/**
 * 
 * @export
 * @interface ResponseMapInfoFeatures
 */
export interface ResponseMapInfoFeatures {
    /**
     * 
     * @type {ResponseMapInfoFeaturesPublicTransport}
     * @memberof ResponseMapInfoFeatures
     */
    publicTransport?: ResponseMapInfoFeaturesPublicTransport;
    /**
     * 
     * @type {boolean}
     * @memberof ResponseMapInfoFeatures
     */
    fares: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ResponseMapInfoFeatures
     */
    postcodes: boolean;
}

/**
 * 
 * @export
 * @interface ResponseMapInfoFeaturesPublicTransport
 */
export interface ResponseMapInfoFeaturesPublicTransport {
    /**
     * 
     * @type {Date}
     * @memberof ResponseMapInfoFeaturesPublicTransport
     */
    dateStart: Date;
    /**
     * 
     * @type {Date}
     * @memberof ResponseMapInfoFeaturesPublicTransport
     */
    dateEnd: Date;
}

/**
 * 
 * @export
 * @interface ResponseMapInfoMap
 */
export interface ResponseMapInfoMap {
    /**
     * 
     * @type {string}
     * @memberof ResponseMapInfoMap
     */
    name: string;
    /**
     * 
     * @type {ResponseMapInfoFeatures}
     * @memberof ResponseMapInfoMap
     */
    features: ResponseMapInfoFeatures;
}

/**
 * 
 * @export
 * @interface ResponseRoute
 */
export interface ResponseRoute {
    /**
     * 
     * @type {Date}
     * @memberof ResponseRoute
     */
    departureTime: Date;
    /**
     * 
     * @type {Date}
     * @memberof ResponseRoute
     */
    arrivalTime: Date;
    /**
     * 
     * @type {Array<ResponseRoutePart>}
     * @memberof ResponseRoute
     */
    parts: Array<ResponseRoutePart>;
}

/**
 * 
 * @export
 * @interface ResponseRoutePart
 */
export interface ResponseRoutePart {
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    type: ResponseRoutePart.TypeEnum;
    /**
     * 
     * @type {ResponseTransportationMode}
     * @memberof ResponseRoutePart
     */
    mode: ResponseTransportationMode;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    directions: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutePart
     */
    distance: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutePart
     */
    travelTime: number;
    /**
     * 
     * @type {Array<Coords>}
     * @memberof ResponseRoutePart
     */
    coords: Array<Coords>;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    direction?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    road?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    turn?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    line?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    departureStation?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    arrivalStation?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    departsAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutePart
     */
    arrivesAt?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutePart
     */
    numStops?: number;
}

/**
 * @export
 * @namespace ResponseRoutePart
 */
export namespace ResponseRoutePart {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Basic = 'basic',
        StartEnd = 'start_end',
        Road = 'road',
        PublicTransport = 'public_transport'
    }
}

/**
 * 
 * @export
 * @interface ResponseRoutes
 */
export interface ResponseRoutes {
    /**
     * 
     * @type {Array<ResponseRoutesResult>}
     * @memberof ResponseRoutes
     */
    results: Array<ResponseRoutesResult>;
}

/**
 * 
 * @export
 * @interface ResponseRoutesLocation
 */
export interface ResponseRoutesLocation {
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutesLocation
     */
    id: string;
    /**
     * 
     * @type {Array<ResponseRoutesProperties>}
     * @memberof ResponseRoutesLocation
     */
    properties: Array<ResponseRoutesProperties>;
}

/**
 * 
 * @export
 * @interface ResponseRoutesProperties
 */
export interface ResponseRoutesProperties {
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutesProperties
     */
    travelTime?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseRoutesProperties
     */
    distance?: number;
    /**
     * 
     * @type {ResponseFares}
     * @memberof ResponseRoutesProperties
     */
    fares?: ResponseFares;
    /**
     * 
     * @type {ResponseRoute}
     * @memberof ResponseRoutesProperties
     */
    route?: ResponseRoute;
}

/**
 * 
 * @export
 * @interface ResponseRoutesResult
 */
export interface ResponseRoutesResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseRoutesResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseRoutesLocation>}
     * @memberof ResponseRoutesResult
     */
    locations: Array<ResponseRoutesLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseRoutesResult
     */
    unreachable: Array<string>;
}

/**
 * 
 * @export
 * @interface ResponseShape
 */
export interface ResponseShape {
    /**
     * 
     * @type {Array<Coords>}
     * @memberof ResponseShape
     */
    shell: Array<Coords>;
    /**
     * 
     * @type {Array<Array<Coords>>}
     * @memberof ResponseShape
     */
    holes: Array<Array<Coords>>;
}

/**
 * 
 * @export
 * @interface ResponseSupportedLocation
 */
export interface ResponseSupportedLocation {
    /**
     * 
     * @type {string}
     * @memberof ResponseSupportedLocation
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseSupportedLocation
     */
    mapName: string;
}

/**
 * 
 * @export
 * @interface ResponseSupportedLocations
 */
export interface ResponseSupportedLocations {
    /**
     * 
     * @type {Array<ResponseSupportedLocation>}
     * @memberof ResponseSupportedLocations
     */
    locations: Array<ResponseSupportedLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseSupportedLocations
     */
    unsupportedLocations: Array<string>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilter
 */
export interface ResponseTimeFilter {
    /**
     * 
     * @type {Array<ResponseTimeFilterResult>}
     * @memberof ResponseTimeFilter
     */
    results: Array<ResponseTimeFilterResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterFast
 */
export interface ResponseTimeFilterFast {
    /**
     * 
     * @type {Array<ResponseTimeFilterFastResult>}
     * @memberof ResponseTimeFilterFast
     */
    results: Array<ResponseTimeFilterFastResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterFastLocation
 */
export interface ResponseTimeFilterFastLocation {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterFastLocation
     */
    id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterFastProperties>}
     * @memberof ResponseTimeFilterFastLocation
     */
    properties: Array<ResponseTimeFilterFastProperties>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterFastProperties
 */
export interface ResponseTimeFilterFastProperties {
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterFastProperties
     */
    travelTime?: number;
    /**
     * 
     * @type {ResponseFaresFast}
     * @memberof ResponseTimeFilterFastProperties
     */
    fares?: ResponseFaresFast;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterFastResult
 */
export interface ResponseTimeFilterFastResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterFastResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterFastLocation>}
     * @memberof ResponseTimeFilterFastResult
     */
    locations: Array<ResponseTimeFilterFastLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseTimeFilterFastResult
     */
    unreachable: Array<string>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterLocation
 */
export interface ResponseTimeFilterLocation {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterLocation
     */
    id: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterProperties>}
     * @memberof ResponseTimeFilterLocation
     */
    properties: Array<ResponseTimeFilterProperties>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcode
 */
export interface ResponseTimeFilterPostcode {
    /**
     * 
     * @type {ModelString}
     * @memberof ResponseTimeFilterPostcode
     */
    code: ModelString;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodesProperties>}
     * @memberof ResponseTimeFilterPostcode
     */
    properties: Array<ResponseTimeFilterPostcodesProperties>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeDistrict
 */
export interface ResponseTimeFilterPostcodeDistrict {
    /**
     * 
     * @type {ModelString}
     * @memberof ResponseTimeFilterPostcodeDistrict
     */
    code: ModelString;
    /**
     * 
     * @type {ResponseTimeFilterPostcodeDistrictProperties}
     * @memberof ResponseTimeFilterPostcodeDistrict
     */
    properties: ResponseTimeFilterPostcodeDistrictProperties;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeDistrictProperties
 */
export interface ResponseTimeFilterPostcodeDistrictProperties {
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeDistrictProperties
     */
    travelTimeReachable?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeDistrictProperties
     */
    travelTimeAll?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodeDistrictProperties
     */
    coverage?: number;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeDistricts
 */
export interface ResponseTimeFilterPostcodeDistricts {
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeDistrictsResult>}
     * @memberof ResponseTimeFilterPostcodeDistricts
     */
    results: Array<ResponseTimeFilterPostcodeDistrictsResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeDistrictsResult
 */
export interface ResponseTimeFilterPostcodeDistrictsResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodeDistrictsResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeDistrict>}
     * @memberof ResponseTimeFilterPostcodeDistrictsResult
     */
    districts: Array<ResponseTimeFilterPostcodeDistrict>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeSector
 */
export interface ResponseTimeFilterPostcodeSector {
    /**
     * 
     * @type {ModelString}
     * @memberof ResponseTimeFilterPostcodeSector
     */
    code: ModelString;
    /**
     * 
     * @type {ResponseTimeFilterPostcodeSectorProperties}
     * @memberof ResponseTimeFilterPostcodeSector
     */
    properties: ResponseTimeFilterPostcodeSectorProperties;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeSectorProperties
 */
export interface ResponseTimeFilterPostcodeSectorProperties {
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeSectorProperties
     */
    travelTimeReachable?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {ResponseTravelTimeStatistics}
     * @memberof ResponseTimeFilterPostcodeSectorProperties
     */
    travelTimeAll?: ResponseTravelTimeStatistics;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodeSectorProperties
     */
    coverage?: number;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeSectors
 */
export interface ResponseTimeFilterPostcodeSectors {
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeSectorsResult>}
     * @memberof ResponseTimeFilterPostcodeSectors
     */
    results: Array<ResponseTimeFilterPostcodeSectorsResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodeSectorsResult
 */
export interface ResponseTimeFilterPostcodeSectorsResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodeSectorsResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodeSector>}
     * @memberof ResponseTimeFilterPostcodeSectorsResult
     */
    sectors: Array<ResponseTimeFilterPostcodeSector>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodes
 */
export interface ResponseTimeFilterPostcodes {
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcodesResult>}
     * @memberof ResponseTimeFilterPostcodes
     */
    results: Array<ResponseTimeFilterPostcodesResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodesProperties
 */
export interface ResponseTimeFilterPostcodesProperties {
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodesProperties
     */
    travelTime?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterPostcodesProperties
     */
    distance?: number;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterPostcodesResult
 */
export interface ResponseTimeFilterPostcodesResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterPostcodesResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterPostcode>}
     * @memberof ResponseTimeFilterPostcodesResult
     */
    postcodes: Array<ResponseTimeFilterPostcode>;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterProperties
 */
export interface ResponseTimeFilterProperties {
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterProperties
     */
    travelTime?: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTimeFilterProperties
     */
    distance?: number;
    /**
     * 
     * @type {Array<ResponseDistanceBreakdownItem>}
     * @memberof ResponseTimeFilterProperties
     */
    distanceBreakdown?: Array<ResponseDistanceBreakdownItem>;
    /**
     * 
     * @type {ResponseFares}
     * @memberof ResponseTimeFilterProperties
     */
    fares?: ResponseFares;
    /**
     * 
     * @type {ResponseRoute}
     * @memberof ResponseTimeFilterProperties
     */
    route?: ResponseRoute;
}

/**
 * 
 * @export
 * @interface ResponseTimeFilterResult
 */
export interface ResponseTimeFilterResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeFilterResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseTimeFilterLocation>}
     * @memberof ResponseTimeFilterResult
     */
    locations: Array<ResponseTimeFilterLocation>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ResponseTimeFilterResult
     */
    unreachable: Array<string>;
}

/**
 * 
 * @export
 * @interface ResponseTimeMap
 */
export interface ResponseTimeMap {
    /**
     * 
     * @type {Array<ResponseTimeMapResult>}
     * @memberof ResponseTimeMap
     */
    results: Array<ResponseTimeMapResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeMapBoundingBoxes
 */
export interface ResponseTimeMapBoundingBoxes {
    /**
     * 
     * @type {Array<ResponseTimeMapBoundingBoxesResult>}
     * @memberof ResponseTimeMapBoundingBoxes
     */
    results: Array<ResponseTimeMapBoundingBoxesResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeMapBoundingBoxesResult
 */
export interface ResponseTimeMapBoundingBoxesResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapBoundingBoxesResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseBoundingBox>}
     * @memberof ResponseTimeMapBoundingBoxesResult
     */
    boundingBoxes: Array<ResponseBoundingBox>;
    /**
     * 
     * @type {ResponseTimeMapProperties}
     * @memberof ResponseTimeMapBoundingBoxesResult
     */
    properties: ResponseTimeMapProperties;
}

/**
 * 
 * @export
 * @interface ResponseTimeMapProperties
 */
export interface ResponseTimeMapProperties {
    /**
     * 
     * @type {boolean}
     * @memberof ResponseTimeMapProperties
     */
    isOnlyWalking?: boolean;
}

/**
 * 
 * @export
 * @interface ResponseTimeMapResult
 */
export interface ResponseTimeMapResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapResult
     */
    searchId: string;
    /**
     * 
     * @type {Array<ResponseShape>}
     * @memberof ResponseTimeMapResult
     */
    shapes: Array<ResponseShape>;
    /**
     * 
     * @type {ResponseTimeMapProperties}
     * @memberof ResponseTimeMapResult
     */
    properties: ResponseTimeMapProperties;
}

/**
 * 
 * @export
 * @interface ResponseTimeMapWkt
 */
export interface ResponseTimeMapWkt {
    /**
     * 
     * @type {Array<ResponseTimeMapWktResult>}
     * @memberof ResponseTimeMapWkt
     */
    results: Array<ResponseTimeMapWktResult>;
}

/**
 * 
 * @export
 * @interface ResponseTimeMapWktResult
 */
export interface ResponseTimeMapWktResult {
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapWktResult
     */
    searchId: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseTimeMapWktResult
     */
    shape: string;
    /**
     * 
     * @type {ResponseTimeMapProperties}
     * @memberof ResponseTimeMapWktResult
     */
    properties: ResponseTimeMapProperties;
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum ResponseTransportationMode {
    Car = 'car',
    Parking = 'parking',
    Boarding = 'boarding',
    Walk = 'walk',
    Bike = 'bike',
    Train = 'train',
    RailNational = 'rail_national',
    RailOverground = 'rail_overground',
    RailUnderground = 'rail_underground',
    RailDlr = 'rail_dlr',
    Bus = 'bus',
    CableCar = 'cable_car',
    Plane = 'plane',
    Ferry = 'ferry',
    Coach = 'coach'
}

/**
 * 
 * @export
 * @interface ResponseTravelTimeStatistics
 */
export interface ResponseTravelTimeStatistics {
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    min: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    max: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    mean: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseTravelTimeStatistics
     */
    median: number;
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} focusLat 
         * @param {number} focusLng 
         * @param {string} [withinCountry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodingReverseSearch(focusLat: number, focusLng: number, withinCountry?: string, options: any = {}): RequestArgs {
            // verify required parameter 'focusLat' is not null or undefined
            if (focusLat === null || focusLat === undefined) {
                throw new RequiredError('focusLat','Required parameter focusLat was null or undefined when calling geocodingReverseSearch.');
            }
            // verify required parameter 'focusLng' is not null or undefined
            if (focusLng === null || focusLng === undefined) {
                throw new RequiredError('focusLng','Required parameter focusLng was null or undefined when calling geocodingReverseSearch.');
            }
            const localVarPath = `/v4/geocoding/reverse`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            if (focusLat !== undefined) {
                localVarQueryParameter['focus.lat'] = focusLat;
            }

            if (focusLng !== undefined) {
                localVarQueryParameter['focus.lng'] = focusLng;
            }

            if (withinCountry !== undefined) {
                localVarQueryParameter['within.country'] = withinCountry;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} query 
         * @param {string} [withinCountry] 
         * @param {number} [focusLat] 
         * @param {number} [focusLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodingSearch(query: string, withinCountry?: string, focusLat?: number, focusLng?: number, options: any = {}): RequestArgs {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling geocodingSearch.');
            }
            const localVarPath = `/v4/geocoding/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (withinCountry !== undefined) {
                localVarQueryParameter['within.country'] = withinCountry;
            }

            if (focusLat !== undefined) {
                localVarQueryParameter['focus.lat'] = focusLat;
            }

            if (focusLng !== undefined) {
                localVarQueryParameter['focus.lng'] = focusLng;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapInfo(options: any = {}): RequestArgs {
            const localVarPath = `/v4/map-info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestRoutes} requestRoutes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routes(requestRoutes: RequestRoutes, options: any = {}): RequestArgs {
            // verify required parameter 'requestRoutes' is not null or undefined
            if (requestRoutes === null || requestRoutes === undefined) {
                throw new RequiredError('requestRoutes','Required parameter requestRoutes was null or undefined when calling routes.');
            }
            const localVarPath = `/v4/routes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestRoutes" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestRoutes || {}) : (requestRoutes || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestSupportedLocations} requestSupportedLocations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportedLocations(requestSupportedLocations: RequestSupportedLocations, options: any = {}): RequestArgs {
            // verify required parameter 'requestSupportedLocations' is not null or undefined
            if (requestSupportedLocations === null || requestSupportedLocations === undefined) {
                throw new RequiredError('requestSupportedLocations','Required parameter requestSupportedLocations was null or undefined when calling supportedLocations.');
            }
            const localVarPath = `/v4/supported-locations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestSupportedLocations" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestSupportedLocations || {}) : (requestSupportedLocations || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestTimeFilter} requestTimeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilter(requestTimeFilter: RequestTimeFilter, options: any = {}): RequestArgs {
            // verify required parameter 'requestTimeFilter' is not null or undefined
            if (requestTimeFilter === null || requestTimeFilter === undefined) {
                throw new RequiredError('requestTimeFilter','Required parameter requestTimeFilter was null or undefined when calling timeFilter.');
            }
            const localVarPath = `/v4/time-filter`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestTimeFilter" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestTimeFilter || {}) : (requestTimeFilter || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestTimeFilterFast} requestTimeFilterFast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, options: any = {}): RequestArgs {
            // verify required parameter 'requestTimeFilterFast' is not null or undefined
            if (requestTimeFilterFast === null || requestTimeFilterFast === undefined) {
                throw new RequiredError('requestTimeFilterFast','Required parameter requestTimeFilterFast was null or undefined when calling timeFilterFast.');
            }
            const localVarPath = `/v4/time-filter/fast`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestTimeFilterFast" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestTimeFilterFast || {}) : (requestTimeFilterFast || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodeDistricts} requestTimeFilterPostcodeDistricts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, options: any = {}): RequestArgs {
            // verify required parameter 'requestTimeFilterPostcodeDistricts' is not null or undefined
            if (requestTimeFilterPostcodeDistricts === null || requestTimeFilterPostcodeDistricts === undefined) {
                throw new RequiredError('requestTimeFilterPostcodeDistricts','Required parameter requestTimeFilterPostcodeDistricts was null or undefined when calling timeFilterPostcodeDistricts.');
            }
            const localVarPath = `/v4/time-filter/postcode-districts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestTimeFilterPostcodeDistricts" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestTimeFilterPostcodeDistricts || {}) : (requestTimeFilterPostcodeDistricts || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodeSectors} requestTimeFilterPostcodeSectors 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, options: any = {}): RequestArgs {
            // verify required parameter 'requestTimeFilterPostcodeSectors' is not null or undefined
            if (requestTimeFilterPostcodeSectors === null || requestTimeFilterPostcodeSectors === undefined) {
                throw new RequiredError('requestTimeFilterPostcodeSectors','Required parameter requestTimeFilterPostcodeSectors was null or undefined when calling timeFilterPostcodeSectors.');
            }
            const localVarPath = `/v4/time-filter/postcode-sectors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestTimeFilterPostcodeSectors" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestTimeFilterPostcodeSectors || {}) : (requestTimeFilterPostcodeSectors || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodes} requestTimeFilterPostcodes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, options: any = {}): RequestArgs {
            // verify required parameter 'requestTimeFilterPostcodes' is not null or undefined
            if (requestTimeFilterPostcodes === null || requestTimeFilterPostcodes === undefined) {
                throw new RequiredError('requestTimeFilterPostcodes','Required parameter requestTimeFilterPostcodes was null or undefined when calling timeFilterPostcodes.');
            }
            const localVarPath = `/v4/time-filter/postcodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestTimeFilterPostcodes" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestTimeFilterPostcodes || {}) : (requestTimeFilterPostcodes || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RequestTimeMap} requestTimeMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeMap(requestTimeMap: RequestTimeMap, options: any = {}): RequestArgs {
            // verify required parameter 'requestTimeMap' is not null or undefined
            if (requestTimeMap === null || requestTimeMap === undefined) {
                throw new RequiredError('requestTimeMap','Required parameter requestTimeMap was null or undefined when calling timeMap.');
            }
            const localVarPath = `/v4/time-map`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Api-Key")
					: configuration.apiKey;
                localVarHeaderParameter["X-Api-Key"] = localVarApiKeyValue;
            }

            // authentication ApplicationId required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("X-Application-Id")
					: configuration.apiKey;
                localVarHeaderParameter["X-Application-Id"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RequestTimeMap" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestTimeMap || {}) : (requestTimeMap || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} focusLat 
         * @param {number} focusLng 
         * @param {string} [withinCountry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodingReverseSearch(focusLat: number, focusLng: number, withinCountry?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGeocoding> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).geocodingReverseSearch(focusLat, focusLng, withinCountry, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {string} query 
         * @param {string} [withinCountry] 
         * @param {number} [focusLat] 
         * @param {number} [focusLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodingSearch(query: string, withinCountry?: string, focusLat?: number, focusLng?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGeocoding> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).geocodingSearch(query, withinCountry, focusLat, focusLng, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapInfo(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseMapInfo> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).mapInfo(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestRoutes} requestRoutes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routes(requestRoutes: RequestRoutes, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseRoutes> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).routes(requestRoutes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestSupportedLocations} requestSupportedLocations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportedLocations(requestSupportedLocations: RequestSupportedLocations, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseSupportedLocations> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).supportedLocations(requestSupportedLocations, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestTimeFilter} requestTimeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilter(requestTimeFilter: RequestTimeFilter, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTimeFilter> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).timeFilter(requestTimeFilter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestTimeFilterFast} requestTimeFilterFast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTimeFilterFast> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).timeFilterFast(requestTimeFilterFast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodeDistricts} requestTimeFilterPostcodeDistricts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTimeFilterPostcodeDistricts> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodeSectors} requestTimeFilterPostcodeSectors 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTimeFilterPostcodeSectors> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodes} requestTimeFilterPostcodes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTimeFilterPostcodes> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).timeFilterPostcodes(requestTimeFilterPostcodes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @param {RequestTimeMap} requestTimeMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeMap(requestTimeMap: RequestTimeMap, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseTimeMap> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).timeMap(requestTimeMap, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} focusLat 
         * @param {number} focusLng 
         * @param {string} [withinCountry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodingReverseSearch(focusLat: number, focusLng: number, withinCountry?: string, options?: any) {
            return DefaultApiFp(configuration).geocodingReverseSearch(focusLat, focusLng, withinCountry, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} query 
         * @param {string} [withinCountry] 
         * @param {number} [focusLat] 
         * @param {number} [focusLng] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        geocodingSearch(query: string, withinCountry?: string, focusLat?: number, focusLng?: number, options?: any) {
            return DefaultApiFp(configuration).geocodingSearch(query, withinCountry, focusLat, focusLng, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mapInfo(options?: any) {
            return DefaultApiFp(configuration).mapInfo(options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestRoutes} requestRoutes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routes(requestRoutes: RequestRoutes, options?: any) {
            return DefaultApiFp(configuration).routes(requestRoutes, options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestSupportedLocations} requestSupportedLocations 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportedLocations(requestSupportedLocations: RequestSupportedLocations, options?: any) {
            return DefaultApiFp(configuration).supportedLocations(requestSupportedLocations, options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestTimeFilter} requestTimeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilter(requestTimeFilter: RequestTimeFilter, options?: any) {
            return DefaultApiFp(configuration).timeFilter(requestTimeFilter, options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestTimeFilterFast} requestTimeFilterFast 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, options?: any) {
            return DefaultApiFp(configuration).timeFilterFast(requestTimeFilterFast, options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodeDistricts} requestTimeFilterPostcodeDistricts 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, options?: any) {
            return DefaultApiFp(configuration).timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts, options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodeSectors} requestTimeFilterPostcodeSectors 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, options?: any) {
            return DefaultApiFp(configuration).timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors, options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestTimeFilterPostcodes} requestTimeFilterPostcodes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, options?: any) {
            return DefaultApiFp(configuration).timeFilterPostcodes(requestTimeFilterPostcodes, options)(axios, basePath);
        },
        /**
         * 
         * @param {RequestTimeMap} requestTimeMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timeMap(requestTimeMap: RequestTimeMap, options?: any) {
            return DefaultApiFp(configuration).timeMap(requestTimeMap, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {number} focusLat 
     * @param {number} focusLng 
     * @param {string} [withinCountry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public geocodingReverseSearch(focusLat: number, focusLng: number, withinCountry?: string, options?: any) {
        return DefaultApiFp(this.configuration).geocodingReverseSearch(focusLat, focusLng, withinCountry, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} query 
     * @param {string} [withinCountry] 
     * @param {number} [focusLat] 
     * @param {number} [focusLng] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public geocodingSearch(query: string, withinCountry?: string, focusLat?: number, focusLng?: number, options?: any) {
        return DefaultApiFp(this.configuration).geocodingSearch(query, withinCountry, focusLat, focusLng, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mapInfo(options?: any) {
        return DefaultApiFp(this.configuration).mapInfo(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestRoutes} requestRoutes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public routes(requestRoutes: RequestRoutes, options?: any) {
        return DefaultApiFp(this.configuration).routes(requestRoutes, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestSupportedLocations} requestSupportedLocations 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public supportedLocations(requestSupportedLocations: RequestSupportedLocations, options?: any) {
        return DefaultApiFp(this.configuration).supportedLocations(requestSupportedLocations, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestTimeFilter} requestTimeFilter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timeFilter(requestTimeFilter: RequestTimeFilter, options?: any) {
        return DefaultApiFp(this.configuration).timeFilter(requestTimeFilter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestTimeFilterFast} requestTimeFilterFast 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timeFilterFast(requestTimeFilterFast: RequestTimeFilterFast, options?: any) {
        return DefaultApiFp(this.configuration).timeFilterFast(requestTimeFilterFast, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestTimeFilterPostcodeDistricts} requestTimeFilterPostcodeDistricts 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts, options?: any) {
        return DefaultApiFp(this.configuration).timeFilterPostcodeDistricts(requestTimeFilterPostcodeDistricts, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestTimeFilterPostcodeSectors} requestTimeFilterPostcodeSectors 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors, options?: any) {
        return DefaultApiFp(this.configuration).timeFilterPostcodeSectors(requestTimeFilterPostcodeSectors, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestTimeFilterPostcodes} requestTimeFilterPostcodes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timeFilterPostcodes(requestTimeFilterPostcodes: RequestTimeFilterPostcodes, options?: any) {
        return DefaultApiFp(this.configuration).timeFilterPostcodes(requestTimeFilterPostcodes, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RequestTimeMap} requestTimeMap 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public timeMap(requestTimeMap: RequestTimeMap, options?: any) {
        return DefaultApiFp(this.configuration).timeMap(requestTimeMap, options)(this.axios, this.basePath);
    }

}

