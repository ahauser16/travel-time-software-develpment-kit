/*
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace traveltimeplatform.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ResponseDistanceBreakdownItem : IEquatable<ResponseDistanceBreakdownItem>
    { 
        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResponseTransportationMode
        {
            
            /// <summary>
            /// Enum CarEnum for car
            /// </summary>
            [EnumMember(Value = "car")]
            CarEnum = 1,
            
            /// <summary>
            /// Enum ParkingEnum for parking
            /// </summary>
            [EnumMember(Value = "parking")]
            ParkingEnum = 2,
            
            /// <summary>
            /// Enum BoardingEnum for boarding
            /// </summary>
            [EnumMember(Value = "boarding")]
            BoardingEnum = 3,
            
            /// <summary>
            /// Enum WalkEnum for walk
            /// </summary>
            [EnumMember(Value = "walk")]
            WalkEnum = 4,
            
            /// <summary>
            /// Enum BikeEnum for bike
            /// </summary>
            [EnumMember(Value = "bike")]
            BikeEnum = 5,
            
            /// <summary>
            /// Enum TrainEnum for train
            /// </summary>
            [EnumMember(Value = "train")]
            TrainEnum = 6,
            
            /// <summary>
            /// Enum RailNationalEnum for rail_national
            /// </summary>
            [EnumMember(Value = "rail_national")]
            RailNationalEnum = 7,
            
            /// <summary>
            /// Enum RailOvergroundEnum for rail_overground
            /// </summary>
            [EnumMember(Value = "rail_overground")]
            RailOvergroundEnum = 8,
            
            /// <summary>
            /// Enum RailUndergroundEnum for rail_underground
            /// </summary>
            [EnumMember(Value = "rail_underground")]
            RailUndergroundEnum = 9,
            
            /// <summary>
            /// Enum RailDlrEnum for rail_dlr
            /// </summary>
            [EnumMember(Value = "rail_dlr")]
            RailDlrEnum = 10,
            
            /// <summary>
            /// Enum BusEnum for bus
            /// </summary>
            [EnumMember(Value = "bus")]
            BusEnum = 11,
            
            /// <summary>
            /// Enum CableCarEnum for cable_car
            /// </summary>
            [EnumMember(Value = "cable_car")]
            CableCarEnum = 12,
            
            /// <summary>
            /// Enum PlaneEnum for plane
            /// </summary>
            [EnumMember(Value = "plane")]
            PlaneEnum = 13,
            
            /// <summary>
            /// Enum FerryEnum for ferry
            /// </summary>
            [EnumMember(Value = "ferry")]
            FerryEnum = 14,
            
            /// <summary>
            /// Enum CoachEnum for coach
            /// </summary>
            [EnumMember(Value = "coach")]
            CoachEnum = 15
        }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [Required]
        [DataMember(Name="mode")]
        public ResponseTransportationMode? Mode { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [Required]
        [DataMember(Name="distance")]
        public int? Distance { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseDistanceBreakdownItem {\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ResponseDistanceBreakdownItem)obj);
        }

        /// <summary>
        /// Returns true if ResponseDistanceBreakdownItem instances are equal
        /// </summary>
        /// <param name="other">Instance of ResponseDistanceBreakdownItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseDistanceBreakdownItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    Distance == other.Distance ||
                    Distance != null &&
                    Distance.Equals(other.Distance)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (Distance != null)
                    hashCode = hashCode * 59 + Distance.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ResponseDistanceBreakdownItem left, ResponseDistanceBreakdownItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResponseDistanceBreakdownItem left, ResponseDistanceBreakdownItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
