# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from traveltimeplatform.models.base_model_ import Model
from traveltimeplatform import util


class RequestRangeNoMaxResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled=None, width=None):  # noqa: E501
        """RequestRangeNoMaxResults - a model defined in OpenAPI

        :param enabled: The enabled of this RequestRangeNoMaxResults.  # noqa: E501
        :type enabled: bool
        :param width: The width of this RequestRangeNoMaxResults.  # noqa: E501
        :type width: int
        """
        self.openapi_types = {
            'enabled': bool,
            'width': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'width': 'width'
        }

        self._enabled = enabled
        self._width = width

    @classmethod
    def from_dict(cls, dikt) -> 'RequestRangeNoMaxResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestRangeNoMaxResults of this RequestRangeNoMaxResults.  # noqa: E501
        :rtype: RequestRangeNoMaxResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this RequestRangeNoMaxResults.


        :return: The enabled of this RequestRangeNoMaxResults.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RequestRangeNoMaxResults.


        :param enabled: The enabled of this RequestRangeNoMaxResults.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def width(self):
        """Gets the width of this RequestRangeNoMaxResults.


        :return: The width of this RequestRangeNoMaxResults.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this RequestRangeNoMaxResults.


        :param width: The width of this RequestRangeNoMaxResults.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501
        if width is not None and width > 43200:  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value less than or equal to `43200`")  # noqa: E501
        if width is not None and width < 1:  # noqa: E501
            raise ValueError("Invalid value for `width`, must be a value greater than or equal to `1`")  # noqa: E501

        self._width = width
