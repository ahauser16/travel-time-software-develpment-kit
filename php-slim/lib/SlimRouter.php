<?php
/**
 * SlimRouter
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer;

use OpenAPIServer\Api\DefaultApi;
use Slim\App;
use Psr\Container\ContainerInterface;
use InvalidArgumentException;
use Tuupola\Middleware\HttpBasicAuthentication;

/**
 * SlimRouter Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class SlimRouter
{

    /**
     * @var $slimApp Slim\App instance
     */
    private $slimApp;

    /**
     * Class constructor
     *
     * @param ContainerInterface|array $container Either a ContainerInterface or an associative array of app settings
     * @throws InvalidArgumentException when no container is provided that implements ContainerInterface
     */
    public function __construct($container = [])
    {
        $app = new App($container);

        $basicAuth = new HttpBasicAuthentication([
            "secure" => false,
            "authenticator" => function ($arguments) {
                $user = $arguments["user"];
                $password = $arguments["password"];
                return false;
            }
        ]);

        $app->GET(
            '/v4/geocoding/reverse',
            DefaultApi::class . ':geocodingReverseSearch'
        );
        $app->GET(
            '/v4/geocoding/search',
            DefaultApi::class . ':geocodingSearch'
        );
        $app->GET(
            '/v4/map-info',
            DefaultApi::class . ':mapInfo'
        );
        $app->POST(
            '/v4/routes',
            DefaultApi::class . ':routes'
        );
        $app->POST(
            '/v4/supported-locations',
            DefaultApi::class . ':supportedLocations'
        );
        $app->POST(
            '/v4/time-filter',
            DefaultApi::class . ':timeFilter'
        );
        $app->POST(
            '/v4/time-filter/fast',
            DefaultApi::class . ':timeFilterFast'
        );
        $app->POST(
            '/v4/time-filter/postcode-districts',
            DefaultApi::class . ':timeFilterPostcodeDistricts'
        );
        $app->POST(
            '/v4/time-filter/postcode-sectors',
            DefaultApi::class . ':timeFilterPostcodeSectors'
        );
        $app->POST(
            '/v4/time-filter/postcodes',
            DefaultApi::class . ':timeFilterPostcodes'
        );
        $app->POST(
            '/v4/time-map',
            DefaultApi::class . ':timeMap'
        );

        $this->slimApp = $app;
    }

    /**
     * Returns Slim Framework instance
     * @return App
     */
    public function getSlimApp()
    {
        return $this->slimApp;
    }
}
