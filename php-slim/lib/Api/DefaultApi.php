<?php
/**
 * DefaultApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */
namespace OpenAPIServer\Api;

use OpenAPIServer\AbstractApiController;

/**
 * DefaultApi Class Doc Comment
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPIServer\Api
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */
class DefaultApi extends AbstractApiController
{

    /**
     * GET geocodingReverseSearch
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function geocodingReverseSearch($request, $response, $args)
    {
        $queryParams = $request->getQueryParams();
        $focusLat = $request->getQueryParam('focus.lat');
        $focusLng = $request->getQueryParam('focus.lng');
        $withinCountry = $request->getQueryParam('within.country');
        $response->write('How about implementing geocodingReverseSearch as a GET method ?');
        return $response;
    }

    /**
     * GET geocodingSearch
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function geocodingSearch($request, $response, $args)
    {
        $queryParams = $request->getQueryParams();
        $query = $request->getQueryParam('query');
        $withinCountry = $request->getQueryParam('within.country');
        $focusLat = $request->getQueryParam('focus.lat');
        $focusLng = $request->getQueryParam('focus.lng');
        $response->write('How about implementing geocodingSearch as a GET method ?');
        return $response;
    }

    /**
     * GET mapInfo
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function mapInfo($request, $response, $args)
    {
        $response->write('How about implementing mapInfo as a GET method ?');
        return $response;
    }

    /**
     * POST routes
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function routes($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing routes as a POST method ?');
        return $response;
    }

    /**
     * POST supportedLocations
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function supportedLocations($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing supportedLocations as a POST method ?');
        return $response;
    }

    /**
     * POST timeFilter
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function timeFilter($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing timeFilter as a POST method ?');
        return $response;
    }

    /**
     * POST timeFilterFast
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function timeFilterFast($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing timeFilterFast as a POST method ?');
        return $response;
    }

    /**
     * POST timeFilterPostcodeDistricts
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function timeFilterPostcodeDistricts($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing timeFilterPostcodeDistricts as a POST method ?');
        return $response;
    }

    /**
     * POST timeFilterPostcodeSectors
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function timeFilterPostcodeSectors($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing timeFilterPostcodeSectors as a POST method ?');
        return $response;
    }

    /**
     * POST timeFilterPostcodes
     * Output-Formats: [application/json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function timeFilterPostcodes($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing timeFilterPostcodes as a POST method ?');
        return $response;
    }

    /**
     * POST timeMap
     * Output-Formats: [application/json, application/vnd.wkt+json, application/vnd.wkt-no-holes+json, application/vnd.bounding-boxes+json]
     *
     * @param \Psr\Http\Message\ServerRequestInterface $request  Request
     * @param \Psr\Http\Message\ResponseInterface      $response Response
     * @param array|null                               $args     Path arguments
     */
    public function timeMap($request, $response, $args)
    {
        $body = $request->getParsedBody();
        $response->write('How about implementing timeMap as a POST method ?');
        return $response;
    }
}
