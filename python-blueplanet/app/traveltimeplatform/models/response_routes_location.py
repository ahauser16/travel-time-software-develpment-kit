# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.traveltimeplatform.models.base_model_ import Model
from app.traveltimeplatform.models.response_routes_properties import ResponseRoutesProperties  # noqa: F401,E501
from traveltimeplatform import util


class ResponseRoutesLocation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, properties: List[ResponseRoutesProperties]=None):  # noqa: E501
        """ResponseRoutesLocation - a model defined in Swagger

        :param id: The id of this ResponseRoutesLocation.  # noqa: E501
        :type id: str
        :param properties: The properties of this ResponseRoutesLocation.  # noqa: E501
        :type properties: List[ResponseRoutesProperties]
        """
        self.swagger_types = {
            'id': str,
            'properties': List[ResponseRoutesProperties]
        }

        self.attribute_map = {
            'id': 'id',
            'properties': 'properties'
        }

        self._id = id
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseRoutesLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseRoutesLocation of this ResponseRoutesLocation.  # noqa: E501
        :rtype: ResponseRoutesLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ResponseRoutesLocation.


        :return: The id of this ResponseRoutesLocation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ResponseRoutesLocation.


        :param id: The id of this ResponseRoutesLocation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def properties(self) -> List[ResponseRoutesProperties]:
        """Gets the properties of this ResponseRoutesLocation.


        :return: The properties of this ResponseRoutesLocation.
        :rtype: List[ResponseRoutesProperties]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[ResponseRoutesProperties]):
        """Sets the properties of this ResponseRoutesLocation.


        :param properties: The properties of this ResponseRoutesLocation.
        :type properties: List[ResponseRoutesProperties]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties
