# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.traveltimeplatform.models.base_model_ import Model
from app.traveltimeplatform.models.response_supported_location import ResponseSupportedLocation  # noqa: F401,E501
from traveltimeplatform import util


class ResponseSupportedLocations(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, locations: List[ResponseSupportedLocation]=None, unsupported_locations: List[str]=None):  # noqa: E501
        """ResponseSupportedLocations - a model defined in Swagger

        :param locations: The locations of this ResponseSupportedLocations.  # noqa: E501
        :type locations: List[ResponseSupportedLocation]
        :param unsupported_locations: The unsupported_locations of this ResponseSupportedLocations.  # noqa: E501
        :type unsupported_locations: List[str]
        """
        self.swagger_types = {
            'locations': List[ResponseSupportedLocation],
            'unsupported_locations': List[str]
        }

        self.attribute_map = {
            'locations': 'locations',
            'unsupported_locations': 'unsupported_locations'
        }

        self._locations = locations
        self._unsupported_locations = unsupported_locations

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseSupportedLocations':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseSupportedLocations of this ResponseSupportedLocations.  # noqa: E501
        :rtype: ResponseSupportedLocations
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locations(self) -> List[ResponseSupportedLocation]:
        """Gets the locations of this ResponseSupportedLocations.


        :return: The locations of this ResponseSupportedLocations.
        :rtype: List[ResponseSupportedLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations: List[ResponseSupportedLocation]):
        """Sets the locations of this ResponseSupportedLocations.


        :param locations: The locations of this ResponseSupportedLocations.
        :type locations: List[ResponseSupportedLocation]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")  # noqa: E501

        self._locations = locations

    @property
    def unsupported_locations(self) -> List[str]:
        """Gets the unsupported_locations of this ResponseSupportedLocations.


        :return: The unsupported_locations of this ResponseSupportedLocations.
        :rtype: List[str]
        """
        return self._unsupported_locations

    @unsupported_locations.setter
    def unsupported_locations(self, unsupported_locations: List[str]):
        """Sets the unsupported_locations of this ResponseSupportedLocations.


        :param unsupported_locations: The unsupported_locations of this ResponseSupportedLocations.
        :type unsupported_locations: List[str]
        """
        if unsupported_locations is None:
            raise ValueError("Invalid value for `unsupported_locations`, must not be `None`")  # noqa: E501

        self._unsupported_locations = unsupported_locations
