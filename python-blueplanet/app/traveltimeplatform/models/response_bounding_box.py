# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.traveltimeplatform.models.base_model_ import Model
from app.traveltimeplatform.models.response_box import ResponseBox  # noqa: F401,E501
from traveltimeplatform import util


class ResponseBoundingBox(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, envelope: ResponseBox=None, boxes: List[ResponseBox]=None):  # noqa: E501
        """ResponseBoundingBox - a model defined in Swagger

        :param envelope: The envelope of this ResponseBoundingBox.  # noqa: E501
        :type envelope: ResponseBox
        :param boxes: The boxes of this ResponseBoundingBox.  # noqa: E501
        :type boxes: List[ResponseBox]
        """
        self.swagger_types = {
            'envelope': ResponseBox,
            'boxes': List[ResponseBox]
        }

        self.attribute_map = {
            'envelope': 'envelope',
            'boxes': 'boxes'
        }

        self._envelope = envelope
        self._boxes = boxes

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseBoundingBox':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseBoundingBox of this ResponseBoundingBox.  # noqa: E501
        :rtype: ResponseBoundingBox
        """
        return util.deserialize_model(dikt, cls)

    @property
    def envelope(self) -> ResponseBox:
        """Gets the envelope of this ResponseBoundingBox.


        :return: The envelope of this ResponseBoundingBox.
        :rtype: ResponseBox
        """
        return self._envelope

    @envelope.setter
    def envelope(self, envelope: ResponseBox):
        """Sets the envelope of this ResponseBoundingBox.


        :param envelope: The envelope of this ResponseBoundingBox.
        :type envelope: ResponseBox
        """
        if envelope is None:
            raise ValueError("Invalid value for `envelope`, must not be `None`")  # noqa: E501

        self._envelope = envelope

    @property
    def boxes(self) -> List[ResponseBox]:
        """Gets the boxes of this ResponseBoundingBox.


        :return: The boxes of this ResponseBoundingBox.
        :rtype: List[ResponseBox]
        """
        return self._boxes

    @boxes.setter
    def boxes(self, boxes: List[ResponseBox]):
        """Sets the boxes of this ResponseBoundingBox.


        :param boxes: The boxes of this ResponseBoundingBox.
        :type boxes: List[ResponseBox]
        """
        if boxes is None:
            raise ValueError("Invalid value for `boxes`, must not be `None`")  # noqa: E501

        self._boxes = boxes
