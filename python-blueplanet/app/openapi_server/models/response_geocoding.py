# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model_ import Model
from app.openapi_server.models.response_geocoding_geo_json_feature import ResponseGeocodingGeoJsonFeature  # noqa: F401,E501
from openapi_server import util


class ResponseGeocoding(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, features: List[ResponseGeocodingGeoJsonFeature]=None):  # noqa: E501
        """ResponseGeocoding - a model defined in Swagger

        :param type: The type of this ResponseGeocoding.  # noqa: E501
        :type type: str
        :param features: The features of this ResponseGeocoding.  # noqa: E501
        :type features: List[ResponseGeocodingGeoJsonFeature]
        """
        self.swagger_types = {
            'type': str,
            'features': List[ResponseGeocodingGeoJsonFeature]
        }

        self.attribute_map = {
            'type': 'type',
            'features': 'features'
        }

        self._type = type
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'ResponseGeocoding':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResponseGeocoding of this ResponseGeocoding.  # noqa: E501
        :rtype: ResponseGeocoding
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ResponseGeocoding.


        :return: The type of this ResponseGeocoding.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ResponseGeocoding.


        :param type: The type of this ResponseGeocoding.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def features(self) -> List[ResponseGeocodingGeoJsonFeature]:
        """Gets the features of this ResponseGeocoding.


        :return: The features of this ResponseGeocoding.
        :rtype: List[ResponseGeocodingGeoJsonFeature]
        """
        return self._features

    @features.setter
    def features(self, features: List[ResponseGeocodingGeoJsonFeature]):
        """Sets the features of this ResponseGeocoding.


        :param features: The features of this ResponseGeocoding.
        :type features: List[ResponseGeocodingGeoJsonFeature]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features
