# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model_ import Model
from app.openapi_server.models.request_range_full import RequestRangeFull  # noqa: F401,E501
from app.openapi_server.models.request_time_filter_postcode_sectors_property import RequestTimeFilterPostcodeSectorsProperty  # noqa: F401,E501
from app.openapi_server.models.request_transportation import RequestTransportation  # noqa: F401,E501
from openapi_server import util


class RequestTimeFilterPostcodeSectorsDepartureSearch(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, transportation: RequestTransportation=None, travel_time: int=None, departure_time: datetime=None, reachable_postcodes_threshold: float=None, properties: List[RequestTimeFilterPostcodeSectorsProperty]=None, range: RequestRangeFull=None):  # noqa: E501
        """RequestTimeFilterPostcodeSectorsDepartureSearch - a model defined in Swagger

        :param id: The id of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :type id: str
        :param transportation: The transportation of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :type transportation: RequestTransportation
        :param travel_time: The travel_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :type travel_time: int
        :param departure_time: The departure_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :type departure_time: datetime
        :param reachable_postcodes_threshold: The reachable_postcodes_threshold of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :type reachable_postcodes_threshold: float
        :param properties: The properties of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :type properties: List[RequestTimeFilterPostcodeSectorsProperty]
        :param range: The range of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :type range: RequestRangeFull
        """
        self.swagger_types = {
            'id': str,
            'transportation': RequestTransportation,
            'travel_time': int,
            'departure_time': datetime,
            'reachable_postcodes_threshold': float,
            'properties': List[RequestTimeFilterPostcodeSectorsProperty],
            'range': RequestRangeFull
        }

        self.attribute_map = {
            'id': 'id',
            'transportation': 'transportation',
            'travel_time': 'travel_time',
            'departure_time': 'departure_time',
            'reachable_postcodes_threshold': 'reachable_postcodes_threshold',
            'properties': 'properties',
            'range': 'range'
        }

        self._id = id
        self._transportation = transportation
        self._travel_time = travel_time
        self._departure_time = departure_time
        self._reachable_postcodes_threshold = reachable_postcodes_threshold
        self._properties = properties
        self._range = range

    @classmethod
    def from_dict(cls, dikt) -> 'RequestTimeFilterPostcodeSectorsDepartureSearch':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestTimeFilterPostcodeSectorsDepartureSearch of this RequestTimeFilterPostcodeSectorsDepartureSearch.  # noqa: E501
        :rtype: RequestTimeFilterPostcodeSectorsDepartureSearch
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :return: The id of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :param id: The id of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def transportation(self) -> RequestTransportation:
        """Gets the transportation of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :return: The transportation of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :rtype: RequestTransportation
        """
        return self._transportation

    @transportation.setter
    def transportation(self, transportation: RequestTransportation):
        """Sets the transportation of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :param transportation: The transportation of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :type transportation: RequestTransportation
        """
        if transportation is None:
            raise ValueError("Invalid value for `transportation`, must not be `None`")  # noqa: E501

        self._transportation = transportation

    @property
    def travel_time(self) -> int:
        """Gets the travel_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :return: The travel_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :rtype: int
        """
        return self._travel_time

    @travel_time.setter
    def travel_time(self, travel_time: int):
        """Sets the travel_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :param travel_time: The travel_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :type travel_time: int
        """
        if travel_time is None:
            raise ValueError("Invalid value for `travel_time`, must not be `None`")  # noqa: E501
        if travel_time is not None and travel_time > 14400:  # noqa: E501
            raise ValueError("Invalid value for `travel_time`, must be a value less than or equal to `14400`")  # noqa: E501
        if travel_time is not None and travel_time < 60:  # noqa: E501
            raise ValueError("Invalid value for `travel_time`, must be a value greater than or equal to `60`")  # noqa: E501

        self._travel_time = travel_time

    @property
    def departure_time(self) -> datetime:
        """Gets the departure_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :return: The departure_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :rtype: datetime
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time: datetime):
        """Sets the departure_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :param departure_time: The departure_time of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :type departure_time: datetime
        """
        if departure_time is None:
            raise ValueError("Invalid value for `departure_time`, must not be `None`")  # noqa: E501

        self._departure_time = departure_time

    @property
    def reachable_postcodes_threshold(self) -> float:
        """Gets the reachable_postcodes_threshold of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :return: The reachable_postcodes_threshold of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :rtype: float
        """
        return self._reachable_postcodes_threshold

    @reachable_postcodes_threshold.setter
    def reachable_postcodes_threshold(self, reachable_postcodes_threshold: float):
        """Sets the reachable_postcodes_threshold of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :param reachable_postcodes_threshold: The reachable_postcodes_threshold of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :type reachable_postcodes_threshold: float
        """
        if reachable_postcodes_threshold is None:
            raise ValueError("Invalid value for `reachable_postcodes_threshold`, must not be `None`")  # noqa: E501

        self._reachable_postcodes_threshold = reachable_postcodes_threshold

    @property
    def properties(self) -> List[RequestTimeFilterPostcodeSectorsProperty]:
        """Gets the properties of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :return: The properties of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :rtype: List[RequestTimeFilterPostcodeSectorsProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[RequestTimeFilterPostcodeSectorsProperty]):
        """Sets the properties of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :param properties: The properties of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :type properties: List[RequestTimeFilterPostcodeSectorsProperty]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def range(self) -> RequestRangeFull:
        """Gets the range of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :return: The range of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :rtype: RequestRangeFull
        """
        return self._range

    @range.setter
    def range(self, range: RequestRangeFull):
        """Sets the range of this RequestTimeFilterPostcodeSectorsDepartureSearch.


        :param range: The range of this RequestTimeFilterPostcodeSectorsDepartureSearch.
        :type range: RequestRangeFull
        """

        self._range = range
