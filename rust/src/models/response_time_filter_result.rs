/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseTimeFilterResult {
  #[serde(rename = "search_id")]
  search_id: String,
  #[serde(rename = "locations")]
  locations: Vec<::models::ResponseTimeFilterLocation>,
  #[serde(rename = "unreachable")]
  unreachable: Vec<String>
}

impl ResponseTimeFilterResult {
  pub fn new(search_id: String, locations: Vec<::models::ResponseTimeFilterLocation>, unreachable: Vec<String>) -> ResponseTimeFilterResult {
    ResponseTimeFilterResult {
      search_id: search_id,
      locations: locations,
      unreachable: unreachable
    }
  }

  pub fn set_search_id(&mut self, search_id: String) {
    self.search_id = search_id;
  }

  pub fn with_search_id(mut self, search_id: String) -> ResponseTimeFilterResult {
    self.search_id = search_id;
    self
  }

  pub fn search_id(&self) -> &String {
    &self.search_id
  }


  pub fn set_locations(&mut self, locations: Vec<::models::ResponseTimeFilterLocation>) {
    self.locations = locations;
  }

  pub fn with_locations(mut self, locations: Vec<::models::ResponseTimeFilterLocation>) -> ResponseTimeFilterResult {
    self.locations = locations;
    self
  }

  pub fn locations(&self) -> &Vec<::models::ResponseTimeFilterLocation> {
    &self.locations
  }


  pub fn set_unreachable(&mut self, unreachable: Vec<String>) {
    self.unreachable = unreachable;
  }

  pub fn with_unreachable(mut self, unreachable: Vec<String>) -> ResponseTimeFilterResult {
    self.unreachable = unreachable;
    self
  }

  pub fn unreachable(&self) -> &Vec<String> {
    &self.unreachable
  }


}



