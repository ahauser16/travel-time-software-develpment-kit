/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseTimeFilterPostcodeSectorsResult {
  #[serde(rename = "search_id")]
  search_id: String,
  #[serde(rename = "sectors")]
  sectors: Vec<::models::ResponseTimeFilterPostcodeSector>
}

impl ResponseTimeFilterPostcodeSectorsResult {
  pub fn new(search_id: String, sectors: Vec<::models::ResponseTimeFilterPostcodeSector>) -> ResponseTimeFilterPostcodeSectorsResult {
    ResponseTimeFilterPostcodeSectorsResult {
      search_id: search_id,
      sectors: sectors
    }
  }

  pub fn set_search_id(&mut self, search_id: String) {
    self.search_id = search_id;
  }

  pub fn with_search_id(mut self, search_id: String) -> ResponseTimeFilterPostcodeSectorsResult {
    self.search_id = search_id;
    self
  }

  pub fn search_id(&self) -> &String {
    &self.search_id
  }


  pub fn set_sectors(&mut self, sectors: Vec<::models::ResponseTimeFilterPostcodeSector>) {
    self.sectors = sectors;
  }

  pub fn with_sectors(mut self, sectors: Vec<::models::ResponseTimeFilterPostcodeSector>) -> ResponseTimeFilterPostcodeSectorsResult {
    self.sectors = sectors;
    self
  }

  pub fn sectors(&self) -> &Vec<::models::ResponseTimeFilterPostcodeSector> {
    &self.sectors
  }


}



