/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseError {
  #[serde(rename = "http_status")]
  http_status: Option<i32>,
  #[serde(rename = "error_code")]
  error_code: Option<i32>,
  #[serde(rename = "description")]
  description: Option<String>,
  #[serde(rename = "documentation_link")]
  documentation_link: Option<String>,
  #[serde(rename = "additional_info")]
  additional_info: Option<::std::collections::HashMap<String, Vec<String>>>
}

impl ResponseError {
  pub fn new() -> ResponseError {
    ResponseError {
      http_status: None,
      error_code: None,
      description: None,
      documentation_link: None,
      additional_info: None
    }
  }

  pub fn set_http_status(&mut self, http_status: i32) {
    self.http_status = Some(http_status);
  }

  pub fn with_http_status(mut self, http_status: i32) -> ResponseError {
    self.http_status = Some(http_status);
    self
  }

  pub fn http_status(&self) -> Option<&i32> {
    self.http_status.as_ref()
  }

  pub fn reset_http_status(&mut self) {
    self.http_status = None;
  }

  pub fn set_error_code(&mut self, error_code: i32) {
    self.error_code = Some(error_code);
  }

  pub fn with_error_code(mut self, error_code: i32) -> ResponseError {
    self.error_code = Some(error_code);
    self
  }

  pub fn error_code(&self) -> Option<&i32> {
    self.error_code.as_ref()
  }

  pub fn reset_error_code(&mut self) {
    self.error_code = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ResponseError {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_documentation_link(&mut self, documentation_link: String) {
    self.documentation_link = Some(documentation_link);
  }

  pub fn with_documentation_link(mut self, documentation_link: String) -> ResponseError {
    self.documentation_link = Some(documentation_link);
    self
  }

  pub fn documentation_link(&self) -> Option<&String> {
    self.documentation_link.as_ref()
  }

  pub fn reset_documentation_link(&mut self) {
    self.documentation_link = None;
  }

  pub fn set_additional_info(&mut self, additional_info: ::std::collections::HashMap<String, Vec<String>>) {
    self.additional_info = Some(additional_info);
  }

  pub fn with_additional_info(mut self, additional_info: ::std::collections::HashMap<String, Vec<String>>) -> ResponseError {
    self.additional_info = Some(additional_info);
    self
  }

  pub fn additional_info(&self) -> Option<&::std::collections::HashMap<String, Vec<String>>> {
    self.additional_info.as_ref()
  }

  pub fn reset_additional_info(&mut self) {
    self.additional_info = None;
  }

}



