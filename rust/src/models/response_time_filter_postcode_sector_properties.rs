/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseTimeFilterPostcodeSectorProperties {
  #[serde(rename = "travel_time_reachable")]
  travel_time_reachable: Option<::models::ResponseTravelTimeStatistics>,
  #[serde(rename = "travel_time_all")]
  travel_time_all: Option<::models::ResponseTravelTimeStatistics>,
  #[serde(rename = "coverage")]
  coverage: Option<f64>
}

impl ResponseTimeFilterPostcodeSectorProperties {
  pub fn new() -> ResponseTimeFilterPostcodeSectorProperties {
    ResponseTimeFilterPostcodeSectorProperties {
      travel_time_reachable: None,
      travel_time_all: None,
      coverage: None
    }
  }

  pub fn set_travel_time_reachable(&mut self, travel_time_reachable: ::models::ResponseTravelTimeStatistics) {
    self.travel_time_reachable = Some(travel_time_reachable);
  }

  pub fn with_travel_time_reachable(mut self, travel_time_reachable: ::models::ResponseTravelTimeStatistics) -> ResponseTimeFilterPostcodeSectorProperties {
    self.travel_time_reachable = Some(travel_time_reachable);
    self
  }

  pub fn travel_time_reachable(&self) -> Option<&::models::ResponseTravelTimeStatistics> {
    self.travel_time_reachable.as_ref()
  }

  pub fn reset_travel_time_reachable(&mut self) {
    self.travel_time_reachable = None;
  }

  pub fn set_travel_time_all(&mut self, travel_time_all: ::models::ResponseTravelTimeStatistics) {
    self.travel_time_all = Some(travel_time_all);
  }

  pub fn with_travel_time_all(mut self, travel_time_all: ::models::ResponseTravelTimeStatistics) -> ResponseTimeFilterPostcodeSectorProperties {
    self.travel_time_all = Some(travel_time_all);
    self
  }

  pub fn travel_time_all(&self) -> Option<&::models::ResponseTravelTimeStatistics> {
    self.travel_time_all.as_ref()
  }

  pub fn reset_travel_time_all(&mut self) {
    self.travel_time_all = None;
  }

  pub fn set_coverage(&mut self, coverage: f64) {
    self.coverage = Some(coverage);
  }

  pub fn with_coverage(mut self, coverage: f64) -> ResponseTimeFilterPostcodeSectorProperties {
    self.coverage = Some(coverage);
    self
  }

  pub fn coverage(&self) -> Option<&f64> {
    self.coverage.as_ref()
  }

  pub fn reset_coverage(&mut self) {
    self.coverage = None;
  }

}



