/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestTimeFilterPostcodesDepartureSearch {
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "transportation")]
  transportation: ::models::RequestTransportation,
  #[serde(rename = "travel_time")]
  travel_time: i32,
  #[serde(rename = "departure_time")]
  departure_time: String,
  #[serde(rename = "properties")]
  properties: Vec<::models::RequestTimeFilterPostcodesProperty>,
  #[serde(rename = "range")]
  range: Option<::models::RequestRangeFull>
}

impl RequestTimeFilterPostcodesDepartureSearch {
  pub fn new(id: String, transportation: ::models::RequestTransportation, travel_time: i32, departure_time: String, properties: Vec<::models::RequestTimeFilterPostcodesProperty>) -> RequestTimeFilterPostcodesDepartureSearch {
    RequestTimeFilterPostcodesDepartureSearch {
      id: id,
      transportation: transportation,
      travel_time: travel_time,
      departure_time: departure_time,
      properties: properties,
      range: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> RequestTimeFilterPostcodesDepartureSearch {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_transportation(&mut self, transportation: ::models::RequestTransportation) {
    self.transportation = transportation;
  }

  pub fn with_transportation(mut self, transportation: ::models::RequestTransportation) -> RequestTimeFilterPostcodesDepartureSearch {
    self.transportation = transportation;
    self
  }

  pub fn transportation(&self) -> &::models::RequestTransportation {
    &self.transportation
  }


  pub fn set_travel_time(&mut self, travel_time: i32) {
    self.travel_time = travel_time;
  }

  pub fn with_travel_time(mut self, travel_time: i32) -> RequestTimeFilterPostcodesDepartureSearch {
    self.travel_time = travel_time;
    self
  }

  pub fn travel_time(&self) -> &i32 {
    &self.travel_time
  }


  pub fn set_departure_time(&mut self, departure_time: String) {
    self.departure_time = departure_time;
  }

  pub fn with_departure_time(mut self, departure_time: String) -> RequestTimeFilterPostcodesDepartureSearch {
    self.departure_time = departure_time;
    self
  }

  pub fn departure_time(&self) -> &String {
    &self.departure_time
  }


  pub fn set_properties(&mut self, properties: Vec<::models::RequestTimeFilterPostcodesProperty>) {
    self.properties = properties;
  }

  pub fn with_properties(mut self, properties: Vec<::models::RequestTimeFilterPostcodesProperty>) -> RequestTimeFilterPostcodesDepartureSearch {
    self.properties = properties;
    self
  }

  pub fn properties(&self) -> &Vec<::models::RequestTimeFilterPostcodesProperty> {
    &self.properties
  }


  pub fn set_range(&mut self, range: ::models::RequestRangeFull) {
    self.range = Some(range);
  }

  pub fn with_range(mut self, range: ::models::RequestRangeFull) -> RequestTimeFilterPostcodesDepartureSearch {
    self.range = Some(range);
    self
  }

  pub fn range(&self) -> Option<&::models::RequestRangeFull> {
    self.range.as_ref()
  }

  pub fn reset_range(&mut self) {
    self.range = None;
  }

}



