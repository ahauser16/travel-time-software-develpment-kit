/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseFares {
  #[serde(rename = "breakdown")]
  breakdown: Vec<::models::ResponseFaresBreakdownItem>,
  #[serde(rename = "tickets_total")]
  tickets_total: Vec<::models::ResponseFareTicket>
}

impl ResponseFares {
  pub fn new(breakdown: Vec<::models::ResponseFaresBreakdownItem>, tickets_total: Vec<::models::ResponseFareTicket>) -> ResponseFares {
    ResponseFares {
      breakdown: breakdown,
      tickets_total: tickets_total
    }
  }

  pub fn set_breakdown(&mut self, breakdown: Vec<::models::ResponseFaresBreakdownItem>) {
    self.breakdown = breakdown;
  }

  pub fn with_breakdown(mut self, breakdown: Vec<::models::ResponseFaresBreakdownItem>) -> ResponseFares {
    self.breakdown = breakdown;
    self
  }

  pub fn breakdown(&self) -> &Vec<::models::ResponseFaresBreakdownItem> {
    &self.breakdown
  }


  pub fn set_tickets_total(&mut self, tickets_total: Vec<::models::ResponseFareTicket>) {
    self.tickets_total = tickets_total;
  }

  pub fn with_tickets_total(mut self, tickets_total: Vec<::models::ResponseFareTicket>) -> ResponseFares {
    self.tickets_total = tickets_total;
    self
  }

  pub fn tickets_total(&self) -> &Vec<::models::ResponseFareTicket> {
    &self.tickets_total
  }


}



