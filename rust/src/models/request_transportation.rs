/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestTransportation {
  #[serde(rename = "type")]
  _type: String,
  #[serde(rename = "pt_change_delay")]
  pt_change_delay: Option<i32>,
  #[serde(rename = "walking_time")]
  walking_time: Option<i32>,
  #[serde(rename = "driving_time_to_station")]
  driving_time_to_station: Option<i32>,
  #[serde(rename = "parking_time")]
  parking_time: Option<i32>,
  #[serde(rename = "boarding_time")]
  boarding_time: Option<i32>
}

impl RequestTransportation {
  pub fn new(_type: String) -> RequestTransportation {
    RequestTransportation {
      _type: _type,
      pt_change_delay: None,
      walking_time: None,
      driving_time_to_station: None,
      parking_time: None,
      boarding_time: None
    }
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> RequestTransportation {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_pt_change_delay(&mut self, pt_change_delay: i32) {
    self.pt_change_delay = Some(pt_change_delay);
  }

  pub fn with_pt_change_delay(mut self, pt_change_delay: i32) -> RequestTransportation {
    self.pt_change_delay = Some(pt_change_delay);
    self
  }

  pub fn pt_change_delay(&self) -> Option<&i32> {
    self.pt_change_delay.as_ref()
  }

  pub fn reset_pt_change_delay(&mut self) {
    self.pt_change_delay = None;
  }

  pub fn set_walking_time(&mut self, walking_time: i32) {
    self.walking_time = Some(walking_time);
  }

  pub fn with_walking_time(mut self, walking_time: i32) -> RequestTransportation {
    self.walking_time = Some(walking_time);
    self
  }

  pub fn walking_time(&self) -> Option<&i32> {
    self.walking_time.as_ref()
  }

  pub fn reset_walking_time(&mut self) {
    self.walking_time = None;
  }

  pub fn set_driving_time_to_station(&mut self, driving_time_to_station: i32) {
    self.driving_time_to_station = Some(driving_time_to_station);
  }

  pub fn with_driving_time_to_station(mut self, driving_time_to_station: i32) -> RequestTransportation {
    self.driving_time_to_station = Some(driving_time_to_station);
    self
  }

  pub fn driving_time_to_station(&self) -> Option<&i32> {
    self.driving_time_to_station.as_ref()
  }

  pub fn reset_driving_time_to_station(&mut self) {
    self.driving_time_to_station = None;
  }

  pub fn set_parking_time(&mut self, parking_time: i32) {
    self.parking_time = Some(parking_time);
  }

  pub fn with_parking_time(mut self, parking_time: i32) -> RequestTransportation {
    self.parking_time = Some(parking_time);
    self
  }

  pub fn parking_time(&self) -> Option<&i32> {
    self.parking_time.as_ref()
  }

  pub fn reset_parking_time(&mut self) {
    self.parking_time = None;
  }

  pub fn set_boarding_time(&mut self, boarding_time: i32) {
    self.boarding_time = Some(boarding_time);
  }

  pub fn with_boarding_time(mut self, boarding_time: i32) -> RequestTransportation {
    self.boarding_time = Some(boarding_time);
    self
  }

  pub fn boarding_time(&self) -> Option<&i32> {
    self.boarding_time.as_ref()
  }

  pub fn reset_boarding_time(&mut self) {
    self.boarding_time = None;
  }

}



