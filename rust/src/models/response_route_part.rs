/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseRoutePart {
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "type")]
  _type: String,
  #[serde(rename = "mode")]
  mode: ::models::ResponseTransportationMode,
  #[serde(rename = "directions")]
  directions: String,
  #[serde(rename = "distance")]
  distance: i32,
  #[serde(rename = "travel_time")]
  travel_time: i32,
  #[serde(rename = "coords")]
  coords: Vec<::models::Coords>,
  #[serde(rename = "direction")]
  direction: Option<String>,
  #[serde(rename = "road")]
  road: Option<String>,
  #[serde(rename = "turn")]
  turn: Option<String>,
  #[serde(rename = "line")]
  line: Option<String>,
  #[serde(rename = "departure_station")]
  departure_station: Option<String>,
  #[serde(rename = "arrival_station")]
  arrival_station: Option<String>,
  #[serde(rename = "departs_at")]
  departs_at: Option<String>,
  #[serde(rename = "arrives_at")]
  arrives_at: Option<String>,
  #[serde(rename = "num_stops")]
  num_stops: Option<i32>
}

impl ResponseRoutePart {
  pub fn new(id: String, _type: String, mode: ::models::ResponseTransportationMode, directions: String, distance: i32, travel_time: i32, coords: Vec<::models::Coords>) -> ResponseRoutePart {
    ResponseRoutePart {
      id: id,
      _type: _type,
      mode: mode,
      directions: directions,
      distance: distance,
      travel_time: travel_time,
      coords: coords,
      direction: None,
      road: None,
      turn: None,
      line: None,
      departure_station: None,
      arrival_station: None,
      departs_at: None,
      arrives_at: None,
      num_stops: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> ResponseRoutePart {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> ResponseRoutePart {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_mode(&mut self, mode: ::models::ResponseTransportationMode) {
    self.mode = mode;
  }

  pub fn with_mode(mut self, mode: ::models::ResponseTransportationMode) -> ResponseRoutePart {
    self.mode = mode;
    self
  }

  pub fn mode(&self) -> &::models::ResponseTransportationMode {
    &self.mode
  }


  pub fn set_directions(&mut self, directions: String) {
    self.directions = directions;
  }

  pub fn with_directions(mut self, directions: String) -> ResponseRoutePart {
    self.directions = directions;
    self
  }

  pub fn directions(&self) -> &String {
    &self.directions
  }


  pub fn set_distance(&mut self, distance: i32) {
    self.distance = distance;
  }

  pub fn with_distance(mut self, distance: i32) -> ResponseRoutePart {
    self.distance = distance;
    self
  }

  pub fn distance(&self) -> &i32 {
    &self.distance
  }


  pub fn set_travel_time(&mut self, travel_time: i32) {
    self.travel_time = travel_time;
  }

  pub fn with_travel_time(mut self, travel_time: i32) -> ResponseRoutePart {
    self.travel_time = travel_time;
    self
  }

  pub fn travel_time(&self) -> &i32 {
    &self.travel_time
  }


  pub fn set_coords(&mut self, coords: Vec<::models::Coords>) {
    self.coords = coords;
  }

  pub fn with_coords(mut self, coords: Vec<::models::Coords>) -> ResponseRoutePart {
    self.coords = coords;
    self
  }

  pub fn coords(&self) -> &Vec<::models::Coords> {
    &self.coords
  }


  pub fn set_direction(&mut self, direction: String) {
    self.direction = Some(direction);
  }

  pub fn with_direction(mut self, direction: String) -> ResponseRoutePart {
    self.direction = Some(direction);
    self
  }

  pub fn direction(&self) -> Option<&String> {
    self.direction.as_ref()
  }

  pub fn reset_direction(&mut self) {
    self.direction = None;
  }

  pub fn set_road(&mut self, road: String) {
    self.road = Some(road);
  }

  pub fn with_road(mut self, road: String) -> ResponseRoutePart {
    self.road = Some(road);
    self
  }

  pub fn road(&self) -> Option<&String> {
    self.road.as_ref()
  }

  pub fn reset_road(&mut self) {
    self.road = None;
  }

  pub fn set_turn(&mut self, turn: String) {
    self.turn = Some(turn);
  }

  pub fn with_turn(mut self, turn: String) -> ResponseRoutePart {
    self.turn = Some(turn);
    self
  }

  pub fn turn(&self) -> Option<&String> {
    self.turn.as_ref()
  }

  pub fn reset_turn(&mut self) {
    self.turn = None;
  }

  pub fn set_line(&mut self, line: String) {
    self.line = Some(line);
  }

  pub fn with_line(mut self, line: String) -> ResponseRoutePart {
    self.line = Some(line);
    self
  }

  pub fn line(&self) -> Option<&String> {
    self.line.as_ref()
  }

  pub fn reset_line(&mut self) {
    self.line = None;
  }

  pub fn set_departure_station(&mut self, departure_station: String) {
    self.departure_station = Some(departure_station);
  }

  pub fn with_departure_station(mut self, departure_station: String) -> ResponseRoutePart {
    self.departure_station = Some(departure_station);
    self
  }

  pub fn departure_station(&self) -> Option<&String> {
    self.departure_station.as_ref()
  }

  pub fn reset_departure_station(&mut self) {
    self.departure_station = None;
  }

  pub fn set_arrival_station(&mut self, arrival_station: String) {
    self.arrival_station = Some(arrival_station);
  }

  pub fn with_arrival_station(mut self, arrival_station: String) -> ResponseRoutePart {
    self.arrival_station = Some(arrival_station);
    self
  }

  pub fn arrival_station(&self) -> Option<&String> {
    self.arrival_station.as_ref()
  }

  pub fn reset_arrival_station(&mut self) {
    self.arrival_station = None;
  }

  pub fn set_departs_at(&mut self, departs_at: String) {
    self.departs_at = Some(departs_at);
  }

  pub fn with_departs_at(mut self, departs_at: String) -> ResponseRoutePart {
    self.departs_at = Some(departs_at);
    self
  }

  pub fn departs_at(&self) -> Option<&String> {
    self.departs_at.as_ref()
  }

  pub fn reset_departs_at(&mut self) {
    self.departs_at = None;
  }

  pub fn set_arrives_at(&mut self, arrives_at: String) {
    self.arrives_at = Some(arrives_at);
  }

  pub fn with_arrives_at(mut self, arrives_at: String) -> ResponseRoutePart {
    self.arrives_at = Some(arrives_at);
    self
  }

  pub fn arrives_at(&self) -> Option<&String> {
    self.arrives_at.as_ref()
  }

  pub fn reset_arrives_at(&mut self) {
    self.arrives_at = None;
  }

  pub fn set_num_stops(&mut self, num_stops: i32) {
    self.num_stops = Some(num_stops);
  }

  pub fn with_num_stops(mut self, num_stops: i32) -> ResponseRoutePart {
    self.num_stops = Some(num_stops);
    self
  }

  pub fn num_stops(&self) -> Option<&i32> {
    self.num_stops.as_ref()
  }

  pub fn reset_num_stops(&mut self) {
    self.num_stops = None;
  }

}



