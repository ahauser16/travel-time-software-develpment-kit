/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestTimeMap {
  #[serde(rename = "departure_searches")]
  departure_searches: Option<Vec<::models::RequestTimeMapDepartureSearch>>,
  #[serde(rename = "arrival_searches")]
  arrival_searches: Option<Vec<::models::RequestTimeMapArrivalSearch>>,
  #[serde(rename = "unions")]
  unions: Option<Vec<::models::RequestUnionOnIntersection>>,
  #[serde(rename = "intersections")]
  intersections: Option<Vec<::models::RequestUnionOnIntersection>>
}

impl RequestTimeMap {
  pub fn new() -> RequestTimeMap {
    RequestTimeMap {
      departure_searches: None,
      arrival_searches: None,
      unions: None,
      intersections: None
    }
  }

  pub fn set_departure_searches(&mut self, departure_searches: Vec<::models::RequestTimeMapDepartureSearch>) {
    self.departure_searches = Some(departure_searches);
  }

  pub fn with_departure_searches(mut self, departure_searches: Vec<::models::RequestTimeMapDepartureSearch>) -> RequestTimeMap {
    self.departure_searches = Some(departure_searches);
    self
  }

  pub fn departure_searches(&self) -> Option<&Vec<::models::RequestTimeMapDepartureSearch>> {
    self.departure_searches.as_ref()
  }

  pub fn reset_departure_searches(&mut self) {
    self.departure_searches = None;
  }

  pub fn set_arrival_searches(&mut self, arrival_searches: Vec<::models::RequestTimeMapArrivalSearch>) {
    self.arrival_searches = Some(arrival_searches);
  }

  pub fn with_arrival_searches(mut self, arrival_searches: Vec<::models::RequestTimeMapArrivalSearch>) -> RequestTimeMap {
    self.arrival_searches = Some(arrival_searches);
    self
  }

  pub fn arrival_searches(&self) -> Option<&Vec<::models::RequestTimeMapArrivalSearch>> {
    self.arrival_searches.as_ref()
  }

  pub fn reset_arrival_searches(&mut self) {
    self.arrival_searches = None;
  }

  pub fn set_unions(&mut self, unions: Vec<::models::RequestUnionOnIntersection>) {
    self.unions = Some(unions);
  }

  pub fn with_unions(mut self, unions: Vec<::models::RequestUnionOnIntersection>) -> RequestTimeMap {
    self.unions = Some(unions);
    self
  }

  pub fn unions(&self) -> Option<&Vec<::models::RequestUnionOnIntersection>> {
    self.unions.as_ref()
  }

  pub fn reset_unions(&mut self) {
    self.unions = None;
  }

  pub fn set_intersections(&mut self, intersections: Vec<::models::RequestUnionOnIntersection>) {
    self.intersections = Some(intersections);
  }

  pub fn with_intersections(mut self, intersections: Vec<::models::RequestUnionOnIntersection>) -> RequestTimeMap {
    self.intersections = Some(intersections);
    self
  }

  pub fn intersections(&self) -> Option<&Vec<::models::RequestUnionOnIntersection>> {
    self.intersections.as_ref()
  }

  pub fn reset_intersections(&mut self) {
    self.intersections = None;
  }

}



