/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestUnionOnIntersection {
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "search_ids")]
  search_ids: Vec<String>
}

impl RequestUnionOnIntersection {
  pub fn new(id: String, search_ids: Vec<String>) -> RequestUnionOnIntersection {
    RequestUnionOnIntersection {
      id: id,
      search_ids: search_ids
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> RequestUnionOnIntersection {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_search_ids(&mut self, search_ids: Vec<String>) {
    self.search_ids = search_ids;
  }

  pub fn with_search_ids(mut self, search_ids: Vec<String>) -> RequestUnionOnIntersection {
    self.search_ids = search_ids;
    self
  }

  pub fn search_ids(&self) -> &Vec<String> {
    &self.search_ids
  }


}



