/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RequestTimeFilterFastArrivalManyToOneSearch {
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "arrival_location_id")]
  arrival_location_id: String,
  #[serde(rename = "departure_location_ids")]
  departure_location_ids: Vec<String>,
  #[serde(rename = "transportation")]
  transportation: ::models::RequestTransportationFast,
  #[serde(rename = "travel_time")]
  travel_time: i32,
  #[serde(rename = "arrival_time_period")]
  arrival_time_period: ::models::RequestArrivalTimePeriod,
  #[serde(rename = "properties")]
  properties: Vec<::models::RequestTimeFilterFastProperty>
}

impl RequestTimeFilterFastArrivalManyToOneSearch {
  pub fn new(id: String, arrival_location_id: String, departure_location_ids: Vec<String>, transportation: ::models::RequestTransportationFast, travel_time: i32, arrival_time_period: ::models::RequestArrivalTimePeriod, properties: Vec<::models::RequestTimeFilterFastProperty>) -> RequestTimeFilterFastArrivalManyToOneSearch {
    RequestTimeFilterFastArrivalManyToOneSearch {
      id: id,
      arrival_location_id: arrival_location_id,
      departure_location_ids: departure_location_ids,
      transportation: transportation,
      travel_time: travel_time,
      arrival_time_period: arrival_time_period,
      properties: properties
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> RequestTimeFilterFastArrivalManyToOneSearch {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_arrival_location_id(&mut self, arrival_location_id: String) {
    self.arrival_location_id = arrival_location_id;
  }

  pub fn with_arrival_location_id(mut self, arrival_location_id: String) -> RequestTimeFilterFastArrivalManyToOneSearch {
    self.arrival_location_id = arrival_location_id;
    self
  }

  pub fn arrival_location_id(&self) -> &String {
    &self.arrival_location_id
  }


  pub fn set_departure_location_ids(&mut self, departure_location_ids: Vec<String>) {
    self.departure_location_ids = departure_location_ids;
  }

  pub fn with_departure_location_ids(mut self, departure_location_ids: Vec<String>) -> RequestTimeFilterFastArrivalManyToOneSearch {
    self.departure_location_ids = departure_location_ids;
    self
  }

  pub fn departure_location_ids(&self) -> &Vec<String> {
    &self.departure_location_ids
  }


  pub fn set_transportation(&mut self, transportation: ::models::RequestTransportationFast) {
    self.transportation = transportation;
  }

  pub fn with_transportation(mut self, transportation: ::models::RequestTransportationFast) -> RequestTimeFilterFastArrivalManyToOneSearch {
    self.transportation = transportation;
    self
  }

  pub fn transportation(&self) -> &::models::RequestTransportationFast {
    &self.transportation
  }


  pub fn set_travel_time(&mut self, travel_time: i32) {
    self.travel_time = travel_time;
  }

  pub fn with_travel_time(mut self, travel_time: i32) -> RequestTimeFilterFastArrivalManyToOneSearch {
    self.travel_time = travel_time;
    self
  }

  pub fn travel_time(&self) -> &i32 {
    &self.travel_time
  }


  pub fn set_arrival_time_period(&mut self, arrival_time_period: ::models::RequestArrivalTimePeriod) {
    self.arrival_time_period = arrival_time_period;
  }

  pub fn with_arrival_time_period(mut self, arrival_time_period: ::models::RequestArrivalTimePeriod) -> RequestTimeFilterFastArrivalManyToOneSearch {
    self.arrival_time_period = arrival_time_period;
    self
  }

  pub fn arrival_time_period(&self) -> &::models::RequestArrivalTimePeriod {
    &self.arrival_time_period
  }


  pub fn set_properties(&mut self, properties: Vec<::models::RequestTimeFilterFastProperty>) {
    self.properties = properties;
  }

  pub fn with_properties(mut self, properties: Vec<::models::RequestTimeFilterFastProperty>) -> RequestTimeFilterFastArrivalManyToOneSearch {
    self.properties = properties;
    self
  }

  pub fn properties(&self) -> &Vec<::models::RequestTimeFilterFastProperty> {
    &self.properties
  }


}



