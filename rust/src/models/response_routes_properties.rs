/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResponseRoutesProperties {
  #[serde(rename = "travel_time")]
  travel_time: Option<i32>,
  #[serde(rename = "distance")]
  distance: Option<i32>,
  #[serde(rename = "fares")]
  fares: Option<::models::ResponseFares>,
  #[serde(rename = "route")]
  route: Option<::models::ResponseRoute>
}

impl ResponseRoutesProperties {
  pub fn new() -> ResponseRoutesProperties {
    ResponseRoutesProperties {
      travel_time: None,
      distance: None,
      fares: None,
      route: None
    }
  }

  pub fn set_travel_time(&mut self, travel_time: i32) {
    self.travel_time = Some(travel_time);
  }

  pub fn with_travel_time(mut self, travel_time: i32) -> ResponseRoutesProperties {
    self.travel_time = Some(travel_time);
    self
  }

  pub fn travel_time(&self) -> Option<&i32> {
    self.travel_time.as_ref()
  }

  pub fn reset_travel_time(&mut self) {
    self.travel_time = None;
  }

  pub fn set_distance(&mut self, distance: i32) {
    self.distance = Some(distance);
  }

  pub fn with_distance(mut self, distance: i32) -> ResponseRoutesProperties {
    self.distance = Some(distance);
    self
  }

  pub fn distance(&self) -> Option<&i32> {
    self.distance.as_ref()
  }

  pub fn reset_distance(&mut self) {
    self.distance = None;
  }

  pub fn set_fares(&mut self, fares: ::models::ResponseFares) {
    self.fares = Some(fares);
  }

  pub fn with_fares(mut self, fares: ::models::ResponseFares) -> ResponseRoutesProperties {
    self.fares = Some(fares);
    self
  }

  pub fn fares(&self) -> Option<&::models::ResponseFares> {
    self.fares.as_ref()
  }

  pub fn reset_fares(&mut self) {
    self.fares = None;
  }

  pub fn set_route(&mut self, route: ::models::ResponseRoute) {
    self.route = Some(route);
  }

  pub fn with_route(mut self, route: ::models::ResponseRoute) -> ResponseRoutesProperties {
    self.route = Some(route);
    self
  }

  pub fn route(&self) -> Option<&::models::ResponseRoute> {
    self.route.as_ref()
  }

  pub fn reset_route(&mut self) {
    self.route = None;
  }

}



