/*
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration,
        }
    }
}

pub trait DefaultApi {
    fn geocoding_reverse_search(&self, lat: f64, lng: f64, within_country: Option<&str>) -> Box<dyn Future<Item = crate::models::ResponseGeocoding, Error = Error<serde_json::Value>>>;
    fn geocoding_search(&self, query: &str, focus_lat: Option<f64>, focus_lng: Option<f64>, within_country: Option<&str>) -> Box<dyn Future<Item = crate::models::ResponseGeocoding, Error = Error<serde_json::Value>>>;
    fn map_info(&self, ) -> Box<dyn Future<Item = crate::models::ResponseMapInfo, Error = Error<serde_json::Value>>>;
    fn routes(&self, request_routes: crate::models::RequestRoutes) -> Box<dyn Future<Item = crate::models::ResponseRoutes, Error = Error<serde_json::Value>>>;
    fn supported_locations(&self, request_supported_locations: crate::models::RequestSupportedLocations) -> Box<dyn Future<Item = crate::models::ResponseSupportedLocations, Error = Error<serde_json::Value>>>;
    fn time_filter(&self, request_time_filter: crate::models::RequestTimeFilter) -> Box<dyn Future<Item = crate::models::ResponseTimeFilter, Error = Error<serde_json::Value>>>;
    fn time_filter_fast(&self, request_time_filter_fast: crate::models::RequestTimeFilterFast) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterFast, Error = Error<serde_json::Value>>>;
    fn time_filter_postcode_districts(&self, request_time_filter_postcode_districts: crate::models::RequestTimeFilterPostcodeDistricts) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterPostcodeDistricts, Error = Error<serde_json::Value>>>;
    fn time_filter_postcode_sectors(&self, request_time_filter_postcode_sectors: crate::models::RequestTimeFilterPostcodeSectors) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterPostcodeSectors, Error = Error<serde_json::Value>>>;
    fn time_filter_postcodes(&self, request_time_filter_postcodes: crate::models::RequestTimeFilterPostcodes) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterPostcodes, Error = Error<serde_json::Value>>>;
    fn time_map(&self, request_time_map: crate::models::RequestTimeMap) -> Box<dyn Future<Item = crate::models::ResponseTimeMap, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn geocoding_reverse_search(&self, lat: f64, lng: f64, within_country: Option<&str>) -> Box<dyn Future<Item = crate::models::ResponseGeocoding, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/v4/geocoding/reverse".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_query_param("lat".to_string(), lat.to_string());
        req = req.with_query_param("lng".to_string(), lng.to_string());
        if let Some(ref s) = within_country {
            req = req.with_query_param("within.country".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn geocoding_search(&self, query: &str, focus_lat: Option<f64>, focus_lng: Option<f64>, within_country: Option<&str>) -> Box<dyn Future<Item = crate::models::ResponseGeocoding, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/v4/geocoding/search".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_query_param("query".to_string(), query.to_string());
        if let Some(ref s) = focus_lat {
            req = req.with_query_param("focus.lat".to_string(), s.to_string());
        }
        if let Some(ref s) = focus_lng {
            req = req.with_query_param("focus.lng".to_string(), s.to_string());
        }
        if let Some(ref s) = within_country {
            req = req.with_query_param("within.country".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn map_info(&self, ) -> Box<dyn Future<Item = crate::models::ResponseMapInfo, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/v4/map-info".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;

        req.execute(self.configuration.borrow())
    }

    fn routes(&self, request_routes: crate::models::RequestRoutes) -> Box<dyn Future<Item = crate::models::ResponseRoutes, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/routes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_routes);

        req.execute(self.configuration.borrow())
    }

    fn supported_locations(&self, request_supported_locations: crate::models::RequestSupportedLocations) -> Box<dyn Future<Item = crate::models::ResponseSupportedLocations, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/supported-locations".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_supported_locations);

        req.execute(self.configuration.borrow())
    }

    fn time_filter(&self, request_time_filter: crate::models::RequestTimeFilter) -> Box<dyn Future<Item = crate::models::ResponseTimeFilter, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/time-filter".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_time_filter);

        req.execute(self.configuration.borrow())
    }

    fn time_filter_fast(&self, request_time_filter_fast: crate::models::RequestTimeFilterFast) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterFast, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/time-filter/fast".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_time_filter_fast);

        req.execute(self.configuration.borrow())
    }

    fn time_filter_postcode_districts(&self, request_time_filter_postcode_districts: crate::models::RequestTimeFilterPostcodeDistricts) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterPostcodeDistricts, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/time-filter/postcode-districts".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_time_filter_postcode_districts);

        req.execute(self.configuration.borrow())
    }

    fn time_filter_postcode_sectors(&self, request_time_filter_postcode_sectors: crate::models::RequestTimeFilterPostcodeSectors) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterPostcodeSectors, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/time-filter/postcode-sectors".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_time_filter_postcode_sectors);

        req.execute(self.configuration.borrow())
    }

    fn time_filter_postcodes(&self, request_time_filter_postcodes: crate::models::RequestTimeFilterPostcodes) -> Box<dyn Future<Item = crate::models::ResponseTimeFilterPostcodes, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/time-filter/postcodes".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_time_filter_postcodes);

        req.execute(self.configuration.borrow())
    }

    fn time_map(&self, request_time_map: crate::models::RequestTimeMap) -> Box<dyn Future<Item = crate::models::ResponseTimeMap, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/v4/time-map".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Api-Key".to_owned(),
            }))
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: true,
                in_query: false,
                param_name: "X-Application-Id".to_owned(),
            }))
        ;
        req = req.with_body_param(request_time_map);

        req.execute(self.configuration.borrow())
    }

}
