/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 3.3.4
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RequestRoutes', 'model/RequestSupportedLocations', 'model/RequestTimeFilter', 'model/RequestTimeFilterFast', 'model/RequestTimeFilterPostcodeDistricts', 'model/RequestTimeFilterPostcodeSectors', 'model/RequestTimeFilterPostcodes', 'model/RequestTimeMap', 'model/ResponseError', 'model/ResponseGeocoding', 'model/ResponseMapInfo', 'model/ResponseRoutes', 'model/ResponseSupportedLocations', 'model/ResponseTimeFilter', 'model/ResponseTimeFilterFast', 'model/ResponseTimeFilterPostcodeDistricts', 'model/ResponseTimeFilterPostcodeSectors', 'model/ResponseTimeFilterPostcodes', 'model/ResponseTimeMap'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RequestRoutes'), require('../model/RequestSupportedLocations'), require('../model/RequestTimeFilter'), require('../model/RequestTimeFilterFast'), require('../model/RequestTimeFilterPostcodeDistricts'), require('../model/RequestTimeFilterPostcodeSectors'), require('../model/RequestTimeFilterPostcodes'), require('../model/RequestTimeMap'), require('../model/ResponseError'), require('../model/ResponseGeocoding'), require('../model/ResponseMapInfo'), require('../model/ResponseRoutes'), require('../model/ResponseSupportedLocations'), require('../model/ResponseTimeFilter'), require('../model/ResponseTimeFilterFast'), require('../model/ResponseTimeFilterPostcodeDistricts'), require('../model/ResponseTimeFilterPostcodeSectors'), require('../model/ResponseTimeFilterPostcodes'), require('../model/ResponseTimeMap'));
  } else {
    // Browser globals (root is window)
    if (!root.TravelTimePlatformApi) {
      root.TravelTimePlatformApi = {};
    }
    root.TravelTimePlatformApi.DefaultApi = factory(root.TravelTimePlatformApi.ApiClient, root.TravelTimePlatformApi.RequestRoutes, root.TravelTimePlatformApi.RequestSupportedLocations, root.TravelTimePlatformApi.RequestTimeFilter, root.TravelTimePlatformApi.RequestTimeFilterFast, root.TravelTimePlatformApi.RequestTimeFilterPostcodeDistricts, root.TravelTimePlatformApi.RequestTimeFilterPostcodeSectors, root.TravelTimePlatformApi.RequestTimeFilterPostcodes, root.TravelTimePlatformApi.RequestTimeMap, root.TravelTimePlatformApi.ResponseError, root.TravelTimePlatformApi.ResponseGeocoding, root.TravelTimePlatformApi.ResponseMapInfo, root.TravelTimePlatformApi.ResponseRoutes, root.TravelTimePlatformApi.ResponseSupportedLocations, root.TravelTimePlatformApi.ResponseTimeFilter, root.TravelTimePlatformApi.ResponseTimeFilterFast, root.TravelTimePlatformApi.ResponseTimeFilterPostcodeDistricts, root.TravelTimePlatformApi.ResponseTimeFilterPostcodeSectors, root.TravelTimePlatformApi.ResponseTimeFilterPostcodes, root.TravelTimePlatformApi.ResponseTimeMap);
  }
}(this, function(ApiClient, RequestRoutes, RequestSupportedLocations, RequestTimeFilter, RequestTimeFilterFast, RequestTimeFilterPostcodeDistricts, RequestTimeFilterPostcodeSectors, RequestTimeFilterPostcodes, RequestTimeMap, ResponseError, ResponseGeocoding, ResponseMapInfo, ResponseRoutes, ResponseSupportedLocations, ResponseTimeFilter, ResponseTimeFilterFast, ResponseTimeFilterPostcodeDistricts, ResponseTimeFilterPostcodeSectors, ResponseTimeFilterPostcodes, ResponseTimeMap) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the geocodingReverseSearch operation.
     * @callback module:api/DefaultApi~geocodingReverseSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseGeocoding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} focusLat 
     * @param {Number} focusLng 
     * @param {Object} opts Optional parameters
     * @param {String} opts.withinCountry 
     * @param {module:api/DefaultApi~geocodingReverseSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseGeocoding}
     */
    this.geocodingReverseSearch = function(focusLat, focusLng, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'focusLat' is set
      if (focusLat === undefined || focusLat === null) {
        throw new Error("Missing the required parameter 'focusLat' when calling geocodingReverseSearch");
      }

      // verify the required parameter 'focusLng' is set
      if (focusLng === undefined || focusLng === null) {
        throw new Error("Missing the required parameter 'focusLng' when calling geocodingReverseSearch");
      }


      var pathParams = {
      };
      var queryParams = {
        'focus.lat': focusLat,
        'focus.lng': focusLng,
        'within.country': opts['withinCountry'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseGeocoding;

      return this.apiClient.callApi(
        '/v4/geocoding/reverse', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the geocodingSearch operation.
     * @callback module:api/DefaultApi~geocodingSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseGeocoding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} query 
     * @param {Object} opts Optional parameters
     * @param {String} opts.withinCountry 
     * @param {Number} opts.focusLat 
     * @param {Number} opts.focusLng 
     * @param {module:api/DefaultApi~geocodingSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseGeocoding}
     */
    this.geocodingSearch = function(query, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling geocodingSearch");
      }


      var pathParams = {
      };
      var queryParams = {
        'query': query,
        'within.country': opts['withinCountry'],
        'focus.lat': opts['focusLat'],
        'focus.lng': opts['focusLng'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseGeocoding;

      return this.apiClient.callApi(
        '/v4/geocoding/search', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the mapInfo operation.
     * @callback module:api/DefaultApi~mapInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseMapInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~mapInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseMapInfo}
     */
    this.mapInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResponseMapInfo;

      return this.apiClient.callApi(
        '/v4/map-info', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the routes operation.
     * @callback module:api/DefaultApi~routesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseRoutes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestRoutes} requestRoutes 
     * @param {module:api/DefaultApi~routesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseRoutes}
     */
    this.routes = function(requestRoutes, callback) {
      var postBody = requestRoutes;

      // verify the required parameter 'requestRoutes' is set
      if (requestRoutes === undefined || requestRoutes === null) {
        throw new Error("Missing the required parameter 'requestRoutes' when calling routes");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseRoutes;

      return this.apiClient.callApi(
        '/v4/routes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the supportedLocations operation.
     * @callback module:api/DefaultApi~supportedLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseSupportedLocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestSupportedLocations} requestSupportedLocations 
     * @param {module:api/DefaultApi~supportedLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseSupportedLocations}
     */
    this.supportedLocations = function(requestSupportedLocations, callback) {
      var postBody = requestSupportedLocations;

      // verify the required parameter 'requestSupportedLocations' is set
      if (requestSupportedLocations === undefined || requestSupportedLocations === null) {
        throw new Error("Missing the required parameter 'requestSupportedLocations' when calling supportedLocations");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseSupportedLocations;

      return this.apiClient.callApi(
        '/v4/supported-locations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeFilter operation.
     * @callback module:api/DefaultApi~timeFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseTimeFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestTimeFilter} requestTimeFilter 
     * @param {module:api/DefaultApi~timeFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseTimeFilter}
     */
    this.timeFilter = function(requestTimeFilter, callback) {
      var postBody = requestTimeFilter;

      // verify the required parameter 'requestTimeFilter' is set
      if (requestTimeFilter === undefined || requestTimeFilter === null) {
        throw new Error("Missing the required parameter 'requestTimeFilter' when calling timeFilter");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseTimeFilter;

      return this.apiClient.callApi(
        '/v4/time-filter', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeFilterFast operation.
     * @callback module:api/DefaultApi~timeFilterFastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseTimeFilterFast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestTimeFilterFast} requestTimeFilterFast 
     * @param {module:api/DefaultApi~timeFilterFastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseTimeFilterFast}
     */
    this.timeFilterFast = function(requestTimeFilterFast, callback) {
      var postBody = requestTimeFilterFast;

      // verify the required parameter 'requestTimeFilterFast' is set
      if (requestTimeFilterFast === undefined || requestTimeFilterFast === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterFast' when calling timeFilterFast");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseTimeFilterFast;

      return this.apiClient.callApi(
        '/v4/time-filter/fast', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeFilterPostcodeDistricts operation.
     * @callback module:api/DefaultApi~timeFilterPostcodeDistrictsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseTimeFilterPostcodeDistricts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestTimeFilterPostcodeDistricts} requestTimeFilterPostcodeDistricts 
     * @param {module:api/DefaultApi~timeFilterPostcodeDistrictsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseTimeFilterPostcodeDistricts}
     */
    this.timeFilterPostcodeDistricts = function(requestTimeFilterPostcodeDistricts, callback) {
      var postBody = requestTimeFilterPostcodeDistricts;

      // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
      if (requestTimeFilterPostcodeDistricts === undefined || requestTimeFilterPostcodeDistricts === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterPostcodeDistricts' when calling timeFilterPostcodeDistricts");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseTimeFilterPostcodeDistricts;

      return this.apiClient.callApi(
        '/v4/time-filter/postcode-districts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeFilterPostcodeSectors operation.
     * @callback module:api/DefaultApi~timeFilterPostcodeSectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseTimeFilterPostcodeSectors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestTimeFilterPostcodeSectors} requestTimeFilterPostcodeSectors 
     * @param {module:api/DefaultApi~timeFilterPostcodeSectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseTimeFilterPostcodeSectors}
     */
    this.timeFilterPostcodeSectors = function(requestTimeFilterPostcodeSectors, callback) {
      var postBody = requestTimeFilterPostcodeSectors;

      // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
      if (requestTimeFilterPostcodeSectors === undefined || requestTimeFilterPostcodeSectors === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterPostcodeSectors' when calling timeFilterPostcodeSectors");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseTimeFilterPostcodeSectors;

      return this.apiClient.callApi(
        '/v4/time-filter/postcode-sectors', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeFilterPostcodes operation.
     * @callback module:api/DefaultApi~timeFilterPostcodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseTimeFilterPostcodes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestTimeFilterPostcodes} requestTimeFilterPostcodes 
     * @param {module:api/DefaultApi~timeFilterPostcodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseTimeFilterPostcodes}
     */
    this.timeFilterPostcodes = function(requestTimeFilterPostcodes, callback) {
      var postBody = requestTimeFilterPostcodes;

      // verify the required parameter 'requestTimeFilterPostcodes' is set
      if (requestTimeFilterPostcodes === undefined || requestTimeFilterPostcodes === null) {
        throw new Error("Missing the required parameter 'requestTimeFilterPostcodes' when calling timeFilterPostcodes");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ResponseTimeFilterPostcodes;

      return this.apiClient.callApi(
        '/v4/time-filter/postcodes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeMap operation.
     * @callback module:api/DefaultApi~timeMapCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseTimeMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RequestTimeMap} requestTimeMap 
     * @param {module:api/DefaultApi~timeMapCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseTimeMap}
     */
    this.timeMap = function(requestTimeMap, callback) {
      var postBody = requestTimeMap;

      // verify the required parameter 'requestTimeMap' is set
      if (requestTimeMap === undefined || requestTimeMap === null) {
        throw new Error("Missing the required parameter 'requestTimeMap' when calling timeMap");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey', 'ApplicationId'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json', 'application/vnd.wkt+json', 'application/vnd.wkt-no-holes+json', 'application/vnd.bounding-boxes+json'];
      var returnType = ResponseTimeMap;

      return this.apiClient.callApi(
        '/v4/time-map', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
