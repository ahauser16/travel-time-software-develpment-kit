#![allow(unused_extern_crates)]
extern crate serde_ignored;
extern crate tokio_core;
extern crate native_tls;
extern crate hyper_tls;
extern crate openssl;
extern crate mime;
extern crate uuid;
extern crate chrono;
extern crate percent_encoding;
extern crate url;


use std::sync::Arc;
use std::marker::PhantomData;
use futures::{Future, future, Stream, stream};
use hyper;
use hyper::{Request, Response, Error, StatusCode};
use hyper::header::{Headers, ContentType};
use self::url::form_urlencoded;
use mimetypes;

use serde_json;


#[allow(unused_imports)]
use std::collections::{HashMap, BTreeMap};
#[allow(unused_imports)]
use swagger;
use std::io;

#[allow(unused_imports)]
use std::collections::BTreeSet;

pub use swagger::auth::Authorization;
use swagger::{ApiError, XSpanId, XSpanIdString, Has, RequestParser};
use swagger::auth::Scopes;

use {Api,
     GeocodingReverseSearchResponse,
     GeocodingSearchResponse,
     MapInfoResponse,
     RoutesResponse,
     SupportedLocationsResponse,
     TimeFilterResponse,
     TimeFilterFastResponse,
     TimeFilterPostcodeDistrictsResponse,
     TimeFilterPostcodeSectorsResponse,
     TimeFilterPostcodesResponse,
     TimeMapResponse
     };
#[allow(unused_imports)]
use models;

pub mod context;

header! { (Warning, "Warning") => [String] }

mod paths {
    extern crate regex;

    lazy_static! {
        pub static ref GLOBAL_REGEX_SET: regex::RegexSet = regex::RegexSet::new(&[
            r"^/v4/geocoding/reverse$",
            r"^/v4/geocoding/search$",
            r"^/v4/map-info$",
            r"^/v4/routes$",
            r"^/v4/supported-locations$",
            r"^/v4/time-filter$",
            r"^/v4/time-filter/fast$",
            r"^/v4/time-filter/postcode-districts$",
            r"^/v4/time-filter/postcode-sectors$",
            r"^/v4/time-filter/postcodes$",
            r"^/v4/time-map$"
        ]).unwrap();
    }
    pub static ID_V4_GEOCODING_REVERSE: usize = 0;
    pub static ID_V4_GEOCODING_SEARCH: usize = 1;
    pub static ID_V4_MAP_INFO: usize = 2;
    pub static ID_V4_ROUTES: usize = 3;
    pub static ID_V4_SUPPORTED_LOCATIONS: usize = 4;
    pub static ID_V4_TIME_FILTER: usize = 5;
    pub static ID_V4_TIME_FILTER_FAST: usize = 6;
    pub static ID_V4_TIME_FILTER_POSTCODE_DISTRICTS: usize = 7;
    pub static ID_V4_TIME_FILTER_POSTCODE_SECTORS: usize = 8;
    pub static ID_V4_TIME_FILTER_POSTCODES: usize = 9;
    pub static ID_V4_TIME_MAP: usize = 10;
}

pub struct NewService<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static
{
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> NewService<T, C> {
        NewService{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::NewService for NewService<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Instance = Service<T, C>;

    fn new_service(&self) -> Result<Self::Instance, io::Error> {
        Ok(Service::new(self.api_impl.clone()))
    }
}

pub struct Service<T, C> {
    api_impl: Arc<T>,
    marker: PhantomData<C>,
}

impl<T, C> Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static {
    pub fn new<U: Into<Arc<T>>>(api_impl: U) -> Service<T, C> {
        Service{api_impl: api_impl.into(), marker: PhantomData}
    }
}

impl<T, C> hyper::server::Service for Service<T, C>
where
    T: Api<C> + Clone + 'static,
    C: Has<XSpanIdString> + Has<Option<Authorization>> + 'static
{
    type Request = (Request, C);
    type Response = Response;
    type Error = Error;
    type Future = Box<Future<Item=Response, Error=Error>>;

    fn call(&self, (req, mut context): Self::Request) -> Self::Future {
        let api_impl = self.api_impl.clone();
        let (method, uri, _, headers, body) = req.deconstruct();
        let path = paths::GLOBAL_REGEX_SET.matches(uri.path());

        // This match statement is duplicated below in `parse_operation_id()`.
        // Please update both places if changing how this code is autogenerated.
        match &method {

            // GeocodingReverseSearch - GET /v4/geocoding/reverse
            &hyper::Method::Get if path.matched(paths::ID_V4_GEOCODING_REVERSE) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }





                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_focus_lat = query_params.iter().filter(|e| e.0 == "focus.lat").map(|e| e.1.to_owned())

                    .nth(0);
                let param_focus_lat = match param_focus_lat {
                    Some(param_focus_lat) => match param_focus_lat.parse::<f64>() {
                        Ok(param_focus_lat) => param_focus_lat,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter focus.lat - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter focus.lat"))),
                };
                let param_focus_lng = query_params.iter().filter(|e| e.0 == "focus.lng").map(|e| e.1.to_owned())

                    .nth(0);
                let param_focus_lng = match param_focus_lng {
                    Some(param_focus_lng) => match param_focus_lng.parse::<f64>() {
                        Ok(param_focus_lng) => param_focus_lng,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter focus.lng - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter focus.lng"))),
                };
                let param_within_country = query_params.iter().filter(|e| e.0 == "within.country").map(|e| e.1.to_owned())

                    .nth(0);

                let param_within_country = param_within_country.and_then(|param_within_country| param_within_country.parse::<>().ok());



                Box::new({
                        {{

                                Box::new(api_impl.geocoding_reverse_search(param_focus_lat, param_focus_lng, param_within_country, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GeocodingReverseSearchResponse::MatchAQueryStringToGeographicCoordinates

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GEOCODING_REVERSE_SEARCH_MATCH_A_QUERY_STRING_TO_GEOGRAPHIC_COORDINATES.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                GeocodingReverseSearchResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GEOCODING_REVERSE_SEARCH_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // GeocodingSearch - GET /v4/geocoding/search
            &hyper::Method::Get if path.matched(paths::ID_V4_GEOCODING_SEARCH) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }





                // Query parameters (note that non-required or collection query parameters will ignore garbage values, rather than causing a 400 response)
                let query_params = form_urlencoded::parse(uri.query().unwrap_or_default().as_bytes()).collect::<Vec<_>>();
                let param_query = query_params.iter().filter(|e| e.0 == "query").map(|e| e.1.to_owned())

                    .nth(0);
                let param_query = match param_query {
                    Some(param_query) => match param_query.parse::<String>() {
                        Ok(param_query) => param_query,
                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse query parameter query - doesn't match schema: {}", e)))),
                    },
                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required query parameter query"))),
                };
                let param_within_country = query_params.iter().filter(|e| e.0 == "within.country").map(|e| e.1.to_owned())

                    .nth(0);

                let param_within_country = param_within_country.and_then(|param_within_country| param_within_country.parse::<>().ok());
                let param_focus_lat = query_params.iter().filter(|e| e.0 == "focus.lat").map(|e| e.1.to_owned())

                    .nth(0);

                let param_focus_lat = param_focus_lat.and_then(|param_focus_lat| param_focus_lat.parse::<>().ok());
                let param_focus_lng = query_params.iter().filter(|e| e.0 == "focus.lng").map(|e| e.1.to_owned())

                    .nth(0);

                let param_focus_lng = param_focus_lng.and_then(|param_focus_lng| param_focus_lng.parse::<>().ok());



                Box::new({
                        {{

                                Box::new(api_impl.geocoding_search(param_query, param_within_country, param_focus_lat, param_focus_lng, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                GeocodingSearchResponse::MatchAQueryStringToGeographicCoordinates

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GEOCODING_SEARCH_MATCH_A_QUERY_STRING_TO_GEOGRAPHIC_COORDINATES.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                GeocodingSearchResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::GEOCODING_SEARCH_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // MapInfo - GET /v4/map-info
            &hyper::Method::Get if path.matched(paths::ID_V4_MAP_INFO) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }







                Box::new({
                        {{

                                Box::new(api_impl.map_info(&context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        match result {
                                            Ok(rsp) => match rsp {
                                                MapInfoResponse::ReturnsInformationAboutCurrentlySupportedCountries

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::MAP_INFO_RETURNS_INFORMATION_ABOUT_CURRENTLY_SUPPORTED_COUNTRIES.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                MapInfoResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::MAP_INFO_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))

                        }}
                }) as Box<Future<Item=Response, Error=Error>>


            },


            // Routes - POST /v4/routes
            &hyper::Method::Post if path.matched(paths::ID_V4_ROUTES) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_routes: Option<models::RequestRoutes> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_routes) => param_request_routes,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestRoutes - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_routes = match param_request_routes {
                                    Some(param_request_routes) => param_request_routes,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestRoutes"))),
                                };


                                Box::new(api_impl.routes(param_request_routes, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                RoutesResponse::ReturnsRoutingInformationBetweenSourceAndDestinations

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::ROUTES_RETURNS_ROUTING_INFORMATION_BETWEEN_SOURCE_AND_DESTINATIONS.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                RoutesResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::ROUTES_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestRoutes: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // SupportedLocations - POST /v4/supported-locations
            &hyper::Method::Post if path.matched(paths::ID_V4_SUPPORTED_LOCATIONS) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_supported_locations: Option<models::RequestSupportedLocations> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_supported_locations) => param_request_supported_locations,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestSupportedLocations - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_supported_locations = match param_request_supported_locations {
                                    Some(param_request_supported_locations) => param_request_supported_locations,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestSupportedLocations"))),
                                };


                                Box::new(api_impl.supported_locations(param_request_supported_locations, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                SupportedLocationsResponse::FindOutWhatPointsAreSupportedByOurApi

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::SUPPORTED_LOCATIONS_FIND_OUT_WHAT_POINTS_ARE_SUPPORTED_BY_OUR_API.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                SupportedLocationsResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::SUPPORTED_LOCATIONS_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestSupportedLocations: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // TimeFilter - POST /v4/time-filter
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_time_filter: Option<models::RequestTimeFilter> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_time_filter) => param_request_time_filter,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestTimeFilter - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_time_filter = match param_request_time_filter {
                                    Some(param_request_time_filter) => param_request_time_filter,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestTimeFilter"))),
                                };


                                Box::new(api_impl.time_filter(param_request_time_filter, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                TimeFilterResponse::GivenOriginAndDestinationPointsFilterOutPointsThatCannotBeReachedWithinSpecifiedTimeLimit

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_GIVEN_ORIGIN_AND_DESTINATION_POINTS_FILTER_OUT_POINTS_THAT_CANNOT_BE_REACHED_WITHIN_SPECIFIED_TIME_LIMIT.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                TimeFilterResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestTimeFilter: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // TimeFilterFast - POST /v4/time-filter/fast
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_FAST) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_time_filter_fast: Option<models::RequestTimeFilterFast> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_time_filter_fast) => param_request_time_filter_fast,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestTimeFilterFast - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_time_filter_fast = match param_request_time_filter_fast {
                                    Some(param_request_time_filter_fast) => param_request_time_filter_fast,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestTimeFilterFast"))),
                                };


                                Box::new(api_impl.time_filter_fast(param_request_time_filter_fast, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                TimeFilterFastResponse::AVeryFastVersionOfTimeFilter

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_FAST_A_VERY_FAST_VERSION_OF_TIME_FILTER.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                TimeFilterFastResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_FAST_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestTimeFilterFast: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // TimeFilterPostcodeDistricts - POST /v4/time-filter/postcode-districts
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_POSTCODE_DISTRICTS) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_time_filter_postcode_districts: Option<models::RequestTimeFilterPostcodeDistricts> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_time_filter_postcode_districts) => param_request_time_filter_postcode_districts,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestTimeFilterPostcodeDistricts - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_time_filter_postcode_districts = match param_request_time_filter_postcode_districts {
                                    Some(param_request_time_filter_postcode_districts) => param_request_time_filter_postcode_districts,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestTimeFilterPostcodeDistricts"))),
                                };


                                Box::new(api_impl.time_filter_postcode_districts(param_request_time_filter_postcode_districts, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                TimeFilterPostcodeDistrictsResponse::FindDistrictsThatHaveACertainCoverageFromOriginAndGetStatisticsAboutPostcodesWithinSuchDistricts

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_POSTCODE_DISTRICTS_FIND_DISTRICTS_THAT_HAVE_A_CERTAIN_COVERAGE_FROM_ORIGIN_AND_GET_STATISTICS_ABOUT_POSTCODES_WITHIN_SUCH_DISTRICTS.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                TimeFilterPostcodeDistrictsResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_POSTCODE_DISTRICTS_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestTimeFilterPostcodeDistricts: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // TimeFilterPostcodeSectors - POST /v4/time-filter/postcode-sectors
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_POSTCODE_SECTORS) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_time_filter_postcode_sectors: Option<models::RequestTimeFilterPostcodeSectors> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_time_filter_postcode_sectors) => param_request_time_filter_postcode_sectors,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestTimeFilterPostcodeSectors - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_time_filter_postcode_sectors = match param_request_time_filter_postcode_sectors {
                                    Some(param_request_time_filter_postcode_sectors) => param_request_time_filter_postcode_sectors,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestTimeFilterPostcodeSectors"))),
                                };


                                Box::new(api_impl.time_filter_postcode_sectors(param_request_time_filter_postcode_sectors, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                TimeFilterPostcodeSectorsResponse::FindSectorsThatHaveACertainCoverageFromOriginAndGetStatisticsAboutPostcodesWithinSuchSectors

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_POSTCODE_SECTORS_FIND_SECTORS_THAT_HAVE_A_CERTAIN_COVERAGE_FROM_ORIGIN_AND_GET_STATISTICS_ABOUT_POSTCODES_WITHIN_SUCH_SECTORS.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                TimeFilterPostcodeSectorsResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_POSTCODE_SECTORS_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestTimeFilterPostcodeSectors: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // TimeFilterPostcodes - POST /v4/time-filter/postcodes
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_POSTCODES) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_time_filter_postcodes: Option<models::RequestTimeFilterPostcodes> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_time_filter_postcodes) => param_request_time_filter_postcodes,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestTimeFilterPostcodes - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_time_filter_postcodes = match param_request_time_filter_postcodes {
                                    Some(param_request_time_filter_postcodes) => param_request_time_filter_postcodes,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestTimeFilterPostcodes"))),
                                };


                                Box::new(api_impl.time_filter_postcodes(param_request_time_filter_postcodes, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                TimeFilterPostcodesResponse::FindReachablePostcodesFromOriginAndGetStatisticsAboutSuchPostcodes

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_POSTCODES_FIND_REACHABLE_POSTCODES_FROM_ORIGIN_AND_GET_STATISTICS_ABOUT_SUCH_POSTCODES.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                TimeFilterPostcodesResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_FILTER_POSTCODES_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestTimeFilterPostcodes: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            // TimeMap - POST /v4/time-map
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_MAP) => {
                {
                    let authorization = match (&context as &Has<Option<Authorization>>).get() {
                        &Some(ref authorization) => authorization,
                        &None => return Box::new(future::ok(Response::new()
                                                .with_status(StatusCode::Forbidden)
                                                .with_body("Unauthenticated"))),
                    };

                }






                // Body parameters (note that non-required body parameters will ignore garbage
                // values, rather than causing a 400 response). Produce warning header and logs for
                // any unused fields.
                Box::new(body.concat2()
                    .then(move |result| -> Box<Future<Item=Response, Error=Error>> {
                        match result {
                            Ok(body) => {

                                let mut unused_elements = Vec::new();
                                let param_request_time_map: Option<models::RequestTimeMap> = if !body.is_empty() {

                                    let deserializer = &mut serde_json::Deserializer::from_slice(&*body);

                                    match serde_ignored::deserialize(deserializer, |path| {
                                            warn!("Ignoring unknown field in body: {}", path);
                                            unused_elements.push(path.to_string());
                                    }) {
                                        Ok(param_request_time_map) => param_request_time_map,
                                        Err(e) => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't parse body parameter RequestTimeMap - doesn't match schema: {}", e)))),
                                    }

                                } else {
                                    None
                                };
                                let param_request_time_map = match param_request_time_map {
                                    Some(param_request_time_map) => param_request_time_map,
                                    None => return Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body("Missing required body parameter RequestTimeMap"))),
                                };


                                Box::new(api_impl.time_map(param_request_time_map, &context)
                                    .then(move |result| {
                                        let mut response = Response::new();
                                        response.headers_mut().set(XSpanId((&context as &Has<XSpanIdString>).get().0.to_string()));

                                        if !unused_elements.is_empty() {
                                            response.headers_mut().set(Warning(format!("Ignoring unknown fields in body: {:?}", unused_elements)));
                                        }

                                        match result {
                                            Ok(rsp) => match rsp {
                                                TimeMapResponse::GivenOriginCoordinates

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(200).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_MAP_GIVEN_ORIGIN_COORDINATES.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                                TimeMapResponse::TheJsonBodyReturnedUponError

                                                    (body)


                                                => {
                                                    response.set_status(StatusCode::try_from(0).unwrap());

                                                    response.headers_mut().set(ContentType(mimetypes::responses::TIME_MAP_THE_JSON_BODY_RETURNED_UPON_ERROR.clone()));


                                                    let body = serde_json::to_string(&body).expect("impossible to fail to serialize");

                                                    response.set_body(body);
                                                },
                                            },
                                            Err(_) => {
                                                // Application code returned an error. This should not happen, as the implementation should
                                                // return a valid response.
                                                response.set_status(StatusCode::InternalServerError);
                                                response.set_body("An internal error occurred");
                                            },
                                        }

                                        future::ok(response)
                                    }
                                ))


                            },
                            Err(e) => Box::new(future::ok(Response::new().with_status(StatusCode::BadRequest).with_body(format!("Couldn't read body parameter RequestTimeMap: {}", e)))),
                        }
                    })
                ) as Box<Future<Item=Response, Error=Error>>

            },


            _ => Box::new(future::ok(Response::new().with_status(StatusCode::NotFound))) as Box<Future<Item=Response, Error=Error>>,
        }
    }
}

impl<T, C> Clone for Service<T, C>
{
    fn clone(&self) -> Self {
        Service {
            api_impl: self.api_impl.clone(),
            marker: self.marker.clone(),
        }
    }
}

/// Request parser for `Api`.
pub struct ApiRequestParser;
impl RequestParser for ApiRequestParser {
    fn parse_operation_id(request: &Request) -> Result<&'static str, ()> {
        let path = paths::GLOBAL_REGEX_SET.matches(request.uri().path());
        match request.method() {

            // GeocodingReverseSearch - GET /v4/geocoding/reverse
            &hyper::Method::Get if path.matched(paths::ID_V4_GEOCODING_REVERSE) => Ok("GeocodingReverseSearch"),

            // GeocodingSearch - GET /v4/geocoding/search
            &hyper::Method::Get if path.matched(paths::ID_V4_GEOCODING_SEARCH) => Ok("GeocodingSearch"),

            // MapInfo - GET /v4/map-info
            &hyper::Method::Get if path.matched(paths::ID_V4_MAP_INFO) => Ok("MapInfo"),

            // Routes - POST /v4/routes
            &hyper::Method::Post if path.matched(paths::ID_V4_ROUTES) => Ok("Routes"),

            // SupportedLocations - POST /v4/supported-locations
            &hyper::Method::Post if path.matched(paths::ID_V4_SUPPORTED_LOCATIONS) => Ok("SupportedLocations"),

            // TimeFilter - POST /v4/time-filter
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER) => Ok("TimeFilter"),

            // TimeFilterFast - POST /v4/time-filter/fast
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_FAST) => Ok("TimeFilterFast"),

            // TimeFilterPostcodeDistricts - POST /v4/time-filter/postcode-districts
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_POSTCODE_DISTRICTS) => Ok("TimeFilterPostcodeDistricts"),

            // TimeFilterPostcodeSectors - POST /v4/time-filter/postcode-sectors
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_POSTCODE_SECTORS) => Ok("TimeFilterPostcodeSectors"),

            // TimeFilterPostcodes - POST /v4/time-filter/postcodes
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_FILTER_POSTCODES) => Ok("TimeFilterPostcodes"),

            // TimeMap - POST /v4/time-map
            &hyper::Method::Post if path.matched(paths::ID_V4_TIME_MAP) => Ok("TimeMap"),
            _ => Err(()),
        }
    }
}
