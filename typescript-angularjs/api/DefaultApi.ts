/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class DefaultApi {
    protected basePath = 'https://api.traveltimeapp.com';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * @param lat 
     * @param lng 
     * @param withinCountry 
     */
    public geocodingReverseSearch (lat: number, lng: number, withinCountry?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseGeocoding> {
        const localVarPath = this.basePath + '/v4/geocoding/reverse';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'lat' is not null or undefined
        if (lat === null || lat === undefined) {
            throw new Error('Required parameter lat was null or undefined when calling geocodingReverseSearch.');
        }

        // verify required parameter 'lng' is not null or undefined
        if (lng === null || lng === undefined) {
            throw new Error('Required parameter lng was null or undefined when calling geocodingReverseSearch.');
        }

        if (lat !== undefined) {
            queryParameters['lat'] = lat;
        }

        if (lng !== undefined) {
            queryParameters['lng'] = lng;
        }

        if (withinCountry !== undefined) {
            queryParameters['within.country'] = withinCountry;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param query 
     * @param focusLat 
     * @param focusLng 
     * @param withinCountry 
     */
    public geocodingSearch (query: string, focusLat?: number, focusLng?: number, withinCountry?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseGeocoding> {
        const localVarPath = this.basePath + '/v4/geocoding/search';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling geocodingSearch.');
        }

        if (query !== undefined) {
            queryParameters['query'] = query;
        }

        if (focusLat !== undefined) {
            queryParameters['focus.lat'] = focusLat;
        }

        if (focusLng !== undefined) {
            queryParameters['focus.lng'] = focusLng;
        }

        if (withinCountry !== undefined) {
            queryParameters['within.country'] = withinCountry;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     */
    public mapInfo (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseMapInfo> {
        const localVarPath = this.basePath + '/v4/map-info';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestRoutes 
     */
    public routes (requestRoutes: models.RequestRoutes, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseRoutes> {
        const localVarPath = this.basePath + '/v4/routes';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestRoutes' is not null or undefined
        if (requestRoutes === null || requestRoutes === undefined) {
            throw new Error('Required parameter requestRoutes was null or undefined when calling routes.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestRoutes,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestSupportedLocations 
     */
    public supportedLocations (requestSupportedLocations: models.RequestSupportedLocations, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseSupportedLocations> {
        const localVarPath = this.basePath + '/v4/supported-locations';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestSupportedLocations' is not null or undefined
        if (requestSupportedLocations === null || requestSupportedLocations === undefined) {
            throw new Error('Required parameter requestSupportedLocations was null or undefined when calling supportedLocations.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestSupportedLocations,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestTimeFilter 
     */
    public timeFilter (requestTimeFilter: models.RequestTimeFilter, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseTimeFilter> {
        const localVarPath = this.basePath + '/v4/time-filter';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestTimeFilter' is not null or undefined
        if (requestTimeFilter === null || requestTimeFilter === undefined) {
            throw new Error('Required parameter requestTimeFilter was null or undefined when calling timeFilter.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestTimeFilter,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestTimeFilterFast 
     */
    public timeFilterFast (requestTimeFilterFast: models.RequestTimeFilterFast, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseTimeFilterFast> {
        const localVarPath = this.basePath + '/v4/time-filter/fast';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestTimeFilterFast' is not null or undefined
        if (requestTimeFilterFast === null || requestTimeFilterFast === undefined) {
            throw new Error('Required parameter requestTimeFilterFast was null or undefined when calling timeFilterFast.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestTimeFilterFast,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestTimeFilterPostcodeDistricts 
     */
    public timeFilterPostcodeDistricts (requestTimeFilterPostcodeDistricts: models.RequestTimeFilterPostcodeDistricts, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseTimeFilterPostcodeDistricts> {
        const localVarPath = this.basePath + '/v4/time-filter/postcode-districts';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestTimeFilterPostcodeDistricts' is not null or undefined
        if (requestTimeFilterPostcodeDistricts === null || requestTimeFilterPostcodeDistricts === undefined) {
            throw new Error('Required parameter requestTimeFilterPostcodeDistricts was null or undefined when calling timeFilterPostcodeDistricts.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestTimeFilterPostcodeDistricts,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestTimeFilterPostcodeSectors 
     */
    public timeFilterPostcodeSectors (requestTimeFilterPostcodeSectors: models.RequestTimeFilterPostcodeSectors, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseTimeFilterPostcodeSectors> {
        const localVarPath = this.basePath + '/v4/time-filter/postcode-sectors';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestTimeFilterPostcodeSectors' is not null or undefined
        if (requestTimeFilterPostcodeSectors === null || requestTimeFilterPostcodeSectors === undefined) {
            throw new Error('Required parameter requestTimeFilterPostcodeSectors was null or undefined when calling timeFilterPostcodeSectors.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestTimeFilterPostcodeSectors,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestTimeFilterPostcodes 
     */
    public timeFilterPostcodes (requestTimeFilterPostcodes: models.RequestTimeFilterPostcodes, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseTimeFilterPostcodes> {
        const localVarPath = this.basePath + '/v4/time-filter/postcodes';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestTimeFilterPostcodes' is not null or undefined
        if (requestTimeFilterPostcodes === null || requestTimeFilterPostcodes === undefined) {
            throw new Error('Required parameter requestTimeFilterPostcodes was null or undefined when calling timeFilterPostcodes.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestTimeFilterPostcodes,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * 
     * @param requestTimeMap 
     */
    public timeMap (requestTimeMap: models.RequestTimeMap, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.ResponseTimeMap> {
        const localVarPath = this.basePath + '/v4/time-map';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'requestTimeMap' is not null or undefined
        if (requestTimeMap === null || requestTimeMap === undefined) {
            throw new Error('Required parameter requestTimeMap was null or undefined when calling timeMap.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: requestTimeMap,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
