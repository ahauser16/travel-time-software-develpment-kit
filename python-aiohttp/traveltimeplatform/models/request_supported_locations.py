# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from traveltimeplatform.models.base_model_ import Model
from traveltimeplatform.models.request_location import RequestLocation
from traveltimeplatform import util


class RequestSupportedLocations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, locations: List[RequestLocation]=None):
        """RequestSupportedLocations - a model defined in OpenAPI

        :param locations: The locations of this RequestSupportedLocations.
        """
        self.openapi_types = {
            'locations': List[RequestLocation]
        }

        self.attribute_map = {
            'locations': 'locations'
        }

        self._locations = locations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestSupportedLocations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestSupportedLocations of this RequestSupportedLocations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def locations(self):
        """Gets the locations of this RequestSupportedLocations.


        :return: The locations of this RequestSupportedLocations.
        :rtype: List[RequestLocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this RequestSupportedLocations.


        :param locations: The locations of this RequestSupportedLocations.
        :type locations: List[RequestLocation]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations
