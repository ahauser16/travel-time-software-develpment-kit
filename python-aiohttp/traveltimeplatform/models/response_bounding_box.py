# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from traveltimeplatform.models.base_model_ import Model
from traveltimeplatform.models.response_box import ResponseBox
from traveltimeplatform import util


class ResponseBoundingBox(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, envelope: ResponseBox=None, boxes: List[ResponseBox]=None):
        """ResponseBoundingBox - a model defined in OpenAPI

        :param envelope: The envelope of this ResponseBoundingBox.
        :param boxes: The boxes of this ResponseBoundingBox.
        """
        self.openapi_types = {
            'envelope': ResponseBox,
            'boxes': List[ResponseBox]
        }

        self.attribute_map = {
            'envelope': 'envelope',
            'boxes': 'boxes'
        }

        self._envelope = envelope
        self._boxes = boxes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseBoundingBox':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseBoundingBox of this ResponseBoundingBox.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def envelope(self):
        """Gets the envelope of this ResponseBoundingBox.


        :return: The envelope of this ResponseBoundingBox.
        :rtype: ResponseBox
        """
        return self._envelope

    @envelope.setter
    def envelope(self, envelope):
        """Sets the envelope of this ResponseBoundingBox.


        :param envelope: The envelope of this ResponseBoundingBox.
        :type envelope: ResponseBox
        """
        if envelope is None:
            raise ValueError("Invalid value for `envelope`, must not be `None`")

        self._envelope = envelope

    @property
    def boxes(self):
        """Gets the boxes of this ResponseBoundingBox.


        :return: The boxes of this ResponseBoundingBox.
        :rtype: List[ResponseBox]
        """
        return self._boxes

    @boxes.setter
    def boxes(self, boxes):
        """Sets the boxes of this ResponseBoundingBox.


        :param boxes: The boxes of this ResponseBoundingBox.
        :type boxes: List[ResponseBox]
        """
        if boxes is None:
            raise ValueError("Invalid value for `boxes`, must not be `None`")

        self._boxes = boxes
