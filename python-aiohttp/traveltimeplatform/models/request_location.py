# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from traveltimeplatform.models.base_model_ import Model
from traveltimeplatform.models.coords import Coords
from traveltimeplatform import util


class RequestLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, coords: Coords=None):
        """RequestLocation - a model defined in OpenAPI

        :param id: The id of this RequestLocation.
        :param coords: The coords of this RequestLocation.
        """
        self.openapi_types = {
            'id': str,
            'coords': Coords
        }

        self.attribute_map = {
            'id': 'id',
            'coords': 'coords'
        }

        self._id = id
        self._coords = coords

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RequestLocation of this RequestLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this RequestLocation.


        :return: The id of this RequestLocation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RequestLocation.


        :param id: The id of this RequestLocation.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def coords(self):
        """Gets the coords of this RequestLocation.


        :return: The coords of this RequestLocation.
        :rtype: Coords
        """
        return self._coords

    @coords.setter
    def coords(self, coords):
        """Sets the coords of this RequestLocation.


        :param coords: The coords of this RequestLocation.
        :type coords: Coords
        """
        if coords is None:
            raise ValueError("Invalid value for `coords`, must not be `None`")

        self._coords = coords
