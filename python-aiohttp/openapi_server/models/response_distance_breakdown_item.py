# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model_ import Model
from openapi_server.models.response_transportation_mode import ResponseTransportationMode
from openapi_server import util


class ResponseDistanceBreakdownItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: ResponseTransportationMode=None, distance: int=None):
        """ResponseDistanceBreakdownItem - a model defined in OpenAPI

        :param mode: The mode of this ResponseDistanceBreakdownItem.
        :param distance: The distance of this ResponseDistanceBreakdownItem.
        """
        self.openapi_types = {
            'mode': ResponseTransportationMode,
            'distance': int
        }

        self.attribute_map = {
            'mode': 'mode',
            'distance': 'distance'
        }

        self._mode = mode
        self._distance = distance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseDistanceBreakdownItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseDistanceBreakdownItem of this ResponseDistanceBreakdownItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this ResponseDistanceBreakdownItem.


        :return: The mode of this ResponseDistanceBreakdownItem.
        :rtype: ResponseTransportationMode
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ResponseDistanceBreakdownItem.


        :param mode: The mode of this ResponseDistanceBreakdownItem.
        :type mode: ResponseTransportationMode
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def distance(self):
        """Gets the distance of this ResponseDistanceBreakdownItem.


        :return: The distance of this ResponseDistanceBreakdownItem.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ResponseDistanceBreakdownItem.


        :param distance: The distance of this ResponseDistanceBreakdownItem.
        :type distance: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")

        self._distance = distance
