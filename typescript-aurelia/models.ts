/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

export interface Coords {
  lat: number;
  lng: number;
}

export type RequestArrivalTimePeriod = 'weekday_morning';
export interface RequestLocation {
  id: string;
  coords: Coords;
}

export interface RequestRangeFull {
  enabled: boolean;
  maxResults: number;
  width: number;
}

export interface RequestRangeNoMaxResults {
  enabled: boolean;
  width: number;
}

export interface RequestRoutes {
  locations: Array<RequestLocation>;
  departureSearches?: Array<RequestRoutesDepartureSearch>;
  arrivalSearches?: Array<RequestRoutesArrivalSearch>;
}

export interface RequestRoutesArrivalSearch {
  id: string;
  departureLocationIds: Array<string>;
  arrivalLocationId: string;
  transportation: RequestTransportation;
  arrivalTime: Date;
  properties: Array<RequestRoutesProperty>;
  range?: RequestRangeFull;
}

export interface RequestRoutesDepartureSearch {
  id: string;
  departureLocationId: string;
  arrivalLocationIds: Array<string>;
  transportation: RequestTransportation;
  departureTime: Date;
  properties: Array<RequestRoutesProperty>;
  range?: RequestRangeFull;
}

export type RequestRoutesProperty = 'travel_time' | 'distance' | 'fares' | 'route';
export interface RequestSupportedLocations {
  locations: Array<RequestLocation>;
}

export interface RequestTimeFilter {
  locations: Array<RequestLocation>;
  departureSearches?: Array<RequestTimeFilterDepartureSearch>;
  arrivalSearches?: Array<RequestTimeFilterArrivalSearch>;
}

export interface RequestTimeFilterArrivalSearch {
  id: string;
  departureLocationIds: Array<string>;
  arrivalLocationId: string;
  transportation: RequestTransportation;
  travelTime: number;
  arrivalTime: Date;
  properties: Array<RequestTimeFilterProperty>;
  range?: RequestRangeFull;
}

export interface RequestTimeFilterDepartureSearch {
  id: string;
  departureLocationId: string;
  arrivalLocationIds: Array<string>;
  transportation: RequestTransportation;
  travelTime: number;
  departureTime: Date;
  properties: Array<RequestTimeFilterProperty>;
  range?: RequestRangeFull;
}

export interface RequestTimeFilterFast {
  locations: Array<RequestLocation>;
  arrivalSearches: RequestTimeFilterFastArrivalSearches;
}

export interface RequestTimeFilterFastArrivalManyToOneSearch {
  id: string;
  arrivalLocationId: string;
  departureLocationIds: Array<string>;
  transportation: RequestTransportationFast;
  travelTime: number;
  arrivalTimePeriod: RequestArrivalTimePeriod;
  properties: Array<RequestTimeFilterFastProperty>;
}

export interface RequestTimeFilterFastArrivalOneToManySearch {
  id: string;
  departureLocationId: string;
  arrivalLocationIds: Array<string>;
  transportation: RequestTransportationFast;
  travelTime: number;
  arrivalTimePeriod: RequestArrivalTimePeriod;
  properties: Array<RequestTimeFilterFastProperty>;
}

export interface RequestTimeFilterFastArrivalSearches {
  manyToOne?: Array<RequestTimeFilterFastArrivalManyToOneSearch>;
  oneToMany?: Array<RequestTimeFilterFastArrivalOneToManySearch>;
}

export type RequestTimeFilterFastProperty = 'travel_time' | 'fares';
export interface RequestTimeFilterPostcodeDistricts {
  departureSearches?: Array<RequestTimeFilterPostcodeDistrictsDepartureSearch>;
  arrivalSearches?: Array<RequestTimeFilterPostcodeDistrictsArrivalSearch>;
}

export interface RequestTimeFilterPostcodeDistrictsArrivalSearch {
  id: string;
  transportation: RequestTransportation;
  travelTime: number;
  arrivalTime: Date;
  reachablePostcodesThreshold: number;
  properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
  range?: RequestRangeFull;
}

export interface RequestTimeFilterPostcodeDistrictsDepartureSearch {
  id: string;
  transportation: RequestTransportation;
  travelTime: number;
  departureTime: Date;
  reachablePostcodesThreshold: number;
  properties: Array<RequestTimeFilterPostcodeDistrictsProperty>;
  range?: RequestRangeFull;
}

export type RequestTimeFilterPostcodeDistrictsProperty = 'travel_time_reachable' | 'travel_time_all' | 'coverage';
export interface RequestTimeFilterPostcodeSectors {
  departureSearches?: Array<RequestTimeFilterPostcodeSectorsDepartureSearch>;
  arrivalSearches?: Array<RequestTimeFilterPostcodeSectorsArrivalSearch>;
}

export interface RequestTimeFilterPostcodeSectorsArrivalSearch {
  id: string;
  transportation: RequestTransportation;
  travelTime: number;
  arrivalTime: Date;
  reachablePostcodesThreshold: number;
  properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
  range?: RequestRangeFull;
}

export interface RequestTimeFilterPostcodeSectorsDepartureSearch {
  id: string;
  transportation: RequestTransportation;
  travelTime: number;
  departureTime: Date;
  reachablePostcodesThreshold: number;
  properties: Array<RequestTimeFilterPostcodeSectorsProperty>;
  range?: RequestRangeFull;
}

export type RequestTimeFilterPostcodeSectorsProperty = 'travel_time_reachable' | 'travel_time_all' | 'coverage';
export interface RequestTimeFilterPostcodes {
  departureSearches?: Array<RequestTimeFilterPostcodesDepartureSearch>;
  arrivalSearches?: Array<RequestTimeFilterPostcodesArrivalSearch>;
}

export interface RequestTimeFilterPostcodesArrivalSearch {
  id: string;
  transportation: RequestTransportation;
  travelTime: number;
  arrivalTime: Date;
  properties: Array<RequestTimeFilterPostcodesProperty>;
  range?: RequestRangeFull;
}

export interface RequestTimeFilterPostcodesDepartureSearch {
  id: string;
  transportation: RequestTransportation;
  travelTime: number;
  departureTime: Date;
  properties: Array<RequestTimeFilterPostcodesProperty>;
  range?: RequestRangeFull;
}

export type RequestTimeFilterPostcodesProperty = 'travel_time' | 'distance';
export type RequestTimeFilterProperty = 'travel_time' | 'distance' | 'distance_breakdown' | 'fares' | 'route';
export interface RequestTimeMap {
  departureSearches?: Array<RequestTimeMapDepartureSearch>;
  arrivalSearches?: Array<RequestTimeMapArrivalSearch>;
  unions?: Array<RequestUnionOnIntersection>;
  intersections?: Array<RequestUnionOnIntersection>;
}

export interface RequestTimeMapArrivalSearch {
  id: string;
  coords: Coords;
  transportation: RequestTransportation;
  travelTime: number;
  arrivalTime: Date;
  properties?: Array<RequestTimeMapProperty>;
  range?: RequestRangeNoMaxResults;
}

export interface RequestTimeMapDepartureSearch {
  id: string;
  coords: Coords;
  transportation: RequestTransportation;
  travelTime: number;
  departureTime: Date;
  properties?: Array<RequestTimeMapProperty>;
  range?: RequestRangeNoMaxResults;
}

export type RequestTimeMapProperty = 'is_only_walking';
export interface RequestTransportation {
  type: RequestTransportationTypeEnum;
  ptChangeDelay?: number;
  walkingTime?: number;
  drivingTimeToStation?: number;
  parkingTime?: number;
  boardingTime?: number;
}

/**
 * Enum for the type property.
 */
export type RequestTransportationTypeEnum = 'cycling' | 'driving' | 'driving+train' | 'public_transport' | 'walking' | 'coach' | 'bus' | 'train' | 'ferry' | 'driving+ferry' | 'cycling+ferry';

export interface RequestTransportationFast {
  type: RequestTransportationFastTypeEnum;
}

/**
 * Enum for the type property.
 */
export type RequestTransportationFastTypeEnum = 'public_transport' | 'driving' | 'driving+public_transport';

export interface RequestUnionOnIntersection {
  id: string;
  searchIds: Array<string>;
}

export interface ResponseBoundingBox {
  envelope: ResponseBox;
  boxes: Array<ResponseBox>;
}

export interface ResponseBox {
  minLat: number;
  maxLat: number;
  minLng: number;
  maxLng: number;
}

export interface ResponseDistanceBreakdownItem {
  mode: ResponseTransportationMode;
  distance: number;
}

export interface ResponseError {
  httpStatus?: number;
  errorCode?: number;
  description?: string;
  documentationLink?: string;
  additionalInfo?: { [key: string]: Array<string>; };
}

export interface ResponseFareTicket {
  type: ResponseFareTicketTypeEnum;
  price: number;
  currency: string;
}

/**
 * Enum for the type property.
 */
export type ResponseFareTicketTypeEnum = 'single' | 'week' | 'month' | 'year';

export interface ResponseFares {
  breakdown: Array<ResponseFaresBreakdownItem>;
  ticketsTotal: Array<ResponseFareTicket>;
}

export interface ResponseFaresBreakdownItem {
  modes: Array<ResponseTransportationMode>;
  routePartIds: Array<number>;
  tickets: Array<ResponseFareTicket>;
}

export interface ResponseFaresFast {
  ticketsTotal: Array<ResponseFareTicket>;
}

export interface ResponseGeocoding {
  type: string;
  features: Array<ResponseGeocodingGeoJsonFeature>;
}

export interface ResponseGeocodingGeoJsonFeature {
  type: string;
  geometry: ResponseGeocodingGeometry;
  properties: ResponseGeocodingProperties;
}

export interface ResponseGeocodingGeometry {
  type: string;
  coordinates: Array<number>;
}

export interface ResponseGeocodingProperties {
  name: string;
  label: string;
  score?: number;
  houseNumber?: string;
  street?: string;
  region?: string;
  regionCode?: string;
  neighbourhood?: string;
  county?: string;
  macroregion?: string;
  city?: string;
  country?: string;
  countryCode?: string;
  continent?: string;
  postcode?: string;
  features?: ResponseMapInfoFeatures;
}

export interface ResponseMapInfo {
  maps: Array<ResponseMapInfoMap>;
}

export interface ResponseMapInfoFeatures {
  publicTransport?: ResponseMapInfoFeaturesPublicTransport;
  fares: boolean;
  postcodes: boolean;
}

export interface ResponseMapInfoFeaturesPublicTransport {
  dateStart: Date;
  dateEnd: Date;
}

export interface ResponseMapInfoMap {
  name: string;
  features: ResponseMapInfoFeatures;
}

export interface ResponseRoute {
  departureTime: Date;
  arrivalTime: Date;
  parts: Array<ResponseRoutePart>;
}

export interface ResponseRoutePart {
  id: string;
  type: ResponseRoutePartTypeEnum;
  mode: ResponseTransportationMode;
  directions: string;
  distance: number;
  travelTime: number;
  coords: Array<Coords>;
  direction?: string;
  road?: string;
  turn?: string;
  line?: string;
  departureStation?: string;
  arrivalStation?: string;
  departsAt?: string;
  arrivesAt?: string;
  numStops?: number;
}

/**
 * Enum for the type property.
 */
export type ResponseRoutePartTypeEnum = 'basic' | 'start_end' | 'road' | 'public_transport';

export interface ResponseRoutes {
  results: Array<ResponseRoutesResult>;
}

export interface ResponseRoutesLocation {
  id: string;
  properties: Array<ResponseRoutesProperties>;
}

export interface ResponseRoutesProperties {
  travelTime?: number;
  distance?: number;
  fares?: ResponseFares;
  route?: ResponseRoute;
}

export interface ResponseRoutesResult {
  searchId: string;
  locations: Array<ResponseRoutesLocation>;
  unreachable: Array<string>;
}

export interface ResponseShape {
  shell: Array<Coords>;
  holes: Array<Array<Coords>>;
}

export interface ResponseSupportedLocation {
  id: string;
  mapName: string;
}

export interface ResponseSupportedLocations {
  locations: Array<ResponseSupportedLocation>;
  unsupportedLocations: Array<string>;
}

export interface ResponseTimeFilter {
  results: Array<ResponseTimeFilterResult>;
}

export interface ResponseTimeFilterFast {
  results: Array<ResponseTimeFilterFastResult>;
}

export interface ResponseTimeFilterFastLocation {
  id: string;
  properties: Array<ResponseTimeFilterFastProperties>;
}

export interface ResponseTimeFilterFastProperties {
  travelTime?: number;
  fares?: ResponseFaresFast;
}

export interface ResponseTimeFilterFastResult {
  searchId: string;
  locations: Array<ResponseTimeFilterFastLocation>;
  unreachable: Array<string>;
}

export interface ResponseTimeFilterLocation {
  id: string;
  properties: Array<ResponseTimeFilterProperties>;
}

export interface ResponseTimeFilterPostcode {
  code: ModelString;
  properties: Array<ResponseTimeFilterPostcodesProperties>;
}

export interface ResponseTimeFilterPostcodeDistrict {
  code: ModelString;
  properties: ResponseTimeFilterPostcodeDistrictProperties;
}

export interface ResponseTimeFilterPostcodeDistrictProperties {
  travelTimeReachable?: ResponseTravelTimeStatistics;
  travelTimeAll?: ResponseTravelTimeStatistics;
  coverage?: number;
}

export interface ResponseTimeFilterPostcodeDistricts {
  results: Array<ResponseTimeFilterPostcodeDistrictsResult>;
}

export interface ResponseTimeFilterPostcodeDistrictsResult {
  searchId: string;
  districts: Array<ResponseTimeFilterPostcodeDistrict>;
}

export interface ResponseTimeFilterPostcodeSector {
  code: ModelString;
  properties: ResponseTimeFilterPostcodeSectorProperties;
}

export interface ResponseTimeFilterPostcodeSectorProperties {
  travelTimeReachable?: ResponseTravelTimeStatistics;
  travelTimeAll?: ResponseTravelTimeStatistics;
  coverage?: number;
}

export interface ResponseTimeFilterPostcodeSectors {
  results: Array<ResponseTimeFilterPostcodeSectorsResult>;
}

export interface ResponseTimeFilterPostcodeSectorsResult {
  searchId: string;
  sectors: Array<ResponseTimeFilterPostcodeSector>;
}

export interface ResponseTimeFilterPostcodes {
  results: Array<ResponseTimeFilterPostcodesResult>;
}

export interface ResponseTimeFilterPostcodesProperties {
  travelTime?: number;
  distance?: number;
}

export interface ResponseTimeFilterPostcodesResult {
  searchId: string;
  postcodes: Array<ResponseTimeFilterPostcode>;
}

export interface ResponseTimeFilterProperties {
  travelTime?: number;
  distance?: number;
  distanceBreakdown?: Array<ResponseDistanceBreakdownItem>;
  fares?: ResponseFares;
  route?: ResponseRoute;
}

export interface ResponseTimeFilterResult {
  searchId: string;
  locations: Array<ResponseTimeFilterLocation>;
  unreachable: Array<string>;
}

export interface ResponseTimeMap {
  results: Array<ResponseTimeMapResult>;
}

export interface ResponseTimeMapBoundingBoxes {
  results: Array<ResponseTimeMapBoundingBoxesResult>;
}

export interface ResponseTimeMapBoundingBoxesResult {
  searchId: string;
  boundingBoxes: Array<ResponseBoundingBox>;
  properties: ResponseTimeMapProperties;
}

export interface ResponseTimeMapProperties {
  isOnlyWalking?: boolean;
}

export interface ResponseTimeMapResult {
  searchId: string;
  shapes: Array<ResponseShape>;
  properties: ResponseTimeMapProperties;
}

export interface ResponseTimeMapWkt {
  results: Array<ResponseTimeMapWktResult>;
}

export interface ResponseTimeMapWktResult {
  searchId: string;
  shape: string;
  properties: ResponseTimeMapProperties;
}

export type ResponseTransportationMode = 'car' | 'parking' | 'boarding' | 'walk' | 'bike' | 'train' | 'rail_national' | 'rail_overground' | 'rail_underground' | 'rail_dlr' | 'bus' | 'cable_car' | 'plane' | 'ferry' | 'coach';
export interface ResponseTravelTimeStatistics {
  min: number;
  max: number;
  mean: number;
  median: number;
}

