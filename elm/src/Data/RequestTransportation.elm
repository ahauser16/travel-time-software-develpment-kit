{-
   TravelTime Platform API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 1.0.0
   Contact: support@igeolise.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.RequestTransportation exposing (RequestTransportation, Type(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias RequestTransportation =
    { type_ : Type
    , ptChangeDelay : Maybe (Int)
    , walkingTime : Maybe (Int)
    , drivingTimeToStation : Maybe (Int)
    , parkingTime : Maybe (Int)
    , boardingTime : Maybe (Int)
    }


type Type
    = Cycling
    | Driving
    | Driving+train
    | PublicTransport
    | Walking
    | Coach
    | Bus
    | Train
    | Ferry
    | Driving+ferry
    | Cycling+ferry



decoder : Decoder RequestTransportation
decoder =
    Decode.succeed RequestTransportation
        |> required "type" typeDecoder
        |> optional "pt_change_delay" (Decode.nullable Decode.int) Nothing
        |> optional "walking_time" (Decode.nullable Decode.int) Nothing
        |> optional "driving_time_to_station" (Decode.nullable Decode.int) Nothing
        |> optional "parking_time" (Decode.nullable Decode.int) Nothing
        |> optional "boarding_time" (Decode.nullable Decode.int) Nothing



encode : RequestTransportation -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> RequestTransportation -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : RequestTransportation -> List (String, Encode.Value)
encodePairs model =
    [ ( "type", encodeType model.type_ )
    , ( "pt_change_delay", Maybe.withDefault Encode.null (Maybe.map Encode.int model.ptChangeDelay) )
    , ( "walking_time", Maybe.withDefault Encode.null (Maybe.map Encode.int model.walkingTime) )
    , ( "driving_time_to_station", Maybe.withDefault Encode.null (Maybe.map Encode.int model.drivingTimeToStation) )
    , ( "parking_time", Maybe.withDefault Encode.null (Maybe.map Encode.int model.parkingTime) )
    , ( "boarding_time", Maybe.withDefault Encode.null (Maybe.map Encode.int model.boardingTime) )
    ]



toString : RequestTransportation -> String
toString =
    Encode.encode 0 << encode




typeDecoder : Decoder Type
typeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "cycling" ->
                        Decode.succeed Cycling

                    "driving" ->
                        Decode.succeed Driving

                    "driving+train" ->
                        Decode.succeed Driving+train

                    "public_transport" ->
                        Decode.succeed PublicTransport

                    "walking" ->
                        Decode.succeed Walking

                    "coach" ->
                        Decode.succeed Coach

                    "bus" ->
                        Decode.succeed Bus

                    "train" ->
                        Decode.succeed Train

                    "ferry" ->
                        Decode.succeed Ferry

                    "driving+ferry" ->
                        Decode.succeed Driving+ferry

                    "cycling+ferry" ->
                        Decode.succeed Cycling+ferry

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeType : Type -> Encode.Value
encodeType model =
    case model of
        Cycling ->
            Encode.string "cycling"

        Driving ->
            Encode.string "driving"

        Driving+train ->
            Encode.string "driving+train"

        PublicTransport ->
            Encode.string "public_transport"

        Walking ->
            Encode.string "walking"

        Coach ->
            Encode.string "coach"

        Bus ->
            Encode.string "bus"

        Train ->
            Encode.string "train"

        Ferry ->
            Encode.string "ferry"

        Driving+ferry ->
            Encode.string "driving+ferry"

        Cycling+ferry ->
            Encode.string "cycling+ferry"




