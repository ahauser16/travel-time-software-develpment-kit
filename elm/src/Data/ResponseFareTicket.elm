{-
   TravelTime Platform API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI spec version: 1.0.0
   Contact: support@igeolise.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.ResponseFareTicket exposing (ResponseFareTicket, Type(..), decoder, encoder)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias ResponseFareTicket =
    { type_ : Type
    , price : Float
    , currency : String
    }


type Type
    = Single
    | Week
    | Month
    | Year



decoder : Decoder ResponseFareTicket
decoder =
    Decode.succeed ResponseFareTicket
        |> required "type" typeDecoder
        |> required "price" Decode.float
        |> required "currency" Decode.string



encoder : ResponseFareTicket -> Encode.Value
encoder model =
    Encode.object
        [ ( "type", typeEncoder model.type_ )
        , ( "price", Encode.float model.price )
        , ( "currency", Encode.string model.currency )

        ]



typeDecoder : Decoder Type
typeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "single" ->
                        Decode.succeed Single

                    "week" ->
                        Decode.succeed Week

                    "month" ->
                        Decode.succeed Month

                    "year" ->
                        Decode.succeed Year

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



typeEncoder : Type -> Encode.Value
typeEncoder model =
    case model of
        Single ->
            Encode.string "single"

        Week ->
            Encode.string "week"

        Month ->
            Encode.string "month"

        Year ->
            Encode.string "year"



