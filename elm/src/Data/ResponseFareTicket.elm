{-
   TravelTime Platform API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: 1.0.0
   Contact: support@igeolise.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Data.ResponseFareTicket exposing (ResponseFareTicket, Type(..), decoder, encode, encodeWithTag, toString)

import Dict exposing (Dict)
import Json.Decode as Decode exposing (Decoder)
import Json.Decode.Pipeline exposing (optional, required)
import Json.Encode as Encode


type alias ResponseFareTicket =
    { type_ : Type
    , price : Float
    , currency : String
    }


type Type
    = Single
    | Week
    | Month
    | Year



decoder : Decoder ResponseFareTicket
decoder =
    Decode.succeed ResponseFareTicket
        |> required "type" typeDecoder
        |> required "price" Decode.float
        |> required "currency" Decode.string



encode : ResponseFareTicket -> Encode.Value
encode =
    Encode.object << encodePairs


encodeWithTag : ( String, String ) -> ResponseFareTicket -> Encode.Value
encodeWithTag (tagField, tag) model =
    Encode.object <| encodePairs model ++ [ ( tagField, Encode.string tag ) ]


encodePairs : ResponseFareTicket -> List (String, Encode.Value)
encodePairs model =
    [ ( "type", encodeType model.type_ )
    , ( "price", Encode.float model.price )
    , ( "currency", Encode.string model.currency )
    ]



toString : ResponseFareTicket -> String
toString =
    Encode.encode 0 << encode




typeDecoder : Decoder Type
typeDecoder =
    Decode.string
        |> Decode.andThen
            (\str ->
                case str of
                    "single" ->
                        Decode.succeed Single

                    "week" ->
                        Decode.succeed Week

                    "month" ->
                        Decode.succeed Month

                    "year" ->
                        Decode.succeed Year

                    other ->
                        Decode.fail <| "Unknown type: " ++ other
            )



encodeType : Type -> Encode.Value
encodeType model =
    case model of
        Single ->
            Encode.string "single"

        Week ->
            Encode.string "week"

        Month ->
            Encode.string "month"

        Year ->
            Encode.string "year"




