{-
   TravelTime Platform API
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   OpenAPI spec version: 1.0.0
   Contact: support@igeolise.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.Default exposing (geocodingReverseSearch, geocodingSearch, mapInfo, routes, supportedLocations, timeFilter, timeFilterFast, timeFilterPostcodeDistricts, timeFilterPostcodeSectors, timeFilterPostcodes, timeMap)

import Data.RequestSupportedLocations as RequestSupportedLocations exposing (RequestSupportedLocations)
import Data.ResponseTimeFilterPostcodeSectors as ResponseTimeFilterPostcodeSectors exposing (ResponseTimeFilterPostcodeSectors)
import Data.ResponseSupportedLocations as ResponseSupportedLocations exposing (ResponseSupportedLocations)
import Data.ResponseError as ResponseError exposing (ResponseError)
import Data.RequestTimeFilter as RequestTimeFilter exposing (RequestTimeFilter)
import Data.ResponseTimeFilterPostcodeDistricts as ResponseTimeFilterPostcodeDistricts exposing (ResponseTimeFilterPostcodeDistricts)
import Data.RequestTimeFilterPostcodeSectors as RequestTimeFilterPostcodeSectors exposing (RequestTimeFilterPostcodeSectors)
import Data.ResponseTimeFilterPostcodes as ResponseTimeFilterPostcodes exposing (ResponseTimeFilterPostcodes)
import Data.ResponseGeocoding as ResponseGeocoding exposing (ResponseGeocoding)
import Data.RequestTimeMap as RequestTimeMap exposing (RequestTimeMap)
import Data.ResponseMapInfo as ResponseMapInfo exposing (ResponseMapInfo)
import Data.RequestRoutes as RequestRoutes exposing (RequestRoutes)
import Data.ResponseTimeFilter as ResponseTimeFilter exposing (ResponseTimeFilter)
import Data.RequestTimeFilterPostcodes as RequestTimeFilterPostcodes exposing (RequestTimeFilterPostcodes)
import Data.RequestTimeFilterFast as RequestTimeFilterFast exposing (RequestTimeFilterFast)
import Data.RequestTimeFilterPostcodeDistricts as RequestTimeFilterPostcodeDistricts exposing (RequestTimeFilterPostcodeDistricts)
import Data.ResponseTimeMap as ResponseTimeMap exposing (ResponseTimeMap)
import Data.ResponseRoutes as ResponseRoutes exposing (ResponseRoutes)
import Data.ResponseTimeFilterFast as ResponseTimeFilterFast exposing (ResponseTimeFilterFast)
import Dict
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "https://api.traveltimeapp.com"


geocodingReverseSearch : Http.Request ResponseGeocoding
geocodingReverseSearch =
    { method = "GET"
    , url = basePath ++ "/v4/geocoding/reverse"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson ResponseGeocoding.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


geocodingSearch : Http.Request ResponseGeocoding
geocodingSearch =
    { method = "GET"
    , url = basePath ++ "/v4/geocoding/search"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson ResponseGeocoding.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


mapInfo : Http.Request ResponseMapInfo
mapInfo =
    { method = "GET"
    , url = basePath ++ "/v4/map-info"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson ResponseMapInfo.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


routes : RequestRoutes -> Http.Request ResponseRoutes
routes model =
    { method = "POST"
    , url = basePath ++ "/v4/routes"
    , headers = []
    , body = Http.jsonBody <| RequestRoutes.encoder model
    , expect = Http.expectJson ResponseRoutes.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


supportedLocations : RequestSupportedLocations -> Http.Request ResponseSupportedLocations
supportedLocations model =
    { method = "POST"
    , url = basePath ++ "/v4/supported-locations"
    , headers = []
    , body = Http.jsonBody <| RequestSupportedLocations.encoder model
    , expect = Http.expectJson ResponseSupportedLocations.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


timeFilter : RequestTimeFilter -> Http.Request ResponseTimeFilter
timeFilter model =
    { method = "POST"
    , url = basePath ++ "/v4/time-filter"
    , headers = []
    , body = Http.jsonBody <| RequestTimeFilter.encoder model
    , expect = Http.expectJson ResponseTimeFilter.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


timeFilterFast : RequestTimeFilterFast -> Http.Request ResponseTimeFilterFast
timeFilterFast model =
    { method = "POST"
    , url = basePath ++ "/v4/time-filter/fast"
    , headers = []
    , body = Http.jsonBody <| RequestTimeFilterFast.encoder model
    , expect = Http.expectJson ResponseTimeFilterFast.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


timeFilterPostcodeDistricts : RequestTimeFilterPostcodeDistricts -> Http.Request ResponseTimeFilterPostcodeDistricts
timeFilterPostcodeDistricts model =
    { method = "POST"
    , url = basePath ++ "/v4/time-filter/postcode-districts"
    , headers = []
    , body = Http.jsonBody <| RequestTimeFilterPostcodeDistricts.encoder model
    , expect = Http.expectJson ResponseTimeFilterPostcodeDistricts.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


timeFilterPostcodeSectors : RequestTimeFilterPostcodeSectors -> Http.Request ResponseTimeFilterPostcodeSectors
timeFilterPostcodeSectors model =
    { method = "POST"
    , url = basePath ++ "/v4/time-filter/postcode-sectors"
    , headers = []
    , body = Http.jsonBody <| RequestTimeFilterPostcodeSectors.encoder model
    , expect = Http.expectJson ResponseTimeFilterPostcodeSectors.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


timeFilterPostcodes : RequestTimeFilterPostcodes -> Http.Request ResponseTimeFilterPostcodes
timeFilterPostcodes model =
    { method = "POST"
    , url = basePath ++ "/v4/time-filter/postcodes"
    , headers = []
    , body = Http.jsonBody <| RequestTimeFilterPostcodes.encoder model
    , expect = Http.expectJson ResponseTimeFilterPostcodes.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


timeMap : RequestTimeMap -> Http.Request ResponseTimeMap
timeMap model =
    { method = "POST"
    , url = basePath ++ "/v4/time-map"
    , headers = []
    , body = Http.jsonBody <| RequestTimeMap.encoder model
    , expect = Http.expectJson ResponseTimeMap.decoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request
