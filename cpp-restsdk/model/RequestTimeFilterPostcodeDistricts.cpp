/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeFilterPostcodeDistricts.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

RequestTimeFilterPostcodeDistricts::RequestTimeFilterPostcodeDistricts()
{
    m_Departure_searchesIsSet = false;
    m_Arrival_searchesIsSet = false;
}

RequestTimeFilterPostcodeDistricts::~RequestTimeFilterPostcodeDistricts()
{
}

void RequestTimeFilterPostcodeDistricts::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeFilterPostcodeDistricts::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Departure_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("departure_searches")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Arrival_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("arrival_searches")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void RequestTimeFilterPostcodeDistricts::fromJson(const web::json::value& val)
{
    {
        m_Departure_searches.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("departure_searches")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("departure_searches")).as_array() )
        {
            if(item.is_null())
            {
                m_Departure_searches.push_back( std::shared_ptr<RequestTimeFilterPostcodeDistrictsDepartureSearch>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeFilterPostcodeDistrictsDepartureSearch> newItem(new RequestTimeFilterPostcodeDistrictsDepartureSearch());
                newItem->fromJson(item);
                m_Departure_searches.push_back( newItem );
            }
        }
        }
    }
    {
        m_Arrival_searches.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("arrival_searches")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("arrival_searches")).as_array() )
        {
            if(item.is_null())
            {
                m_Arrival_searches.push_back( std::shared_ptr<RequestTimeFilterPostcodeDistrictsArrivalSearch>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeFilterPostcodeDistrictsArrivalSearch> newItem(new RequestTimeFilterPostcodeDistrictsArrivalSearch());
                newItem->fromJson(item);
                m_Arrival_searches.push_back( newItem );
            }
        }
        }
    }
}

void RequestTimeFilterPostcodeDistricts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Departure_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departure_searches"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Arrival_searches )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_searches"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void RequestTimeFilterPostcodeDistricts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Departure_searches.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("departure_searches")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("departure_searches"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Departure_searches.push_back( std::shared_ptr<RequestTimeFilterPostcodeDistrictsDepartureSearch>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeFilterPostcodeDistrictsDepartureSearch> newItem(new RequestTimeFilterPostcodeDistrictsDepartureSearch());
                newItem->fromJson(item);
                m_Departure_searches.push_back( newItem );
            }
        }
        }
    }
    {
        m_Arrival_searches.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("arrival_searches")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_searches"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Arrival_searches.push_back( std::shared_ptr<RequestTimeFilterPostcodeDistrictsArrivalSearch>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeFilterPostcodeDistrictsArrivalSearch> newItem(new RequestTimeFilterPostcodeDistrictsArrivalSearch());
                newItem->fromJson(item);
                m_Arrival_searches.push_back( newItem );
            }
        }
        }
    }
}

std::vector<std::shared_ptr<RequestTimeFilterPostcodeDistrictsDepartureSearch>>& RequestTimeFilterPostcodeDistricts::getDepartureSearches()
{
    return m_Departure_searches;
}

void RequestTimeFilterPostcodeDistricts::setDepartureSearches(const std::vector<std::shared_ptr<RequestTimeFilterPostcodeDistrictsDepartureSearch>>& value)
{
    m_Departure_searches = value;
    m_Departure_searchesIsSet = true;
}

bool RequestTimeFilterPostcodeDistricts::departureSearchesIsSet() const
{
    return m_Departure_searchesIsSet;
}

void RequestTimeFilterPostcodeDistricts::unsetDeparture_searches()
{
    m_Departure_searchesIsSet = false;
}

std::vector<std::shared_ptr<RequestTimeFilterPostcodeDistrictsArrivalSearch>>& RequestTimeFilterPostcodeDistricts::getArrivalSearches()
{
    return m_Arrival_searches;
}

void RequestTimeFilterPostcodeDistricts::setArrivalSearches(const std::vector<std::shared_ptr<RequestTimeFilterPostcodeDistrictsArrivalSearch>>& value)
{
    m_Arrival_searches = value;
    m_Arrival_searchesIsSet = true;
}

bool RequestTimeFilterPostcodeDistricts::arrivalSearchesIsSet() const
{
    return m_Arrival_searchesIsSet;
}

void RequestTimeFilterPostcodeDistricts::unsetArrival_searches()
{
    m_Arrival_searchesIsSet = false;
}

}
}
}
}

