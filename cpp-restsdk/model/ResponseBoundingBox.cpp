/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseBoundingBox.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ResponseBoundingBox::ResponseBoundingBox()
{
}

ResponseBoundingBox::~ResponseBoundingBox()
{
}

void ResponseBoundingBox::validate()
{
    // TODO: implement validation
}

web::json::value ResponseBoundingBox::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("envelope")] = ModelBase::toJson(m_Envelope);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Boxes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("boxes")] = web::json::value::array(jsonArray);
    }

    return val;
}

void ResponseBoundingBox::fromJson(const web::json::value& val)
{
    std::shared_ptr<ResponseBox> newEnvelope(new ResponseBox());
    newEnvelope->fromJson(val.at(utility::conversions::to_string_t("envelope")));
    setEnvelope( newEnvelope );
    {
        m_Boxes.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("boxes")).as_array() )
        {
            if(item.is_null())
            {
                m_Boxes.push_back( std::shared_ptr<ResponseBox>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResponseBox> newItem(new ResponseBox());
                newItem->fromJson(item);
                m_Boxes.push_back( newItem );
            }
        }
    }
}

void ResponseBoundingBox::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Envelope->toMultipart(multipart, utility::conversions::to_string_t("envelope."));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Boxes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("boxes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void ResponseBoundingBox::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<ResponseBox> newEnvelope(new ResponseBox());
    newEnvelope->fromMultiPart(multipart, utility::conversions::to_string_t("envelope."));
    setEnvelope( newEnvelope );
    {
        m_Boxes.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("boxes"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Boxes.push_back( std::shared_ptr<ResponseBox>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResponseBox> newItem(new ResponseBox());
                newItem->fromJson(item);
                m_Boxes.push_back( newItem );
            }
        }
    }
}

std::shared_ptr<ResponseBox> ResponseBoundingBox::getEnvelope() const
{
    return m_Envelope;
}

void ResponseBoundingBox::setEnvelope(const std::shared_ptr<ResponseBox>& value)
{
    m_Envelope = value;
    
}

std::vector<std::shared_ptr<ResponseBox>>& ResponseBoundingBox::getBoxes()
{
    return m_Boxes;
}

void ResponseBoundingBox::setBoxes(const std::vector<std::shared_ptr<ResponseBox>>& value)
{
    m_Boxes = value;
    
}

}
}
}
}

