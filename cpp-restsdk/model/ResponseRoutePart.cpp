/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseRoutePart.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseRoutePart::ResponseRoutePart()
{
    m_Id = utility::conversions::to_string_t("");
    m_Type = utility::conversions::to_string_t("");
    m_Directions = utility::conversions::to_string_t("");
    m_Distance = 0;
    m_Travel_time = 0;
    m_Direction = utility::conversions::to_string_t("");
    m_DirectionIsSet = false;
    m_Road = utility::conversions::to_string_t("");
    m_RoadIsSet = false;
    m_Turn = utility::conversions::to_string_t("");
    m_TurnIsSet = false;
    m_Line = utility::conversions::to_string_t("");
    m_LineIsSet = false;
    m_Departure_station = utility::conversions::to_string_t("");
    m_Departure_stationIsSet = false;
    m_Arrival_station = utility::conversions::to_string_t("");
    m_Arrival_stationIsSet = false;
    m_Departs_at = utility::conversions::to_string_t("");
    m_Departs_atIsSet = false;
    m_Arrives_at = utility::conversions::to_string_t("");
    m_Arrives_atIsSet = false;
    m_Num_stops = 0;
    m_Num_stopsIsSet = false;
}

ResponseRoutePart::~ResponseRoutePart()
{
}

void ResponseRoutePart::validate()
{
    // TODO: implement validation
}

web::json::value ResponseRoutePart::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    val[utility::conversions::to_string_t("mode")] = ModelBase::toJson(m_Mode);
    val[utility::conversions::to_string_t("directions")] = ModelBase::toJson(m_Directions);
    val[utility::conversions::to_string_t("distance")] = ModelBase::toJson(m_Distance);
    val[utility::conversions::to_string_t("travel_time")] = ModelBase::toJson(m_Travel_time);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Coords )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("coords")] = web::json::value::array(jsonArray);
    }
    if(m_DirectionIsSet)
    {
        val[utility::conversions::to_string_t("direction")] = ModelBase::toJson(m_Direction);
    }
    if(m_RoadIsSet)
    {
        val[utility::conversions::to_string_t("road")] = ModelBase::toJson(m_Road);
    }
    if(m_TurnIsSet)
    {
        val[utility::conversions::to_string_t("turn")] = ModelBase::toJson(m_Turn);
    }
    if(m_LineIsSet)
    {
        val[utility::conversions::to_string_t("line")] = ModelBase::toJson(m_Line);
    }
    if(m_Departure_stationIsSet)
    {
        val[utility::conversions::to_string_t("departure_station")] = ModelBase::toJson(m_Departure_station);
    }
    if(m_Arrival_stationIsSet)
    {
        val[utility::conversions::to_string_t("arrival_station")] = ModelBase::toJson(m_Arrival_station);
    }
    if(m_Departs_atIsSet)
    {
        val[utility::conversions::to_string_t("departs_at")] = ModelBase::toJson(m_Departs_at);
    }
    if(m_Arrives_atIsSet)
    {
        val[utility::conversions::to_string_t("arrives_at")] = ModelBase::toJson(m_Arrives_at);
    }
    if(m_Num_stopsIsSet)
    {
        val[utility::conversions::to_string_t("num_stops")] = ModelBase::toJson(m_Num_stops);
    }

    return val;
}

void ResponseRoutePart::fromJson(const web::json::value& val)
{
    setId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("id"))));
    setType(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("type"))));
    std::shared_ptr<ResponseTransportationMode> newMode(new ResponseTransportationMode());
    newMode->fromJson(val.at(utility::conversions::to_string_t("mode")));
    setMode( newMode );
    setDirections(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("directions"))));
    setDistance(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("distance"))));
    setTravelTime(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("travel_time"))));
    {
        m_Coords.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("coords")).as_array() )
        {
            if(item.is_null())
            {
                m_Coords.push_back( std::shared_ptr<Coords>(nullptr) );
            }
            else
            {
                std::shared_ptr<Coords> newItem(new Coords());
                newItem->fromJson(item);
                m_Coords.push_back( newItem );
            }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("direction")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("direction"));
        if(!fieldValue.is_null())
        {
            setDirection(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("road")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("road"));
        if(!fieldValue.is_null())
        {
            setRoad(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("turn")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("turn"));
        if(!fieldValue.is_null())
        {
            setTurn(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("line")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("line"));
        if(!fieldValue.is_null())
        {
            setLine(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("departure_station")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("departure_station"));
        if(!fieldValue.is_null())
        {
            setDepartureStation(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("arrival_station")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arrival_station"));
        if(!fieldValue.is_null())
        {
            setArrivalStation(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("departs_at")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("departs_at"));
        if(!fieldValue.is_null())
        {
            setDepartsAt(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("arrives_at")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("arrives_at"));
        if(!fieldValue.is_null())
        {
            setArrivesAt(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("num_stops")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("num_stops"));
        if(!fieldValue.is_null())
        {
            setNumStops(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void ResponseRoutePart::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    m_Mode->toMultipart(multipart, utility::conversions::to_string_t("mode."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("directions"), m_Directions));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("distance"), m_Distance));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("travel_time"), m_Travel_time));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Coords )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coords"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direction"), m_Direction));
    }
    if(m_RoadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("road"), m_Road));
    }
    if(m_TurnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("turn"), m_Turn));
    }
    if(m_LineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("line"), m_Line));
    }
    if(m_Departure_stationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departure_station"), m_Departure_station));
    }
    if(m_Arrival_stationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_station"), m_Arrival_station));
    }
    if(m_Departs_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departs_at"), m_Departs_at));
    }
    if(m_Arrives_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrives_at"), m_Arrives_at));
    }
    if(m_Num_stopsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("num_stops"), m_Num_stops));
    }
}

void ResponseRoutePart::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    std::shared_ptr<ResponseTransportationMode> newMode(new ResponseTransportationMode());
    newMode->fromMultiPart(multipart, utility::conversions::to_string_t("mode."));
    setMode( newMode );
    setDirections(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("directions"))));
    setDistance(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("distance"))));
    setTravelTime(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("travel_time"))));
    {
        m_Coords.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("coords"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Coords.push_back( std::shared_ptr<Coords>(nullptr) );
            }
            else
            {
                std::shared_ptr<Coords> newItem(new Coords());
                newItem->fromJson(item);
                m_Coords.push_back( newItem );
            }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("direction")))
    {
        setDirection(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("direction"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("road")))
    {
        setRoad(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("road"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("turn")))
    {
        setTurn(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("turn"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("line")))
    {
        setLine(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("line"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("departure_station")))
    {
        setDepartureStation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("departure_station"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arrival_station")))
    {
        setArrivalStation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_station"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("departs_at")))
    {
        setDepartsAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("departs_at"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("arrives_at")))
    {
        setArrivesAt(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrives_at"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("num_stops")))
    {
        setNumStops(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("num_stops"))));
    }
}

utility::string_t ResponseRoutePart::getId() const
{
    return m_Id;
}

void ResponseRoutePart::setId(const utility::string_t& value)
{
    m_Id = value;
    
}

utility::string_t ResponseRoutePart::getType() const
{
    return m_Type;
}

void ResponseRoutePart::setType(const utility::string_t& value)
{
    m_Type = value;
    
}

std::shared_ptr<ResponseTransportationMode> ResponseRoutePart::getMode() const
{
    return m_Mode;
}

void ResponseRoutePart::setMode(const std::shared_ptr<ResponseTransportationMode>& value)
{
    m_Mode = value;
    
}

utility::string_t ResponseRoutePart::getDirections() const
{
    return m_Directions;
}

void ResponseRoutePart::setDirections(const utility::string_t& value)
{
    m_Directions = value;
    
}

int32_t ResponseRoutePart::getDistance() const
{
    return m_Distance;
}

void ResponseRoutePart::setDistance(int32_t value)
{
    m_Distance = value;
    
}

int32_t ResponseRoutePart::getTravelTime() const
{
    return m_Travel_time;
}

void ResponseRoutePart::setTravelTime(int32_t value)
{
    m_Travel_time = value;
    
}

std::vector<std::shared_ptr<Coords>>& ResponseRoutePart::getCoords()
{
    return m_Coords;
}

void ResponseRoutePart::setCoords(const std::vector<std::shared_ptr<Coords>>& value)
{
    m_Coords = value;
    
}

utility::string_t ResponseRoutePart::getDirection() const
{
    return m_Direction;
}

void ResponseRoutePart::setDirection(const utility::string_t& value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}

bool ResponseRoutePart::directionIsSet() const
{
    return m_DirectionIsSet;
}

void ResponseRoutePart::unsetDirection()
{
    m_DirectionIsSet = false;
}

utility::string_t ResponseRoutePart::getRoad() const
{
    return m_Road;
}

void ResponseRoutePart::setRoad(const utility::string_t& value)
{
    m_Road = value;
    m_RoadIsSet = true;
}

bool ResponseRoutePart::roadIsSet() const
{
    return m_RoadIsSet;
}

void ResponseRoutePart::unsetRoad()
{
    m_RoadIsSet = false;
}

utility::string_t ResponseRoutePart::getTurn() const
{
    return m_Turn;
}

void ResponseRoutePart::setTurn(const utility::string_t& value)
{
    m_Turn = value;
    m_TurnIsSet = true;
}

bool ResponseRoutePart::turnIsSet() const
{
    return m_TurnIsSet;
}

void ResponseRoutePart::unsetTurn()
{
    m_TurnIsSet = false;
}

utility::string_t ResponseRoutePart::getLine() const
{
    return m_Line;
}

void ResponseRoutePart::setLine(const utility::string_t& value)
{
    m_Line = value;
    m_LineIsSet = true;
}

bool ResponseRoutePart::lineIsSet() const
{
    return m_LineIsSet;
}

void ResponseRoutePart::unsetLine()
{
    m_LineIsSet = false;
}

utility::string_t ResponseRoutePart::getDepartureStation() const
{
    return m_Departure_station;
}

void ResponseRoutePart::setDepartureStation(const utility::string_t& value)
{
    m_Departure_station = value;
    m_Departure_stationIsSet = true;
}

bool ResponseRoutePart::departureStationIsSet() const
{
    return m_Departure_stationIsSet;
}

void ResponseRoutePart::unsetDeparture_station()
{
    m_Departure_stationIsSet = false;
}

utility::string_t ResponseRoutePart::getArrivalStation() const
{
    return m_Arrival_station;
}

void ResponseRoutePart::setArrivalStation(const utility::string_t& value)
{
    m_Arrival_station = value;
    m_Arrival_stationIsSet = true;
}

bool ResponseRoutePart::arrivalStationIsSet() const
{
    return m_Arrival_stationIsSet;
}

void ResponseRoutePart::unsetArrival_station()
{
    m_Arrival_stationIsSet = false;
}

utility::string_t ResponseRoutePart::getDepartsAt() const
{
    return m_Departs_at;
}

void ResponseRoutePart::setDepartsAt(const utility::string_t& value)
{
    m_Departs_at = value;
    m_Departs_atIsSet = true;
}

bool ResponseRoutePart::departsAtIsSet() const
{
    return m_Departs_atIsSet;
}

void ResponseRoutePart::unsetDeparts_at()
{
    m_Departs_atIsSet = false;
}

utility::string_t ResponseRoutePart::getArrivesAt() const
{
    return m_Arrives_at;
}

void ResponseRoutePart::setArrivesAt(const utility::string_t& value)
{
    m_Arrives_at = value;
    m_Arrives_atIsSet = true;
}

bool ResponseRoutePart::arrivesAtIsSet() const
{
    return m_Arrives_atIsSet;
}

void ResponseRoutePart::unsetArrives_at()
{
    m_Arrives_atIsSet = false;
}

int32_t ResponseRoutePart::getNumStops() const
{
    return m_Num_stops;
}

void ResponseRoutePart::setNumStops(int32_t value)
{
    m_Num_stops = value;
    m_Num_stopsIsSet = true;
}

bool ResponseRoutePart::numStopsIsSet() const
{
    return m_Num_stopsIsSet;
}

void ResponseRoutePart::unsetNum_stops()
{
    m_Num_stopsIsSet = false;
}

}
}
}
}


