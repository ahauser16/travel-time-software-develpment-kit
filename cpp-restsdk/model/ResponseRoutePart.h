/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ResponseRoutePart.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ResponseRoutePart_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ResponseRoutePart_H_


#include "../ModelBase.h"

#include "ResponseTransportationMode.h"
#include <cpprest/details/basic_types.h>
#include "Coords.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  ResponseRoutePart
    : public ModelBase
{
public:
    ResponseRoutePart();
    virtual ~ResponseRoutePart();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ResponseRoutePart members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    
    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getType() const;
    
    void setType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ResponseTransportationMode> getMode() const;
    
    void setMode(const std::shared_ptr<ResponseTransportationMode>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDirections() const;
    
    void setDirections(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDistance() const;
    
    void setDistance(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTravelTime() const;
    
    void setTravelTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Coords>>& getCoords();
    
    void setCoords(const std::vector<std::shared_ptr<Coords>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDirection() const;
    bool directionIsSet() const;
    void unsetDirection();

    void setDirection(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRoad() const;
    bool roadIsSet() const;
    void unsetRoad();

    void setRoad(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTurn() const;
    bool turnIsSet() const;
    void unsetTurn();

    void setTurn(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLine() const;
    bool lineIsSet() const;
    void unsetLine();

    void setLine(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDepartureStation() const;
    bool departureStationIsSet() const;
    void unsetDeparture_station();

    void setDepartureStation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getArrivalStation() const;
    bool arrivalStationIsSet() const;
    void unsetArrival_station();

    void setArrivalStation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDepartsAt() const;
    bool departsAtIsSet() const;
    void unsetDeparts_at();

    void setDepartsAt(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getArrivesAt() const;
    bool arrivesAtIsSet() const;
    void unsetArrives_at();

    void setArrivesAt(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNumStops() const;
    bool numStopsIsSet() const;
    void unsetNum_stops();

    void setNumStops(int32_t value);


protected:
    utility::string_t m_Id;
        utility::string_t m_Type;
        std::shared_ptr<ResponseTransportationMode> m_Mode;
        utility::string_t m_Directions;
        int32_t m_Distance;
        int32_t m_Travel_time;
        std::vector<std::shared_ptr<Coords>> m_Coords;
        utility::string_t m_Direction;
    bool m_DirectionIsSet;
    utility::string_t m_Road;
    bool m_RoadIsSet;
    utility::string_t m_Turn;
    bool m_TurnIsSet;
    utility::string_t m_Line;
    bool m_LineIsSet;
    utility::string_t m_Departure_station;
    bool m_Departure_stationIsSet;
    utility::string_t m_Arrival_station;
    bool m_Arrival_stationIsSet;
    utility::string_t m_Departs_at;
    bool m_Departs_atIsSet;
    utility::string_t m_Arrives_at;
    bool m_Arrives_atIsSet;
    int32_t m_Num_stops;
    bool m_Num_stopsIsSet;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ResponseRoutePart_H_ */
