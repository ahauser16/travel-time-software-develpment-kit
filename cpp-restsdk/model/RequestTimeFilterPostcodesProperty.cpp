/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeFilterPostcodesProperty.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



RequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty()
{
}

RequestTimeFilterPostcodesProperty::~RequestTimeFilterPostcodesProperty()
{
}

void RequestTimeFilterPostcodesProperty::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeFilterPostcodesProperty::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_travel_time) val = web::json::value::string(U("travel_time"));
    if (m_value == eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_distance) val = web::json::value::string(U("distance"));

    return val;
}

void RequestTimeFilterPostcodesProperty::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("travel_time")) m_value = eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_travel_time;
    if (s == utility::conversions::to_string_t("distance")) m_value = eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_distance;
}

void RequestTimeFilterPostcodesProperty::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_travel_time) s = utility::conversions::to_string_t("travel_time");
    if (m_value == eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_distance) s = utility::conversions::to_string_t("distance");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

void RequestTimeFilterPostcodesProperty::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        utility::string_t s;
        s = ModelBase::stringFromHttpContent(multipart->getContent(namePrefix));
        eRequestTimeFilterPostcodesProperty v;
        
        
        if (s == utility::conversions::to_string_t("travel_time")) v = eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_travel_time;
        if (s == utility::conversions::to_string_t("distance")) v = eRequestTimeFilterPostcodesProperty::RequestTimeFilterPostcodesProperty_distance;

        setValue(v);
    }
}

RequestTimeFilterPostcodesProperty::eRequestTimeFilterPostcodesProperty RequestTimeFilterPostcodesProperty::getValue() const
{
   return m_value;
}

void RequestTimeFilterPostcodesProperty::setValue(RequestTimeFilterPostcodesProperty::eRequestTimeFilterPostcodesProperty const value)
{
   m_value = value;
}


}
}
}
}


