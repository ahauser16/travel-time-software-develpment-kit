/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeFilterPostcode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ResponseTimeFilterPostcode::ResponseTimeFilterPostcode()
{
}

ResponseTimeFilterPostcode::~ResponseTimeFilterPostcode()
{
}

void ResponseTimeFilterPostcode::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeFilterPostcode::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("code")] = ModelBase::toJson(m_Code);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("properties")] = web::json::value::array(jsonArray);
    }

    return val;
}

void ResponseTimeFilterPostcode::fromJson(const web::json::value& val)
{
    std::shared_ptr<String> newCode(nullptr);
    newCode->fromJson(val.at(utility::conversions::to_string_t("code")));
    setCode( newCode );
    {
        m_Properties.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("properties")).as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<ResponseTimeFilterPostcodesProperties>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResponseTimeFilterPostcodesProperties> newItem(new ResponseTimeFilterPostcodesProperties());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
    }
}

void ResponseTimeFilterPostcode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Code->toMultipart(multipart, utility::conversions::to_string_t("code."));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void ResponseTimeFilterPostcode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<String> newCode(nullptr);
    newCode->fromMultiPart(multipart, utility::conversions::to_string_t("code."));
    setCode( newCode );
    {
        m_Properties.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<ResponseTimeFilterPostcodesProperties>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResponseTimeFilterPostcodesProperties> newItem(new ResponseTimeFilterPostcodesProperties());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
    }
}

std::shared_ptr<String> ResponseTimeFilterPostcode::getCode() const
{
    return m_Code;
}

void ResponseTimeFilterPostcode::setCode(const std::shared_ptr<String>& value)
{
    m_Code = value;
    
}

std::vector<std::shared_ptr<ResponseTimeFilterPostcodesProperties>>& ResponseTimeFilterPostcode::getProperties()
{
    return m_Properties;
}

void ResponseTimeFilterPostcode::setProperties(const std::vector<std::shared_ptr<ResponseTimeFilterPostcodesProperties>>& value)
{
    m_Properties = value;
    
}

}
}
}
}

