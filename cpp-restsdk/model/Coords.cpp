/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Coords.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




Coords::Coords()
{
    m_Lat = 0.0;
    m_Lng = 0.0;
}

Coords::~Coords()
{
}

void Coords::validate()
{
    // TODO: implement validation
}

web::json::value Coords::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("lat")] = ModelBase::toJson(m_Lat);
    val[utility::conversions::to_string_t("lng")] = ModelBase::toJson(m_Lng);

    return val;
}

void Coords::fromJson(const web::json::value& val)
{
    setLat(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("lat"))));
    setLng(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("lng"))));
}

void Coords::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lat"), m_Lat));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lng"), m_Lng));
}

void Coords::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setLat(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lat"))));
    setLng(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("lng"))));
}

double Coords::getLat() const
{
    return m_Lat;
}

void Coords::setLat(double value)
{
    m_Lat = value;
    
}

double Coords::getLng() const
{
    return m_Lng;
}

void Coords::setLng(double value)
{
    m_Lng = value;
    
}

}
}
}
}


