/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTransportationMode.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



ResponseTransportationMode::ResponseTransportationMode()
{
}

ResponseTransportationMode::~ResponseTransportationMode()
{
}

void ResponseTransportationMode::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTransportationMode::toJson() const
{
    web::json::value val = web::json::value::object();

    
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_car) val = web::json::value::string(U("car"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_parking) val = web::json::value::string(U("parking"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_boarding) val = web::json::value::string(U("boarding"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_walk) val = web::json::value::string(U("walk"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_bike) val = web::json::value::string(U("bike"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_train) val = web::json::value::string(U("train"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_national) val = web::json::value::string(U("rail_national"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_overground) val = web::json::value::string(U("rail_overground"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_underground) val = web::json::value::string(U("rail_underground"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_dlr) val = web::json::value::string(U("rail_dlr"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_bus) val = web::json::value::string(U("bus"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_cable_car) val = web::json::value::string(U("cable_car"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_plane) val = web::json::value::string(U("plane"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_ferry) val = web::json::value::string(U("ferry"));
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_coach) val = web::json::value::string(U("coach"));

    return val;
}

void ResponseTransportationMode::fromJson(const web::json::value& val)
{
    auto s = val.as_string();

    
    if (s == utility::conversions::to_string_t("car")) m_value = eResponseTransportationMode::ResponseTransportationMode_car;
    if (s == utility::conversions::to_string_t("parking")) m_value = eResponseTransportationMode::ResponseTransportationMode_parking;
    if (s == utility::conversions::to_string_t("boarding")) m_value = eResponseTransportationMode::ResponseTransportationMode_boarding;
    if (s == utility::conversions::to_string_t("walk")) m_value = eResponseTransportationMode::ResponseTransportationMode_walk;
    if (s == utility::conversions::to_string_t("bike")) m_value = eResponseTransportationMode::ResponseTransportationMode_bike;
    if (s == utility::conversions::to_string_t("train")) m_value = eResponseTransportationMode::ResponseTransportationMode_train;
    if (s == utility::conversions::to_string_t("rail_national")) m_value = eResponseTransportationMode::ResponseTransportationMode_rail_national;
    if (s == utility::conversions::to_string_t("rail_overground")) m_value = eResponseTransportationMode::ResponseTransportationMode_rail_overground;
    if (s == utility::conversions::to_string_t("rail_underground")) m_value = eResponseTransportationMode::ResponseTransportationMode_rail_underground;
    if (s == utility::conversions::to_string_t("rail_dlr")) m_value = eResponseTransportationMode::ResponseTransportationMode_rail_dlr;
    if (s == utility::conversions::to_string_t("bus")) m_value = eResponseTransportationMode::ResponseTransportationMode_bus;
    if (s == utility::conversions::to_string_t("cable_car")) m_value = eResponseTransportationMode::ResponseTransportationMode_cable_car;
    if (s == utility::conversions::to_string_t("plane")) m_value = eResponseTransportationMode::ResponseTransportationMode_plane;
    if (s == utility::conversions::to_string_t("ferry")) m_value = eResponseTransportationMode::ResponseTransportationMode_ferry;
    if (s == utility::conversions::to_string_t("coach")) m_value = eResponseTransportationMode::ResponseTransportationMode_coach;
}

void ResponseTransportationMode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    utility::string_t s;

    
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_car) s = utility::conversions::to_string_t("car");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_parking) s = utility::conversions::to_string_t("parking");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_boarding) s = utility::conversions::to_string_t("boarding");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_walk) s = utility::conversions::to_string_t("walk");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_bike) s = utility::conversions::to_string_t("bike");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_train) s = utility::conversions::to_string_t("train");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_national) s = utility::conversions::to_string_t("rail_national");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_overground) s = utility::conversions::to_string_t("rail_overground");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_underground) s = utility::conversions::to_string_t("rail_underground");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_rail_dlr) s = utility::conversions::to_string_t("rail_dlr");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_bus) s = utility::conversions::to_string_t("bus");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_cable_car) s = utility::conversions::to_string_t("cable_car");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_plane) s = utility::conversions::to_string_t("plane");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_ferry) s = utility::conversions::to_string_t("ferry");
    if (m_value == eResponseTransportationMode::ResponseTransportationMode_coach) s = utility::conversions::to_string_t("coach");

    multipart->add(ModelBase::toHttpContent(namePrefix, s));
}

void ResponseTransportationMode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        utility::string_t s;
        s = ModelBase::stringFromHttpContent(multipart->getContent(namePrefix));
        eResponseTransportationMode v;
        
        
        if (s == utility::conversions::to_string_t("car")) v = eResponseTransportationMode::ResponseTransportationMode_car;
        if (s == utility::conversions::to_string_t("parking")) v = eResponseTransportationMode::ResponseTransportationMode_parking;
        if (s == utility::conversions::to_string_t("boarding")) v = eResponseTransportationMode::ResponseTransportationMode_boarding;
        if (s == utility::conversions::to_string_t("walk")) v = eResponseTransportationMode::ResponseTransportationMode_walk;
        if (s == utility::conversions::to_string_t("bike")) v = eResponseTransportationMode::ResponseTransportationMode_bike;
        if (s == utility::conversions::to_string_t("train")) v = eResponseTransportationMode::ResponseTransportationMode_train;
        if (s == utility::conversions::to_string_t("rail_national")) v = eResponseTransportationMode::ResponseTransportationMode_rail_national;
        if (s == utility::conversions::to_string_t("rail_overground")) v = eResponseTransportationMode::ResponseTransportationMode_rail_overground;
        if (s == utility::conversions::to_string_t("rail_underground")) v = eResponseTransportationMode::ResponseTransportationMode_rail_underground;
        if (s == utility::conversions::to_string_t("rail_dlr")) v = eResponseTransportationMode::ResponseTransportationMode_rail_dlr;
        if (s == utility::conversions::to_string_t("bus")) v = eResponseTransportationMode::ResponseTransportationMode_bus;
        if (s == utility::conversions::to_string_t("cable_car")) v = eResponseTransportationMode::ResponseTransportationMode_cable_car;
        if (s == utility::conversions::to_string_t("plane")) v = eResponseTransportationMode::ResponseTransportationMode_plane;
        if (s == utility::conversions::to_string_t("ferry")) v = eResponseTransportationMode::ResponseTransportationMode_ferry;
        if (s == utility::conversions::to_string_t("coach")) v = eResponseTransportationMode::ResponseTransportationMode_coach;

        setValue(v);
    }
}

ResponseTransportationMode::eResponseTransportationMode ResponseTransportationMode::getValue() const
{
   return m_value;
}

void ResponseTransportationMode::setValue(ResponseTransportationMode::eResponseTransportationMode const value)
{
   m_value = value;
}


}
}
}
}


