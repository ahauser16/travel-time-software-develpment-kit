/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseGeocodingProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseGeocodingProperties::ResponseGeocodingProperties()
{
    m_Name = utility::conversions::to_string_t("");
    m_Label = utility::conversions::to_string_t("");
    m_Score = 0.0;
    m_ScoreIsSet = false;
    m_House_number = utility::conversions::to_string_t("");
    m_House_numberIsSet = false;
    m_Street = utility::conversions::to_string_t("");
    m_StreetIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
    m_Region_code = utility::conversions::to_string_t("");
    m_Region_codeIsSet = false;
    m_Neighbourhood = utility::conversions::to_string_t("");
    m_NeighbourhoodIsSet = false;
    m_County = utility::conversions::to_string_t("");
    m_CountyIsSet = false;
    m_Macroregion = utility::conversions::to_string_t("");
    m_MacroregionIsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Country = utility::conversions::to_string_t("");
    m_CountryIsSet = false;
    m_Country_code = utility::conversions::to_string_t("");
    m_Country_codeIsSet = false;
    m_Continent = utility::conversions::to_string_t("");
    m_ContinentIsSet = false;
    m_Postcode = utility::conversions::to_string_t("");
    m_PostcodeIsSet = false;
    m_FeaturesIsSet = false;
}

ResponseGeocodingProperties::~ResponseGeocodingProperties()
{
}

void ResponseGeocodingProperties::validate()
{
    // TODO: implement validation
}

web::json::value ResponseGeocodingProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    if(m_ScoreIsSet)
    {
        val[utility::conversions::to_string_t("score")] = ModelBase::toJson(m_Score);
    }
    if(m_House_numberIsSet)
    {
        val[utility::conversions::to_string_t("house_number")] = ModelBase::toJson(m_House_number);
    }
    if(m_StreetIsSet)
    {
        val[utility::conversions::to_string_t("street")] = ModelBase::toJson(m_Street);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t("region")] = ModelBase::toJson(m_Region);
    }
    if(m_Region_codeIsSet)
    {
        val[utility::conversions::to_string_t("region_code")] = ModelBase::toJson(m_Region_code);
    }
    if(m_NeighbourhoodIsSet)
    {
        val[utility::conversions::to_string_t("neighbourhood")] = ModelBase::toJson(m_Neighbourhood);
    }
    if(m_CountyIsSet)
    {
        val[utility::conversions::to_string_t("county")] = ModelBase::toJson(m_County);
    }
    if(m_MacroregionIsSet)
    {
        val[utility::conversions::to_string_t("macroregion")] = ModelBase::toJson(m_Macroregion);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    }
    if(m_CountryIsSet)
    {
        val[utility::conversions::to_string_t("country")] = ModelBase::toJson(m_Country);
    }
    if(m_Country_codeIsSet)
    {
        val[utility::conversions::to_string_t("country_code")] = ModelBase::toJson(m_Country_code);
    }
    if(m_ContinentIsSet)
    {
        val[utility::conversions::to_string_t("continent")] = ModelBase::toJson(m_Continent);
    }
    if(m_PostcodeIsSet)
    {
        val[utility::conversions::to_string_t("postcode")] = ModelBase::toJson(m_Postcode);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t("features")] = ModelBase::toJson(m_Features);
    }

    return val;
}

void ResponseGeocodingProperties::fromJson(const web::json::value& val)
{
    setName(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("name"))));
    setLabel(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("label"))));
    if(val.has_field(utility::conversions::to_string_t("score")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("score"));
        if(!fieldValue.is_null())
        {
            setScore(ModelBase::doubleFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("house_number")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("house_number"));
        if(!fieldValue.is_null())
        {
            setHouseNumber(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("street")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("street"));
        if(!fieldValue.is_null())
        {
            setStreet(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("region")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("region"));
        if(!fieldValue.is_null())
        {
            setRegion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("region_code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("region_code"));
        if(!fieldValue.is_null())
        {
            setRegionCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("neighbourhood")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("neighbourhood"));
        if(!fieldValue.is_null())
        {
            setNeighbourhood(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("county")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("county"));
        if(!fieldValue.is_null())
        {
            setCounty(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("macroregion")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("macroregion"));
        if(!fieldValue.is_null())
        {
            setMacroregion(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("city")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("city"));
        if(!fieldValue.is_null())
        {
            setCity(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("country"));
        if(!fieldValue.is_null())
        {
            setCountry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("country_code")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("country_code"));
        if(!fieldValue.is_null())
        {
            setCountryCode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("continent")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("continent"));
        if(!fieldValue.is_null())
        {
            setContinent(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("postcode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("postcode"));
        if(!fieldValue.is_null())
        {
            setPostcode(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("features")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("features"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseMapInfoFeatures> newItem(new ResponseMapInfoFeatures());
            newItem->fromJson(fieldValue);
            setFeatures( newItem );
        }
    }
}

void ResponseGeocodingProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
    if(m_ScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("score"), m_Score));
    }
    if(m_House_numberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("house_number"), m_House_number));
    }
    if(m_StreetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("street"), m_Street));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("region"), m_Region));
    }
    if(m_Region_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("region_code"), m_Region_code));
    }
    if(m_NeighbourhoodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("neighbourhood"), m_Neighbourhood));
    }
    if(m_CountyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("county"), m_County));
    }
    if(m_MacroregionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("macroregion"), m_Macroregion));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
    }
    if(m_CountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country"), m_Country));
    }
    if(m_Country_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("country_code"), m_Country_code));
    }
    if(m_ContinentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("continent"), m_Continent));
    }
    if(m_PostcodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postcode"), m_Postcode));
    }
    if(m_FeaturesIsSet)
    {
        if (m_Features.get())
        {
            m_Features->toMultipart(multipart, utility::conversions::to_string_t("features."));
        }
    }
}

void ResponseGeocodingProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    if(multipart->hasContent(utility::conversions::to_string_t("score")))
    {
        setScore(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("score"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("house_number")))
    {
        setHouseNumber(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("house_number"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("street")))
    {
        setStreet(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("street"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("region")))
    {
        setRegion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("region"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("region_code")))
    {
        setRegionCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("region_code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("neighbourhood")))
    {
        setNeighbourhood(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("neighbourhood"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("county")))
    {
        setCounty(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("county"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("macroregion")))
    {
        setMacroregion(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("macroregion"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("city")))
    {
        setCity(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("city"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country")))
    {
        setCountry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("country_code")))
    {
        setCountryCode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("country_code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("continent")))
    {
        setContinent(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("continent"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postcode")))
    {
        setPostcode(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("postcode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("features")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("features")))
        {
            std::shared_ptr<ResponseMapInfoFeatures> newItem(new ResponseMapInfoFeatures());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("features."));
            setFeatures( newItem );
        }
    }
}

utility::string_t ResponseGeocodingProperties::getName() const
{
    return m_Name;
}

void ResponseGeocodingProperties::setName(const utility::string_t& value)
{
    m_Name = value;
    
}

utility::string_t ResponseGeocodingProperties::getLabel() const
{
    return m_Label;
}

void ResponseGeocodingProperties::setLabel(const utility::string_t& value)
{
    m_Label = value;
    
}

double ResponseGeocodingProperties::getScore() const
{
    return m_Score;
}

void ResponseGeocodingProperties::setScore(double value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}

bool ResponseGeocodingProperties::scoreIsSet() const
{
    return m_ScoreIsSet;
}

void ResponseGeocodingProperties::unsetScore()
{
    m_ScoreIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getHouseNumber() const
{
    return m_House_number;
}

void ResponseGeocodingProperties::setHouseNumber(const utility::string_t& value)
{
    m_House_number = value;
    m_House_numberIsSet = true;
}

bool ResponseGeocodingProperties::houseNumberIsSet() const
{
    return m_House_numberIsSet;
}

void ResponseGeocodingProperties::unsetHouse_number()
{
    m_House_numberIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getStreet() const
{
    return m_Street;
}

void ResponseGeocodingProperties::setStreet(const utility::string_t& value)
{
    m_Street = value;
    m_StreetIsSet = true;
}

bool ResponseGeocodingProperties::streetIsSet() const
{
    return m_StreetIsSet;
}

void ResponseGeocodingProperties::unsetStreet()
{
    m_StreetIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getRegion() const
{
    return m_Region;
}

void ResponseGeocodingProperties::setRegion(const utility::string_t& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool ResponseGeocodingProperties::regionIsSet() const
{
    return m_RegionIsSet;
}

void ResponseGeocodingProperties::unsetRegion()
{
    m_RegionIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getRegionCode() const
{
    return m_Region_code;
}

void ResponseGeocodingProperties::setRegionCode(const utility::string_t& value)
{
    m_Region_code = value;
    m_Region_codeIsSet = true;
}

bool ResponseGeocodingProperties::regionCodeIsSet() const
{
    return m_Region_codeIsSet;
}

void ResponseGeocodingProperties::unsetRegion_code()
{
    m_Region_codeIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getNeighbourhood() const
{
    return m_Neighbourhood;
}

void ResponseGeocodingProperties::setNeighbourhood(const utility::string_t& value)
{
    m_Neighbourhood = value;
    m_NeighbourhoodIsSet = true;
}

bool ResponseGeocodingProperties::neighbourhoodIsSet() const
{
    return m_NeighbourhoodIsSet;
}

void ResponseGeocodingProperties::unsetNeighbourhood()
{
    m_NeighbourhoodIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getCounty() const
{
    return m_County;
}

void ResponseGeocodingProperties::setCounty(const utility::string_t& value)
{
    m_County = value;
    m_CountyIsSet = true;
}

bool ResponseGeocodingProperties::countyIsSet() const
{
    return m_CountyIsSet;
}

void ResponseGeocodingProperties::unsetCounty()
{
    m_CountyIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getMacroregion() const
{
    return m_Macroregion;
}

void ResponseGeocodingProperties::setMacroregion(const utility::string_t& value)
{
    m_Macroregion = value;
    m_MacroregionIsSet = true;
}

bool ResponseGeocodingProperties::macroregionIsSet() const
{
    return m_MacroregionIsSet;
}

void ResponseGeocodingProperties::unsetMacroregion()
{
    m_MacroregionIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getCity() const
{
    return m_City;
}

void ResponseGeocodingProperties::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool ResponseGeocodingProperties::cityIsSet() const
{
    return m_CityIsSet;
}

void ResponseGeocodingProperties::unsetCity()
{
    m_CityIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getCountry() const
{
    return m_Country;
}

void ResponseGeocodingProperties::setCountry(const utility::string_t& value)
{
    m_Country = value;
    m_CountryIsSet = true;
}

bool ResponseGeocodingProperties::countryIsSet() const
{
    return m_CountryIsSet;
}

void ResponseGeocodingProperties::unsetCountry()
{
    m_CountryIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getCountryCode() const
{
    return m_Country_code;
}

void ResponseGeocodingProperties::setCountryCode(const utility::string_t& value)
{
    m_Country_code = value;
    m_Country_codeIsSet = true;
}

bool ResponseGeocodingProperties::countryCodeIsSet() const
{
    return m_Country_codeIsSet;
}

void ResponseGeocodingProperties::unsetCountry_code()
{
    m_Country_codeIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getContinent() const
{
    return m_Continent;
}

void ResponseGeocodingProperties::setContinent(const utility::string_t& value)
{
    m_Continent = value;
    m_ContinentIsSet = true;
}

bool ResponseGeocodingProperties::continentIsSet() const
{
    return m_ContinentIsSet;
}

void ResponseGeocodingProperties::unsetContinent()
{
    m_ContinentIsSet = false;
}

utility::string_t ResponseGeocodingProperties::getPostcode() const
{
    return m_Postcode;
}

void ResponseGeocodingProperties::setPostcode(const utility::string_t& value)
{
    m_Postcode = value;
    m_PostcodeIsSet = true;
}

bool ResponseGeocodingProperties::postcodeIsSet() const
{
    return m_PostcodeIsSet;
}

void ResponseGeocodingProperties::unsetPostcode()
{
    m_PostcodeIsSet = false;
}

std::shared_ptr<ResponseMapInfoFeatures> ResponseGeocodingProperties::getFeatures() const
{
    return m_Features;
}

void ResponseGeocodingProperties::setFeatures(const std::shared_ptr<ResponseMapInfoFeatures>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool ResponseGeocodingProperties::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void ResponseGeocodingProperties::unsetFeatures()
{
    m_FeaturesIsSet = false;
}

}
}
}
}


