/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestLocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

RequestLocation::RequestLocation()
{
    m_Id = utility::conversions::to_string_t("");
}

RequestLocation::~RequestLocation()
{
}

void RequestLocation::validate()
{
    // TODO: implement validation
}

web::json::value RequestLocation::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("coords")] = ModelBase::toJson(m_Coords);

    return val;
}

void RequestLocation::fromJson(const web::json::value& val)
{
    setId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("id"))));
    std::shared_ptr<Coords> newCoords(new Coords());
    newCoords->fromJson(val.at(utility::conversions::to_string_t("coords")));
    setCoords( newCoords );
}

void RequestLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    m_Coords->toMultipart(multipart, utility::conversions::to_string_t("coords."));
}

void RequestLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    std::shared_ptr<Coords> newCoords(new Coords());
    newCoords->fromMultiPart(multipart, utility::conversions::to_string_t("coords."));
    setCoords( newCoords );
}

utility::string_t RequestLocation::getId() const
{
    return m_Id;
}

void RequestLocation::setId(const utility::string_t& value)
{
    m_Id = value;
    
}

std::shared_ptr<Coords> RequestLocation::getCoords() const
{
    return m_Coords;
}

void RequestLocation::setCoords(const std::shared_ptr<Coords>& value)
{
    m_Coords = value;
    
}

}
}
}
}

