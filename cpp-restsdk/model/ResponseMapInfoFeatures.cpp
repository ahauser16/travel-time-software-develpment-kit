/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseMapInfoFeatures.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseMapInfoFeatures::ResponseMapInfoFeatures()
{
    m_Public_transportIsSet = false;
    m_Fares = false;
    m_Postcodes = false;
}

ResponseMapInfoFeatures::~ResponseMapInfoFeatures()
{
}

void ResponseMapInfoFeatures::validate()
{
    // TODO: implement validation
}

web::json::value ResponseMapInfoFeatures::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Public_transportIsSet)
    {
        val[utility::conversions::to_string_t("public_transport")] = ModelBase::toJson(m_Public_transport);
    }
    val[utility::conversions::to_string_t("fares")] = ModelBase::toJson(m_Fares);
    val[utility::conversions::to_string_t("postcodes")] = ModelBase::toJson(m_Postcodes);

    return val;
}

void ResponseMapInfoFeatures::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("public_transport")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("public_transport"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseMapInfoFeaturesPublicTransport> newItem(new ResponseMapInfoFeaturesPublicTransport());
            newItem->fromJson(fieldValue);
            setPublicTransport( newItem );
        }
    }
    setFares(ModelBase::boolFromJson(val.at(utility::conversions::to_string_t("fares"))));
    setPostcodes(ModelBase::boolFromJson(val.at(utility::conversions::to_string_t("postcodes"))));
}

void ResponseMapInfoFeatures::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Public_transportIsSet)
    {
        if (m_Public_transport.get())
        {
            m_Public_transport->toMultipart(multipart, utility::conversions::to_string_t("public_transport."));
        }
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fares"), m_Fares));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postcodes"), m_Postcodes));
}

void ResponseMapInfoFeatures::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("public_transport")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("public_transport")))
        {
            std::shared_ptr<ResponseMapInfoFeaturesPublicTransport> newItem(new ResponseMapInfoFeaturesPublicTransport());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("public_transport."));
            setPublicTransport( newItem );
        }
    }
    setFares(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("fares"))));
    setPostcodes(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("postcodes"))));
}

std::shared_ptr<ResponseMapInfoFeaturesPublicTransport> ResponseMapInfoFeatures::getPublicTransport() const
{
    return m_Public_transport;
}

void ResponseMapInfoFeatures::setPublicTransport(const std::shared_ptr<ResponseMapInfoFeaturesPublicTransport>& value)
{
    m_Public_transport = value;
    m_Public_transportIsSet = true;
}

bool ResponseMapInfoFeatures::publicTransportIsSet() const
{
    return m_Public_transportIsSet;
}

void ResponseMapInfoFeatures::unsetPublic_transport()
{
    m_Public_transportIsSet = false;
}

bool ResponseMapInfoFeatures::isFares() const
{
    return m_Fares;
}

void ResponseMapInfoFeatures::setFares(bool value)
{
    m_Fares = value;
    
}

bool ResponseMapInfoFeatures::isPostcodes() const
{
    return m_Postcodes;
}

void ResponseMapInfoFeatures::setPostcodes(bool value)
{
    m_Postcodes = value;
    
}

}
}
}
}


