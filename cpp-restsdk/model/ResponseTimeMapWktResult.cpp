/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeMapWktResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ResponseTimeMapWktResult::ResponseTimeMapWktResult()
{
    m_Search_id = utility::conversions::to_string_t("");
    m_Shape = utility::conversions::to_string_t("");
}

ResponseTimeMapWktResult::~ResponseTimeMapWktResult()
{
}

void ResponseTimeMapWktResult::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeMapWktResult::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("search_id")] = ModelBase::toJson(m_Search_id);
    val[utility::conversions::to_string_t("shape")] = ModelBase::toJson(m_Shape);
    val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);

    return val;
}

void ResponseTimeMapWktResult::fromJson(const web::json::value& val)
{
    setSearchId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("search_id"))));
    setShape(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("shape"))));
    std::shared_ptr<ResponseTimeMapProperties> newProperties(new ResponseTimeMapProperties());
    newProperties->fromJson(val.at(utility::conversions::to_string_t("properties")));
    setProperties( newProperties );
}

void ResponseTimeMapWktResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("search_id"), m_Search_id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("shape"), m_Shape));
    m_Properties->toMultipart(multipart, utility::conversions::to_string_t("properties."));
}

void ResponseTimeMapWktResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSearchId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("search_id"))));
    setShape(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("shape"))));
    std::shared_ptr<ResponseTimeMapProperties> newProperties(new ResponseTimeMapProperties());
    newProperties->fromMultiPart(multipart, utility::conversions::to_string_t("properties."));
    setProperties( newProperties );
}

utility::string_t ResponseTimeMapWktResult::getSearchId() const
{
    return m_Search_id;
}

void ResponseTimeMapWktResult::setSearchId(const utility::string_t& value)
{
    m_Search_id = value;
    
}

utility::string_t ResponseTimeMapWktResult::getShape() const
{
    return m_Shape;
}

void ResponseTimeMapWktResult::setShape(const utility::string_t& value)
{
    m_Shape = value;
    
}

std::shared_ptr<ResponseTimeMapProperties> ResponseTimeMapWktResult::getProperties() const
{
    return m_Properties;
}

void ResponseTimeMapWktResult::setProperties(const std::shared_ptr<ResponseTimeMapProperties>& value)
{
    m_Properties = value;
    
}

}
}
}
}

