/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeMapBoundingBoxesResult.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseTimeMapBoundingBoxesResult::ResponseTimeMapBoundingBoxesResult()
{
    m_Search_id = utility::conversions::to_string_t("");
}

ResponseTimeMapBoundingBoxesResult::~ResponseTimeMapBoundingBoxesResult()
{
}

void ResponseTimeMapBoundingBoxesResult::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeMapBoundingBoxesResult::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("search_id")] = ModelBase::toJson(m_Search_id);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Bounding_boxes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("bounding_boxes")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("properties")] = ModelBase::toJson(m_Properties);

    return val;
}

void ResponseTimeMapBoundingBoxesResult::fromJson(const web::json::value& val)
{
    setSearchId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("search_id"))));
    {
        m_Bounding_boxes.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("bounding_boxes")).as_array() )
        {
            if(item.is_null())
            {
                m_Bounding_boxes.push_back( std::shared_ptr<ResponseBoundingBox>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResponseBoundingBox> newItem(new ResponseBoundingBox());
                newItem->fromJson(item);
                m_Bounding_boxes.push_back( newItem );
            }
        }
    }
    std::shared_ptr<ResponseTimeMapProperties> newProperties(new ResponseTimeMapProperties());
    newProperties->fromJson(val.at(utility::conversions::to_string_t("properties")));
    setProperties( newProperties );
}

void ResponseTimeMapBoundingBoxesResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("search_id"), m_Search_id));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Bounding_boxes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounding_boxes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    m_Properties->toMultipart(multipart, utility::conversions::to_string_t("properties."));
}

void ResponseTimeMapBoundingBoxesResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSearchId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("search_id"))));
    {
        m_Bounding_boxes.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounding_boxes"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Bounding_boxes.push_back( std::shared_ptr<ResponseBoundingBox>(nullptr) );
            }
            else
            {
                std::shared_ptr<ResponseBoundingBox> newItem(new ResponseBoundingBox());
                newItem->fromJson(item);
                m_Bounding_boxes.push_back( newItem );
            }
        }
    }
    std::shared_ptr<ResponseTimeMapProperties> newProperties(new ResponseTimeMapProperties());
    newProperties->fromMultiPart(multipart, utility::conversions::to_string_t("properties."));
    setProperties( newProperties );
}

utility::string_t ResponseTimeMapBoundingBoxesResult::getSearchId() const
{
    return m_Search_id;
}

void ResponseTimeMapBoundingBoxesResult::setSearchId(const utility::string_t& value)
{
    m_Search_id = value;
    
}

std::vector<std::shared_ptr<ResponseBoundingBox>>& ResponseTimeMapBoundingBoxesResult::getBoundingBoxes()
{
    return m_Bounding_boxes;
}

void ResponseTimeMapBoundingBoxesResult::setBoundingBoxes(const std::vector<std::shared_ptr<ResponseBoundingBox>>& value)
{
    m_Bounding_boxes = value;
    
}

std::shared_ptr<ResponseTimeMapProperties> ResponseTimeMapBoundingBoxesResult::getProperties() const
{
    return m_Properties;
}

void ResponseTimeMapBoundingBoxesResult::setProperties(const std::shared_ptr<ResponseTimeMapProperties>& value)
{
    m_Properties = value;
    
}

}
}
}
}


