/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeFilterFastArrivalManyToOneSearch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestTimeFilterFastArrivalManyToOneSearch::RequestTimeFilterFastArrivalManyToOneSearch()
{
    m_Id = utility::conversions::to_string_t("");
    m_Arrival_location_id = utility::conversions::to_string_t("");
    m_Travel_time = 0;
}

RequestTimeFilterFastArrivalManyToOneSearch::~RequestTimeFilterFastArrivalManyToOneSearch()
{
}

void RequestTimeFilterFastArrivalManyToOneSearch::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeFilterFastArrivalManyToOneSearch::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("arrival_location_id")] = ModelBase::toJson(m_Arrival_location_id);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Departure_location_ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("departure_location_ids")] = web::json::value::array(jsonArray);
    }
    val[utility::conversions::to_string_t("transportation")] = ModelBase::toJson(m_Transportation);
    val[utility::conversions::to_string_t("travel_time")] = ModelBase::toJson(m_Travel_time);
    val[utility::conversions::to_string_t("arrival_time_period")] = ModelBase::toJson(m_Arrival_time_period);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val[utility::conversions::to_string_t("properties")] = web::json::value::array(jsonArray);
    }

    return val;
}

void RequestTimeFilterFastArrivalManyToOneSearch::fromJson(const web::json::value& val)
{
    setId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("id"))));
    setArrivalLocationId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("arrival_location_id"))));
    {
        m_Departure_location_ids.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("departure_location_ids")).as_array() )
        {
            m_Departure_location_ids.push_back(ModelBase::stringFromJson(item));
        }
    }
    std::shared_ptr<RequestTransportationFast> newTransportation(new RequestTransportationFast());
    newTransportation->fromJson(val.at(utility::conversions::to_string_t("transportation")));
    setTransportation( newTransportation );
    setTravelTime(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("travel_time"))));
    std::shared_ptr<RequestArrivalTimePeriod> newArrival_time_period(new RequestArrivalTimePeriod());
    newArrival_time_period->fromJson(val.at(utility::conversions::to_string_t("arrival_time_period")));
    setArrivalTimePeriod( newArrival_time_period );
    {
        m_Properties.clear();
        std::vector<web::json::value> jsonArray;
        for( auto& item : val.at(utility::conversions::to_string_t("properties")).as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<RequestTimeFilterFastProperty>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeFilterFastProperty> newItem(new RequestTimeFilterFastProperty());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
    }
}

void RequestTimeFilterFastArrivalManyToOneSearch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_location_id"), m_Arrival_location_id));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Departure_location_ids )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("departure_location_ids"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
    m_Transportation->toMultipart(multipart, utility::conversions::to_string_t("transportation."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("travel_time"), m_Travel_time));
    m_Arrival_time_period->toMultipart(multipart, utility::conversions::to_string_t("arrival_time_period."));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
            }
}

void RequestTimeFilterFastArrivalManyToOneSearch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    setArrivalLocationId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_location_id"))));
    {
        m_Departure_location_ids.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("departure_location_ids"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Departure_location_ids.push_back(ModelBase::stringFromJson(item));
        }
    }
    std::shared_ptr<RequestTransportationFast> newTransportation(new RequestTransportationFast());
    newTransportation->fromMultiPart(multipart, utility::conversions::to_string_t("transportation."));
    setTransportation( newTransportation );
    setTravelTime(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("travel_time"))));
    std::shared_ptr<RequestArrivalTimePeriod> newArrival_time_period(new RequestArrivalTimePeriod());
    newArrival_time_period->fromMultiPart(multipart, utility::conversions::to_string_t("arrival_time_period."));
    setArrivalTimePeriod( newArrival_time_period );
    {
        m_Properties.clear();

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<RequestTimeFilterFastProperty>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeFilterFastProperty> newItem(new RequestTimeFilterFastProperty());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
    }
}

utility::string_t RequestTimeFilterFastArrivalManyToOneSearch::getId() const
{
    return m_Id;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setId(const utility::string_t& value)
{
    m_Id = value;
    
}

utility::string_t RequestTimeFilterFastArrivalManyToOneSearch::getArrivalLocationId() const
{
    return m_Arrival_location_id;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setArrivalLocationId(const utility::string_t& value)
{
    m_Arrival_location_id = value;
    
}

std::vector<utility::string_t>& RequestTimeFilterFastArrivalManyToOneSearch::getDepartureLocationIds()
{
    return m_Departure_location_ids;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setDepartureLocationIds(const std::vector<utility::string_t>& value)
{
    m_Departure_location_ids = value;
    
}

std::shared_ptr<RequestTransportationFast> RequestTimeFilterFastArrivalManyToOneSearch::getTransportation() const
{
    return m_Transportation;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setTransportation(const std::shared_ptr<RequestTransportationFast>& value)
{
    m_Transportation = value;
    
}

int32_t RequestTimeFilterFastArrivalManyToOneSearch::getTravelTime() const
{
    return m_Travel_time;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setTravelTime(int32_t value)
{
    m_Travel_time = value;
    
}

std::shared_ptr<RequestArrivalTimePeriod> RequestTimeFilterFastArrivalManyToOneSearch::getArrivalTimePeriod() const
{
    return m_Arrival_time_period;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setArrivalTimePeriod(const std::shared_ptr<RequestArrivalTimePeriod>& value)
{
    m_Arrival_time_period = value;
    
}

std::vector<std::shared_ptr<RequestTimeFilterFastProperty>>& RequestTimeFilterFastArrivalManyToOneSearch::getProperties()
{
    return m_Properties;
}

void RequestTimeFilterFastArrivalManyToOneSearch::setProperties(const std::vector<std::shared_ptr<RequestTimeFilterFastProperty>>& value)
{
    m_Properties = value;
    
}

}
}
}
}


