/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeMapArrivalSearch.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestTimeMapArrivalSearch::RequestTimeMapArrivalSearch()
{
    m_Id = utility::conversions::to_string_t("");
    m_Travel_time = 0;
    m_Arrival_time = utility::datetime();
    m_PropertiesIsSet = false;
    m_RangeIsSet = false;
}

RequestTimeMapArrivalSearch::~RequestTimeMapArrivalSearch()
{
}

void RequestTimeMapArrivalSearch::validate()
{
    // TODO: implement validation
}

web::json::value RequestTimeMapArrivalSearch::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    val[utility::conversions::to_string_t("coords")] = ModelBase::toJson(m_Coords);
    val[utility::conversions::to_string_t("transportation")] = ModelBase::toJson(m_Transportation);
    val[utility::conversions::to_string_t("travel_time")] = ModelBase::toJson(m_Travel_time);
    val[utility::conversions::to_string_t("arrival_time")] = ModelBase::toJson(m_Arrival_time);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("properties")] = web::json::value::array(jsonArray);
        }
    }
    if(m_RangeIsSet)
    {
        val[utility::conversions::to_string_t("range")] = ModelBase::toJson(m_Range);
    }

    return val;
}

void RequestTimeMapArrivalSearch::fromJson(const web::json::value& val)
{
    setId(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("id"))));
    std::shared_ptr<Coords> newCoords(new Coords());
    newCoords->fromJson(val.at(utility::conversions::to_string_t("coords")));
    setCoords( newCoords );
    std::shared_ptr<RequestTransportation> newTransportation(new RequestTransportation());
    newTransportation->fromJson(val.at(utility::conversions::to_string_t("transportation")));
    setTransportation( newTransportation );
    setTravelTime(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("travel_time"))));
    setArrivalTime
    (ModelBase::dateFromJson(val.at(utility::conversions::to_string_t("arrival_time"))));
    {
        m_Properties.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("properties")))
        {
        for( auto& item : val.at(utility::conversions::to_string_t("properties")).as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<RequestTimeMapProperty>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeMapProperty> newItem(new RequestTimeMapProperty());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("range")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("range"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RequestRangeNoMaxResults> newItem(new RequestRangeNoMaxResults());
            newItem->fromJson(fieldValue);
            setRange( newItem );
        }
    }
}

void RequestTimeMapArrivalSearch::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    m_Coords->toMultipart(multipart, utility::conversions::to_string_t("coords."));
    m_Transportation->toMultipart(multipart, utility::conversions::to_string_t("transportation."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("travel_time"), m_Travel_time));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("arrival_time"), m_Arrival_time));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Properties )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("properties"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_RangeIsSet)
    {
        if (m_Range.get())
        {
            m_Range->toMultipart(multipart, utility::conversions::to_string_t("range."));
        }
    }
}

void RequestTimeMapArrivalSearch::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    std::shared_ptr<Coords> newCoords(new Coords());
    newCoords->fromMultiPart(multipart, utility::conversions::to_string_t("coords."));
    setCoords( newCoords );
    std::shared_ptr<RequestTransportation> newTransportation(new RequestTransportation());
    newTransportation->fromMultiPart(multipart, utility::conversions::to_string_t("transportation."));
    setTransportation( newTransportation );
    setTravelTime(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("travel_time"))));
    setArrivalTime(ModelBase::dateFromHttpContent(multipart->getContent(utility::conversions::to_string_t("arrival_time"))));
    {
        m_Properties.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("properties")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("properties"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Properties.push_back( std::shared_ptr<RequestTimeMapProperty>(nullptr) );
            }
            else
            {
                std::shared_ptr<RequestTimeMapProperty> newItem(new RequestTimeMapProperty());
                newItem->fromJson(item);
                m_Properties.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("range")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("range")))
        {
            std::shared_ptr<RequestRangeNoMaxResults> newItem(new RequestRangeNoMaxResults());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("range."));
            setRange( newItem );
        }
    }
}

utility::string_t RequestTimeMapArrivalSearch::getId() const
{
    return m_Id;
}

void RequestTimeMapArrivalSearch::setId(const utility::string_t& value)
{
    m_Id = value;
    
}

std::shared_ptr<Coords> RequestTimeMapArrivalSearch::getCoords() const
{
    return m_Coords;
}

void RequestTimeMapArrivalSearch::setCoords(const std::shared_ptr<Coords>& value)
{
    m_Coords = value;
    
}

std::shared_ptr<RequestTransportation> RequestTimeMapArrivalSearch::getTransportation() const
{
    return m_Transportation;
}

void RequestTimeMapArrivalSearch::setTransportation(const std::shared_ptr<RequestTransportation>& value)
{
    m_Transportation = value;
    
}

int32_t RequestTimeMapArrivalSearch::getTravelTime() const
{
    return m_Travel_time;
}

void RequestTimeMapArrivalSearch::setTravelTime(int32_t value)
{
    m_Travel_time = value;
    
}

utility::datetime RequestTimeMapArrivalSearch::getArrivalTime() const
{
    return m_Arrival_time;
}

void RequestTimeMapArrivalSearch::setArrivalTime(const utility::datetime& value)
{
    m_Arrival_time = value;
    
}

std::vector<std::shared_ptr<RequestTimeMapProperty>>& RequestTimeMapArrivalSearch::getProperties()
{
    return m_Properties;
}

void RequestTimeMapArrivalSearch::setProperties(const std::vector<std::shared_ptr<RequestTimeMapProperty>>& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}

bool RequestTimeMapArrivalSearch::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}

void RequestTimeMapArrivalSearch::unsetProperties()
{
    m_PropertiesIsSet = false;
}

std::shared_ptr<RequestRangeNoMaxResults> RequestTimeMapArrivalSearch::getRange() const
{
    return m_Range;
}

void RequestTimeMapArrivalSearch::setRange(const std::shared_ptr<RequestRangeNoMaxResults>& value)
{
    m_Range = value;
    m_RangeIsSet = true;
}

bool RequestTimeMapArrivalSearch::rangeIsSet() const
{
    return m_RangeIsSet;
}

void RequestTimeMapArrivalSearch::unsetRange()
{
    m_RangeIsSet = false;
}

}
}
}
}


