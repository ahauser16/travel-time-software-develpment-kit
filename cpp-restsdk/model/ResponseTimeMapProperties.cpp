/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeMapProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseTimeMapProperties::ResponseTimeMapProperties()
{
    m_Is_only_walking = false;
    m_Is_only_walkingIsSet = false;
}

ResponseTimeMapProperties::~ResponseTimeMapProperties()
{
}

void ResponseTimeMapProperties::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeMapProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Is_only_walkingIsSet)
    {
        val[utility::conversions::to_string_t("is_only_walking")] = ModelBase::toJson(m_Is_only_walking);
    }

    return val;
}

void ResponseTimeMapProperties::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("is_only_walking")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("is_only_walking"));
        if(!fieldValue.is_null())
        {
            setIsOnlyWalking(ModelBase::boolFromJson(fieldValue));
        }
    }
}

void ResponseTimeMapProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Is_only_walkingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("is_only_walking"), m_Is_only_walking));
    }
}

void ResponseTimeMapProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("is_only_walking")))
    {
        setIsOnlyWalking(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("is_only_walking"))));
    }
}

bool ResponseTimeMapProperties::isIsOnlyWalking() const
{
    return m_Is_only_walking;
}

void ResponseTimeMapProperties::setIsOnlyWalking(bool value)
{
    m_Is_only_walking = value;
    m_Is_only_walkingIsSet = true;
}

bool ResponseTimeMapProperties::isOnlyWalkingIsSet() const
{
    return m_Is_only_walkingIsSet;
}

void ResponseTimeMapProperties::unsetIs_only_walking()
{
    m_Is_only_walkingIsSet = false;
}

}
}
}
}


