/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseMapInfoMap.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseMapInfoMap::ResponseMapInfoMap()
{
    m_Name = utility::conversions::to_string_t("");
}

ResponseMapInfoMap::~ResponseMapInfoMap()
{
}

void ResponseMapInfoMap::validate()
{
    // TODO: implement validation
}

web::json::value ResponseMapInfoMap::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("features")] = ModelBase::toJson(m_Features);

    return val;
}

void ResponseMapInfoMap::fromJson(const web::json::value& val)
{
    setName(ModelBase::stringFromJson(val.at(utility::conversions::to_string_t("name"))));
    std::shared_ptr<ResponseMapInfoFeatures> newFeatures(new ResponseMapInfoFeatures());
    newFeatures->fromJson(val.at(utility::conversions::to_string_t("features")));
    setFeatures( newFeatures );
}

void ResponseMapInfoMap::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    m_Features->toMultipart(multipart, utility::conversions::to_string_t("features."));
}

void ResponseMapInfoMap::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    std::shared_ptr<ResponseMapInfoFeatures> newFeatures(new ResponseMapInfoFeatures());
    newFeatures->fromMultiPart(multipart, utility::conversions::to_string_t("features."));
    setFeatures( newFeatures );
}

utility::string_t ResponseMapInfoMap::getName() const
{
    return m_Name;
}

void ResponseMapInfoMap::setName(const utility::string_t& value)
{
    m_Name = value;
    
}

std::shared_ptr<ResponseMapInfoFeatures> ResponseMapInfoMap::getFeatures() const
{
    return m_Features;
}

void ResponseMapInfoMap::setFeatures(const std::shared_ptr<ResponseMapInfoFeatures>& value)
{
    m_Features = value;
    
}

}
}
}
}


