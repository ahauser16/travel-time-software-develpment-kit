/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseDistanceBreakdownItem.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseDistanceBreakdownItem::ResponseDistanceBreakdownItem()
{
    m_Distance = 0;
}

ResponseDistanceBreakdownItem::~ResponseDistanceBreakdownItem()
{
}

void ResponseDistanceBreakdownItem::validate()
{
    // TODO: implement validation
}

web::json::value ResponseDistanceBreakdownItem::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("mode")] = ModelBase::toJson(m_Mode);
    val[utility::conversions::to_string_t("distance")] = ModelBase::toJson(m_Distance);

    return val;
}

void ResponseDistanceBreakdownItem::fromJson(const web::json::value& val)
{
    std::shared_ptr<ResponseTransportationMode> newMode(new ResponseTransportationMode());
    newMode->fromJson(val.at(utility::conversions::to_string_t("mode")));
    setMode( newMode );
    setDistance(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("distance"))));
}

void ResponseDistanceBreakdownItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    m_Mode->toMultipart(multipart, utility::conversions::to_string_t("mode."));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("distance"), m_Distance));
}

void ResponseDistanceBreakdownItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    std::shared_ptr<ResponseTransportationMode> newMode(new ResponseTransportationMode());
    newMode->fromMultiPart(multipart, utility::conversions::to_string_t("mode."));
    setMode( newMode );
    setDistance(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("distance"))));
}

std::shared_ptr<ResponseTransportationMode> ResponseDistanceBreakdownItem::getMode() const
{
    return m_Mode;
}

void ResponseDistanceBreakdownItem::setMode(const std::shared_ptr<ResponseTransportationMode>& value)
{
    m_Mode = value;
    
}

int32_t ResponseDistanceBreakdownItem::getDistance() const
{
    return m_Distance;
}

void ResponseDistanceBreakdownItem::setDistance(int32_t value)
{
    m_Distance = value;
    
}

}
}
}
}


