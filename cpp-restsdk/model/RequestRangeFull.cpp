/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestRangeFull.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




RequestRangeFull::RequestRangeFull()
{
    m_Enabled = false;
    m_Max_results = 0;
    m_Width = 0;
}

RequestRangeFull::~RequestRangeFull()
{
}

void RequestRangeFull::validate()
{
    // TODO: implement validation
}

web::json::value RequestRangeFull::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("enabled")] = ModelBase::toJson(m_Enabled);
    val[utility::conversions::to_string_t("max_results")] = ModelBase::toJson(m_Max_results);
    val[utility::conversions::to_string_t("width")] = ModelBase::toJson(m_Width);

    return val;
}

void RequestRangeFull::fromJson(const web::json::value& val)
{
    setEnabled(ModelBase::boolFromJson(val.at(utility::conversions::to_string_t("enabled"))));
    setMaxResults(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("max_results"))));
    setWidth(ModelBase::int32_tFromJson(val.at(utility::conversions::to_string_t("width"))));
}

void RequestRangeFull::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("enabled"), m_Enabled));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_results"), m_Max_results));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("width"), m_Width));
}

void RequestRangeFull::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setEnabled(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("enabled"))));
    setMaxResults(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_results"))));
    setWidth(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("width"))));
}

bool RequestRangeFull::isEnabled() const
{
    return m_Enabled;
}

void RequestRangeFull::setEnabled(bool value)
{
    m_Enabled = value;
    
}

int32_t RequestRangeFull::getMaxResults() const
{
    return m_Max_results;
}

void RequestRangeFull::setMaxResults(int32_t value)
{
    m_Max_results = value;
    
}

int32_t RequestRangeFull::getWidth() const
{
    return m_Width;
}

void RequestRangeFull::setWidth(int32_t value)
{
    m_Width = value;
    
}

}
}
}
}


