/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseBox.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ResponseBox::ResponseBox()
{
    m_Min_lat = 0.0;
    m_Max_lat = 0.0;
    m_Min_lng = 0.0;
    m_Max_lng = 0.0;
}

ResponseBox::~ResponseBox()
{
}

void ResponseBox::validate()
{
    // TODO: implement validation
}

web::json::value ResponseBox::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("min_lat")] = ModelBase::toJson(m_Min_lat);
    val[utility::conversions::to_string_t("max_lat")] = ModelBase::toJson(m_Max_lat);
    val[utility::conversions::to_string_t("min_lng")] = ModelBase::toJson(m_Min_lng);
    val[utility::conversions::to_string_t("max_lng")] = ModelBase::toJson(m_Max_lng);

    return val;
}

void ResponseBox::fromJson(const web::json::value& val)
{
    setMinLat(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("min_lat"))));
    setMaxLat(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("max_lat"))));
    setMinLng(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("min_lng"))));
    setMaxLng(ModelBase::doubleFromJson(val.at(utility::conversions::to_string_t("max_lng"))));
}

void ResponseBox::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("min_lat"), m_Min_lat));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_lat"), m_Max_lat));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("min_lng"), m_Min_lng));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("max_lng"), m_Max_lng));
}

void ResponseBox::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setMinLat(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("min_lat"))));
    setMaxLat(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_lat"))));
    setMinLng(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("min_lng"))));
    setMaxLng(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("max_lng"))));
}

double ResponseBox::getMinLat() const
{
    return m_Min_lat;
}

void ResponseBox::setMinLat(double value)
{
    m_Min_lat = value;
    
}

double ResponseBox::getMaxLat() const
{
    return m_Max_lat;
}

void ResponseBox::setMaxLat(double value)
{
    m_Max_lat = value;
    
}

double ResponseBox::getMinLng() const
{
    return m_Min_lng;
}

void ResponseBox::setMinLng(double value)
{
    m_Min_lng = value;
    
}

double ResponseBox::getMaxLng() const
{
    return m_Max_lng;
}

void ResponseBox::setMaxLng(double value)
{
    m_Max_lng = value;
    
}

}
}
}
}

