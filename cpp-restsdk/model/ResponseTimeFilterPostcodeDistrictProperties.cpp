/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.2.3.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ResponseTimeFilterPostcodeDistrictProperties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {




ResponseTimeFilterPostcodeDistrictProperties::ResponseTimeFilterPostcodeDistrictProperties()
{
    m_Travel_time_reachableIsSet = false;
    m_Travel_time_allIsSet = false;
    m_Coverage = 0.0;
    m_CoverageIsSet = false;
}

ResponseTimeFilterPostcodeDistrictProperties::~ResponseTimeFilterPostcodeDistrictProperties()
{
}

void ResponseTimeFilterPostcodeDistrictProperties::validate()
{
    // TODO: implement validation
}

web::json::value ResponseTimeFilterPostcodeDistrictProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Travel_time_reachableIsSet)
    {
        val[utility::conversions::to_string_t("travel_time_reachable")] = ModelBase::toJson(m_Travel_time_reachable);
    }
    if(m_Travel_time_allIsSet)
    {
        val[utility::conversions::to_string_t("travel_time_all")] = ModelBase::toJson(m_Travel_time_all);
    }
    if(m_CoverageIsSet)
    {
        val[utility::conversions::to_string_t("coverage")] = ModelBase::toJson(m_Coverage);
    }

    return val;
}

void ResponseTimeFilterPostcodeDistrictProperties::fromJson(const web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("travel_time_reachable")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("travel_time_reachable"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseTravelTimeStatistics> newItem(new ResponseTravelTimeStatistics());
            newItem->fromJson(fieldValue);
            setTravelTimeReachable( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("travel_time_all")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("travel_time_all"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ResponseTravelTimeStatistics> newItem(new ResponseTravelTimeStatistics());
            newItem->fromJson(fieldValue);
            setTravelTimeAll( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("coverage")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("coverage"));
        if(!fieldValue.is_null())
        {
            setCoverage(ModelBase::doubleFromJson(fieldValue));
        }
    }
}

void ResponseTimeFilterPostcodeDistrictProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_Travel_time_reachableIsSet)
    {
        if (m_Travel_time_reachable.get())
        {
            m_Travel_time_reachable->toMultipart(multipart, utility::conversions::to_string_t("travel_time_reachable."));
        }
    }
    if(m_Travel_time_allIsSet)
    {
        if (m_Travel_time_all.get())
        {
            m_Travel_time_all->toMultipart(multipart, utility::conversions::to_string_t("travel_time_all."));
        }
    }
    if(m_CoverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coverage"), m_Coverage));
    }
}

void ResponseTimeFilterPostcodeDistrictProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("travel_time_reachable")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("travel_time_reachable")))
        {
            std::shared_ptr<ResponseTravelTimeStatistics> newItem(new ResponseTravelTimeStatistics());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("travel_time_reachable."));
            setTravelTimeReachable( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("travel_time_all")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("travel_time_all")))
        {
            std::shared_ptr<ResponseTravelTimeStatistics> newItem(new ResponseTravelTimeStatistics());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("travel_time_all."));
            setTravelTimeAll( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("coverage")))
    {
        setCoverage(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("coverage"))));
    }
}

std::shared_ptr<ResponseTravelTimeStatistics> ResponseTimeFilterPostcodeDistrictProperties::getTravelTimeReachable() const
{
    return m_Travel_time_reachable;
}

void ResponseTimeFilterPostcodeDistrictProperties::setTravelTimeReachable(const std::shared_ptr<ResponseTravelTimeStatistics>& value)
{
    m_Travel_time_reachable = value;
    m_Travel_time_reachableIsSet = true;
}

bool ResponseTimeFilterPostcodeDistrictProperties::travelTimeReachableIsSet() const
{
    return m_Travel_time_reachableIsSet;
}

void ResponseTimeFilterPostcodeDistrictProperties::unsetTravel_time_reachable()
{
    m_Travel_time_reachableIsSet = false;
}

std::shared_ptr<ResponseTravelTimeStatistics> ResponseTimeFilterPostcodeDistrictProperties::getTravelTimeAll() const
{
    return m_Travel_time_all;
}

void ResponseTimeFilterPostcodeDistrictProperties::setTravelTimeAll(const std::shared_ptr<ResponseTravelTimeStatistics>& value)
{
    m_Travel_time_all = value;
    m_Travel_time_allIsSet = true;
}

bool ResponseTimeFilterPostcodeDistrictProperties::travelTimeAllIsSet() const
{
    return m_Travel_time_allIsSet;
}

void ResponseTimeFilterPostcodeDistrictProperties::unsetTravel_time_all()
{
    m_Travel_time_allIsSet = false;
}

double ResponseTimeFilterPostcodeDistrictProperties::getCoverage() const
{
    return m_Coverage;
}

void ResponseTimeFilterPostcodeDistrictProperties::setCoverage(double value)
{
    m_Coverage = value;
    m_CoverageIsSet = true;
}

bool ResponseTimeFilterPostcodeDistrictProperties::coverageIsSet() const
{
    return m_CoverageIsSet;
}

void ResponseTimeFilterPostcodeDistrictProperties::unsetCoverage()
{
    m_CoverageIsSet = false;
}

}
}
}
}


