/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseShape.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseShape::OAIResponseShape(QString json) {
    this->fromJson(json);
}

OAIResponseShape::OAIResponseShape() {
    this->init();
}

OAIResponseShape::~OAIResponseShape() {

}

void
OAIResponseShape::init() {
    m_shell_isSet = false;
    m_holes_isSet = false;
}

void
OAIResponseShape::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIResponseShape::fromJsonObject(QJsonObject json) {
    
    ::OpenAPI::fromJsonValue(shell, json[QString("shell")]);
    
    
    if(json["holes"].isArray()){
        auto arr = json["holes"].toArray();
        for (const QJsonValue & jval : arr) {
            QList<OAICoords> item;
            ::OpenAPI::fromJsonValue(item, jval)
            holes.push_back(item);
        }
    }
}

QString
OAIResponseShape::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseShape::asJsonObject() const {
    QJsonObject obj;
	
    if(shell.size() > 0){
        obj.insert(QString("shell"), ::OpenAPI::toJsonValue(shell));
    } 
	
    if(holes.size() > 0){
        
        obj.insert(QString("holes"), toJsonValue(holes));
    } 
    return obj;
}

QList<OAICoords>
OAIResponseShape::getShell() const {
    return shell;
}
void
OAIResponseShape::setShell(const QList<OAICoords> &shell) {
    this->shell = shell;
    this->m_shell_isSet = true;
}

QList<QList<OAICoords>>
OAIResponseShape::getHoles() const {
    return holes;
}
void
OAIResponseShape::setHoles(const QList<QList<OAICoords>> &holes) {
    this->holes = holes;
    this->m_holes_isSet = true;
}


bool
OAIResponseShape::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(shell.size() > 0){ isObjectUpdated = true; break;}
    
        if(holes.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

