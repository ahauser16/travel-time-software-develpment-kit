/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseFaresBreakdownItem.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseFaresBreakdownItem::OAIResponseFaresBreakdownItem(QString json) {
    this->fromJson(json);
}

OAIResponseFaresBreakdownItem::OAIResponseFaresBreakdownItem() {
    this->init();
}

OAIResponseFaresBreakdownItem::~OAIResponseFaresBreakdownItem() {

}

void
OAIResponseFaresBreakdownItem::init() {
    m_modes_isSet = false;
    m_route_part_ids_isSet = false;
    m_tickets_isSet = false;
}

void
OAIResponseFaresBreakdownItem::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIResponseFaresBreakdownItem::fromJsonObject(QJsonObject json) {
    
    ::OpenAPI::fromJsonValue(modes, json[QString("modes")]);
    
    ::OpenAPI::fromJsonValue(route_part_ids, json[QString("route_part_ids")]);
    
    ::OpenAPI::fromJsonValue(tickets, json[QString("tickets")]);
}

QString
OAIResponseFaresBreakdownItem::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseFaresBreakdownItem::asJsonObject() const {
    QJsonObject obj;
	
    if(modes.size() > 0){
        obj.insert(QString("modes"), ::OpenAPI::toJsonValue(modes));
    } 
	
    if(route_part_ids.size() > 0){
        obj.insert(QString("route_part_ids"), ::OpenAPI::toJsonValue(route_part_ids));
    } 
	
    if(tickets.size() > 0){
        obj.insert(QString("tickets"), ::OpenAPI::toJsonValue(tickets));
    } 
    return obj;
}

QList<OAIResponseTransportationMode>
OAIResponseFaresBreakdownItem::getModes() const {
    return modes;
}
void
OAIResponseFaresBreakdownItem::setModes(const QList<OAIResponseTransportationMode> &modes) {
    this->modes = modes;
    this->m_modes_isSet = true;
}

QList<qint32>
OAIResponseFaresBreakdownItem::getRoutePartIds() const {
    return route_part_ids;
}
void
OAIResponseFaresBreakdownItem::setRoutePartIds(const QList<qint32> &route_part_ids) {
    this->route_part_ids = route_part_ids;
    this->m_route_part_ids_isSet = true;
}

QList<OAIResponseFareTicket>
OAIResponseFaresBreakdownItem::getTickets() const {
    return tickets;
}
void
OAIResponseFaresBreakdownItem::setTickets(const QList<OAIResponseFareTicket> &tickets) {
    this->tickets = tickets;
    this->m_tickets_isSet = true;
}


bool
OAIResponseFaresBreakdownItem::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(modes.size() > 0){ isObjectUpdated = true; break;}
    
        if(route_part_ids.size() > 0){ isObjectUpdated = true; break;}
    
        if(tickets.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

