/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseTravelTimeStatistics.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseTravelTimeStatistics::OAIResponseTravelTimeStatistics(QString json) {
    this->fromJson(json);
}

OAIResponseTravelTimeStatistics::OAIResponseTravelTimeStatistics() {
    this->init();
}

OAIResponseTravelTimeStatistics::~OAIResponseTravelTimeStatistics() {

}

void
OAIResponseTravelTimeStatistics::init() {
    m_min_isSet = false;
    m_max_isSet = false;
    m_mean_isSet = false;
    m_median_isSet = false;
}

void
OAIResponseTravelTimeStatistics::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIResponseTravelTimeStatistics::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(min, json[QString("min")]);
    
    ::OpenAPI::fromJsonValue(max, json[QString("max")]);
    
    ::OpenAPI::fromJsonValue(mean, json[QString("mean")]);
    
    ::OpenAPI::fromJsonValue(median, json[QString("median")]);
    
}

QString
OAIResponseTravelTimeStatistics::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseTravelTimeStatistics::asJsonObject() const {
    QJsonObject obj;
	if(m_min_isSet){
        obj.insert(QString("min"), ::OpenAPI::toJsonValue(min));
    }
	if(m_max_isSet){
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(max));
    }
	if(m_mean_isSet){
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(mean));
    }
	if(m_median_isSet){
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(median));
    }
    return obj;
}

qint32
OAIResponseTravelTimeStatistics::getMin() const {
    return min;
}
void
OAIResponseTravelTimeStatistics::setMin(const qint32 &min) {
    this->min = min;
    this->m_min_isSet = true;
}

qint32
OAIResponseTravelTimeStatistics::getMax() const {
    return max;
}
void
OAIResponseTravelTimeStatistics::setMax(const qint32 &max) {
    this->max = max;
    this->m_max_isSet = true;
}

qint32
OAIResponseTravelTimeStatistics::getMean() const {
    return mean;
}
void
OAIResponseTravelTimeStatistics::setMean(const qint32 &mean) {
    this->mean = mean;
    this->m_mean_isSet = true;
}

qint32
OAIResponseTravelTimeStatistics::getMedian() const {
    return median;
}
void
OAIResponseTravelTimeStatistics::setMedian(const qint32 &median) {
    this->median = median;
    this->m_median_isSet = true;
}


bool
OAIResponseTravelTimeStatistics::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_min_isSet){ isObjectUpdated = true; break;}
    
        if(m_max_isSet){ isObjectUpdated = true; break;}
    
        if(m_mean_isSet){ isObjectUpdated = true; break;}
    
        if(m_median_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

