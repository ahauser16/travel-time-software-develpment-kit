/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRequestTimeMapArrivalSearch.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRequestTimeMapArrivalSearch::OAIRequestTimeMapArrivalSearch(QString json) {
    this->fromJson(json);
}

OAIRequestTimeMapArrivalSearch::OAIRequestTimeMapArrivalSearch() {
    this->init();
}

OAIRequestTimeMapArrivalSearch::~OAIRequestTimeMapArrivalSearch() {

}

void
OAIRequestTimeMapArrivalSearch::init() {
    m_id_isSet = false;
    m_coords_isSet = false;
    m_transportation_isSet = false;
    m_travel_time_isSet = false;
    m_arrival_time_isSet = false;
    m_properties_isSet = false;
    m_range_isSet = false;
}

void
OAIRequestTimeMapArrivalSearch::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIRequestTimeMapArrivalSearch::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    
    ::OpenAPI::fromJsonValue(coords, json[QString("coords")]);
    
    ::OpenAPI::fromJsonValue(transportation, json[QString("transportation")]);
    
    ::OpenAPI::fromJsonValue(travel_time, json[QString("travel_time")]);
    
    ::OpenAPI::fromJsonValue(arrival_time, json[QString("arrival_time")]);
    
    
    ::OpenAPI::fromJsonValue(properties, json[QString("properties")]);
    ::OpenAPI::fromJsonValue(range, json[QString("range")]);
    
}

QString
OAIRequestTimeMapArrivalSearch::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRequestTimeMapArrivalSearch::asJsonObject() const {
    QJsonObject obj;
	if(m_id_isSet){
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
	if(coords.isSet()){
        obj.insert(QString("coords"), ::OpenAPI::toJsonValue(coords));
    }
	if(transportation.isSet()){
        obj.insert(QString("transportation"), ::OpenAPI::toJsonValue(transportation));
    }
	if(m_travel_time_isSet){
        obj.insert(QString("travel_time"), ::OpenAPI::toJsonValue(travel_time));
    }
	if(m_arrival_time_isSet){
        obj.insert(QString("arrival_time"), ::OpenAPI::toJsonValue(arrival_time));
    }
	
    if(properties.size() > 0){
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(properties));
    } 
	if(range.isSet()){
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(range));
    }
    return obj;
}

QString
OAIRequestTimeMapArrivalSearch::getId() const {
    return id;
}
void
OAIRequestTimeMapArrivalSearch::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

OAICoords
OAIRequestTimeMapArrivalSearch::getCoords() const {
    return coords;
}
void
OAIRequestTimeMapArrivalSearch::setCoords(const OAICoords &coords) {
    this->coords = coords;
    this->m_coords_isSet = true;
}

OAIRequestTransportation
OAIRequestTimeMapArrivalSearch::getTransportation() const {
    return transportation;
}
void
OAIRequestTimeMapArrivalSearch::setTransportation(const OAIRequestTransportation &transportation) {
    this->transportation = transportation;
    this->m_transportation_isSet = true;
}

qint32
OAIRequestTimeMapArrivalSearch::getTravelTime() const {
    return travel_time;
}
void
OAIRequestTimeMapArrivalSearch::setTravelTime(const qint32 &travel_time) {
    this->travel_time = travel_time;
    this->m_travel_time_isSet = true;
}

QDateTime
OAIRequestTimeMapArrivalSearch::getArrivalTime() const {
    return arrival_time;
}
void
OAIRequestTimeMapArrivalSearch::setArrivalTime(const QDateTime &arrival_time) {
    this->arrival_time = arrival_time;
    this->m_arrival_time_isSet = true;
}

QList<OAIRequestTimeMapProperty>
OAIRequestTimeMapArrivalSearch::getProperties() const {
    return properties;
}
void
OAIRequestTimeMapArrivalSearch::setProperties(const QList<OAIRequestTimeMapProperty> &properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

OAIRequestRangeNoMaxResults
OAIRequestTimeMapArrivalSearch::getRange() const {
    return range;
}
void
OAIRequestTimeMapArrivalSearch::setRange(const OAIRequestRangeNoMaxResults &range) {
    this->range = range;
    this->m_range_isSet = true;
}


bool
OAIRequestTimeMapArrivalSearch::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_id_isSet){ isObjectUpdated = true; break;}
    
        if(coords.isSet()){ isObjectUpdated = true; break;}
    
        if(transportation.isSet()){ isObjectUpdated = true; break;}
    
        if(m_travel_time_isSet){ isObjectUpdated = true; break;}
    
        if(m_arrival_time_isSet){ isObjectUpdated = true; break;}
    
        if(properties.size() > 0){ isObjectUpdated = true; break;}
    
        if(range.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

