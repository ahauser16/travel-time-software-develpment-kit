/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseRoutesProperties.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseRoutesProperties::OAIResponseRoutesProperties(QString json) {
    this->init();
    this->fromJson(json);
}

OAIResponseRoutesProperties::OAIResponseRoutesProperties() {
    this->init();
}

OAIResponseRoutesProperties::~OAIResponseRoutesProperties() {

}

void
OAIResponseRoutesProperties::init() {
    
    m_travel_time_isSet = false;
    m_travel_time_isValid = false;
    
    m_distance_isSet = false;
    m_distance_isValid = false;
    
    m_fares_isSet = false;
    m_fares_isValid = false;
    
    m_route_isSet = false;
    m_route_isValid = false;
    }

void
OAIResponseRoutesProperties::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIResponseRoutesProperties::fromJsonObject(QJsonObject json) {
    
    m_travel_time_isValid = ::OpenAPI::fromJsonValue(travel_time, json[QString("travel_time")]);
    
    
    m_distance_isValid = ::OpenAPI::fromJsonValue(distance, json[QString("distance")]);
    
    
    m_fares_isValid = ::OpenAPI::fromJsonValue(fares, json[QString("fares")]);
    
    
    m_route_isValid = ::OpenAPI::fromJsonValue(route, json[QString("route")]);
    
    
}

QString
OAIResponseRoutesProperties::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseRoutesProperties::asJsonObject() const {
    QJsonObject obj;
    if(m_travel_time_isSet){
        obj.insert(QString("travel_time"), ::OpenAPI::toJsonValue(travel_time));
    }
    if(m_distance_isSet){
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(distance));
    }
    if(fares.isSet()){
        obj.insert(QString("fares"), ::OpenAPI::toJsonValue(fares));
    }
    if(route.isSet()){
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(route));
    }
    return obj;
}


qint32
OAIResponseRoutesProperties::getTravelTime() const {
    return travel_time;
}
void
OAIResponseRoutesProperties::setTravelTime(const qint32 &travel_time) {
    this->travel_time = travel_time;
    this->m_travel_time_isSet = true;
}


qint32
OAIResponseRoutesProperties::getDistance() const {
    return distance;
}
void
OAIResponseRoutesProperties::setDistance(const qint32 &distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}


OAIResponseFares
OAIResponseRoutesProperties::getFares() const {
    return fares;
}
void
OAIResponseRoutesProperties::setFares(const OAIResponseFares &fares) {
    this->fares = fares;
    this->m_fares_isSet = true;
}


OAIResponseRoute
OAIResponseRoutesProperties::getRoute() const {
    return route;
}
void
OAIResponseRoutesProperties::setRoute(const OAIResponseRoute &route) {
    this->route = route;
    this->m_route_isSet = true;
}

bool
OAIResponseRoutesProperties::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_travel_time_isSet){ isObjectUpdated = true; break;}
    
        if(m_distance_isSet){ isObjectUpdated = true; break;}
    
        if(fares.isSet()){ isObjectUpdated = true; break;}
    
        if(route.isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

bool
OAIResponseRoutesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

}

