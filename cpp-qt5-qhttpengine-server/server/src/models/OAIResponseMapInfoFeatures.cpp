/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseMapInfoFeatures.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseMapInfoFeatures::OAIResponseMapInfoFeatures(QString json) {
    this->fromJson(json);
}

OAIResponseMapInfoFeatures::OAIResponseMapInfoFeatures() {
    this->init();
}

OAIResponseMapInfoFeatures::~OAIResponseMapInfoFeatures() {

}

void
OAIResponseMapInfoFeatures::init() {
    m_public_transport_isSet = false;
    m_fares_isSet = false;
    m_postcodes_isSet = false;
}

void
OAIResponseMapInfoFeatures::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIResponseMapInfoFeatures::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(public_transport, json[QString("public_transport")]);
    
    ::OpenAPI::fromJsonValue(fares, json[QString("fares")]);
    
    ::OpenAPI::fromJsonValue(postcodes, json[QString("postcodes")]);
    
}

QString
OAIResponseMapInfoFeatures::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseMapInfoFeatures::asJsonObject() const {
    QJsonObject obj;
	if(public_transport.isSet()){
        obj.insert(QString("public_transport"), ::OpenAPI::toJsonValue(public_transport));
    }
	if(m_fares_isSet){
        obj.insert(QString("fares"), ::OpenAPI::toJsonValue(fares));
    }
	if(m_postcodes_isSet){
        obj.insert(QString("postcodes"), ::OpenAPI::toJsonValue(postcodes));
    }
    return obj;
}

OAIResponseMapInfoFeaturesPublicTransport
OAIResponseMapInfoFeatures::getPublicTransport() const {
    return public_transport;
}
void
OAIResponseMapInfoFeatures::setPublicTransport(const OAIResponseMapInfoFeaturesPublicTransport &public_transport) {
    this->public_transport = public_transport;
    this->m_public_transport_isSet = true;
}

bool
OAIResponseMapInfoFeatures::isFares() const {
    return fares;
}
void
OAIResponseMapInfoFeatures::setFares(const bool &fares) {
    this->fares = fares;
    this->m_fares_isSet = true;
}

bool
OAIResponseMapInfoFeatures::isPostcodes() const {
    return postcodes;
}
void
OAIResponseMapInfoFeatures::setPostcodes(const bool &postcodes) {
    this->postcodes = postcodes;
    this->m_postcodes_isSet = true;
}


bool
OAIResponseMapInfoFeatures::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(public_transport.isSet()){ isObjectUpdated = true; break;}
    
        if(m_fares_isSet){ isObjectUpdated = true; break;}
    
        if(m_postcodes_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

