/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRequestUnionOnIntersection.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRequestUnionOnIntersection::OAIRequestUnionOnIntersection(QString json) {
    this->fromJson(json);
}

OAIRequestUnionOnIntersection::OAIRequestUnionOnIntersection() {
    this->init();
}

OAIRequestUnionOnIntersection::~OAIRequestUnionOnIntersection() {

}

void
OAIRequestUnionOnIntersection::init() {
    m_id_isSet = false;
    m_search_ids_isSet = false;
}

void
OAIRequestUnionOnIntersection::fromJson(QString jsonString) {
    QByteArray array (jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void
OAIRequestUnionOnIntersection::fromJsonObject(QJsonObject json) {
    ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    
    
    ::OpenAPI::fromJsonValue(search_ids, json[QString("search_ids")]);
}

QString
OAIRequestUnionOnIntersection::asJson () const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRequestUnionOnIntersection::asJsonObject() const {
    QJsonObject obj;
	if(m_id_isSet){
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
	
    if(search_ids.size() > 0){
        obj.insert(QString("search_ids"), ::OpenAPI::toJsonValue(search_ids));
    } 
    return obj;
}

QString
OAIRequestUnionOnIntersection::getId() const {
    return id;
}
void
OAIRequestUnionOnIntersection::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

QList<QString>
OAIRequestUnionOnIntersection::getSearchIds() const {
    return search_ids;
}
void
OAIRequestUnionOnIntersection::setSearchIds(const QList<QString> &search_ids) {
    this->search_ids = search_ids;
    this->m_search_ids_isSet = true;
}


bool
OAIRequestUnionOnIntersection::isSet() const {
    bool isObjectUpdated = false;
    do{ 
        if(m_id_isSet){ isObjectUpdated = true; break;}
    
        if(search_ids.size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}

}

