/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResponseGeocodingProperties.h
 *
 * 
 */

#ifndef OAIResponseGeocodingProperties_H
#define OAIResponseGeocodingProperties_H

#include <QJsonObject>


#include "OAIResponseMapInfoFeatures.h"
#include <QString>

#include "OAIObject.h"

namespace OpenAPI {

class OAIResponseGeocodingProperties: public OAIObject {
public:
    OAIResponseGeocodingProperties();
    OAIResponseGeocodingProperties(QString json);
    ~OAIResponseGeocodingProperties() override;
    void init();

    QString asJson () const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);

    QString getLabel() const;
    void setLabel(const QString &label);

    double getScore() const;
    void setScore(const double &score);

    QString getHouseNumber() const;
    void setHouseNumber(const QString &house_number);

    QString getStreet() const;
    void setStreet(const QString &street);

    QString getRegion() const;
    void setRegion(const QString &region);

    QString getRegionCode() const;
    void setRegionCode(const QString &region_code);

    QString getNeighbourhood() const;
    void setNeighbourhood(const QString &neighbourhood);

    QString getCounty() const;
    void setCounty(const QString &county);

    QString getMacroregion() const;
    void setMacroregion(const QString &macroregion);

    QString getCity() const;
    void setCity(const QString &city);

    QString getCountry() const;
    void setCountry(const QString &country);

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);

    QString getContinent() const;
    void setContinent(const QString &continent);

    QString getPostcode() const;
    void setPostcode(const QString &postcode);

    OAIResponseMapInfoFeatures getFeatures() const;
    void setFeatures(const OAIResponseMapInfoFeatures &features);

    virtual bool isSet() const override;

private:
    QString name;
    bool m_name_isSet;

    QString label;
    bool m_label_isSet;

    double score;
    bool m_score_isSet;

    QString house_number;
    bool m_house_number_isSet;

    QString street;
    bool m_street_isSet;

    QString region;
    bool m_region_isSet;

    QString region_code;
    bool m_region_code_isSet;

    QString neighbourhood;
    bool m_neighbourhood_isSet;

    QString county;
    bool m_county_isSet;

    QString macroregion;
    bool m_macroregion_isSet;

    QString city;
    bool m_city_isSet;

    QString country;
    bool m_country_isSet;

    QString country_code;
    bool m_country_code_isSet;

    QString continent;
    bool m_continent_isSet;

    QString postcode;
    bool m_postcode_isSet;

    OAIResponseMapInfoFeatures features;
    bool m_features_isSet;

};

}

#endif // OAIResponseGeocodingProperties_H
