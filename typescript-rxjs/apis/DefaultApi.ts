// tslint:disable
/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, RequiredError, HttpHeaders, HttpQuery, COLLECTION_FORMATS } from '../runtime';
import {
    RequestRoutes,
    RequestSupportedLocations,
    RequestTimeFilter,
    RequestTimeFilterFast,
    RequestTimeFilterPostcodeDistricts,
    RequestTimeFilterPostcodeSectors,
    RequestTimeFilterPostcodes,
    RequestTimeMap,
    ResponseError,
    ResponseGeocoding,
    ResponseMapInfo,
    ResponseRoutes,
    ResponseSupportedLocations,
    ResponseTimeFilter,
    ResponseTimeFilterFast,
    ResponseTimeFilterPostcodeDistricts,
    ResponseTimeFilterPostcodeSectors,
    ResponseTimeFilterPostcodes,
    ResponseTimeMap,
} from '../models';

export interface GeocodingReverseSearchRequest {
    focusLat: number;
    focusLng: number;
    withinCountry?: string;
}

export interface GeocodingSearchRequest {
    query: string;
    withinCountry?: string;
    focusLat?: number;
    focusLng?: number;
}

export interface RoutesRequest {
    requestRoutes: RequestRoutes;
}

export interface SupportedLocationsRequest {
    requestSupportedLocations: RequestSupportedLocations;
}

export interface TimeFilterRequest {
    requestTimeFilter: RequestTimeFilter;
}

export interface TimeFilterFastRequest {
    requestTimeFilterFast: RequestTimeFilterFast;
}

export interface TimeFilterPostcodeDistrictsRequest {
    requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts;
}

export interface TimeFilterPostcodeSectorsRequest {
    requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors;
}

export interface TimeFilterPostcodesRequest {
    requestTimeFilterPostcodes: RequestTimeFilterPostcodes;
}

export interface TimeMapRequest {
    requestTimeMap: RequestTimeMap;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     */
    geocodingReverseSearch(requestParameters: GeocodingReverseSearchRequest): Observable<ResponseGeocoding> {
        if (requestParameters.focusLat === null || requestParameters.focusLat === undefined) {
            throw new RequiredError('focusLat','Required parameter requestParameters.focusLat was null or undefined when calling geocodingReverseSearch.');
        }

        if (requestParameters.focusLng === null || requestParameters.focusLng === undefined) {
            throw new RequiredError('focusLng','Required parameter requestParameters.focusLng was null or undefined when calling geocodingReverseSearch.');
        }

        const queryParameters: HttpQuery = {};

        if (requestParameters.focusLat !== undefined && requestParameters.focusLat !== null) {
            queryParameters['focus.lat'] = requestParameters.focusLat;
        }

        if (requestParameters.focusLng !== undefined && requestParameters.focusLng !== null) {
            queryParameters['focus.lng'] = requestParameters.focusLng;
        }

        if (requestParameters.withinCountry !== undefined && requestParameters.withinCountry !== null) {
            queryParameters['within.country'] = requestParameters.withinCountry;
        }

        const headerParameters: HttpHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseGeocoding>({
            path: `/v4/geocoding/reverse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     */
    geocodingSearch(requestParameters: GeocodingSearchRequest): Observable<ResponseGeocoding> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new RequiredError('query','Required parameter requestParameters.query was null or undefined when calling geocodingSearch.');
        }

        const queryParameters: HttpQuery = {};

        if (requestParameters.query !== undefined && requestParameters.query !== null) {
            queryParameters['query'] = requestParameters.query;
        }

        if (requestParameters.withinCountry !== undefined && requestParameters.withinCountry !== null) {
            queryParameters['within.country'] = requestParameters.withinCountry;
        }

        if (requestParameters.focusLat !== undefined && requestParameters.focusLat !== null) {
            queryParameters['focus.lat'] = requestParameters.focusLat;
        }

        if (requestParameters.focusLng !== undefined && requestParameters.focusLng !== null) {
            queryParameters['focus.lng'] = requestParameters.focusLng;
        }

        const headerParameters: HttpHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseGeocoding>({
            path: `/v4/geocoding/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     */
    mapInfo(): Observable<ResponseMapInfo> {
        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseMapInfo>({
            path: `/v4/map-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
    }

    /**
     */
    routes(requestParameters: RoutesRequest): Observable<ResponseRoutes> {
        if (requestParameters.requestRoutes === null || requestParameters.requestRoutes === undefined) {
            throw new RequiredError('requestRoutes','Required parameter requestParameters.requestRoutes was null or undefined when calling routes.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseRoutes>({
            path: `/v4/routes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestRoutes,
        });
    }

    /**
     */
    supportedLocations(requestParameters: SupportedLocationsRequest): Observable<ResponseSupportedLocations> {
        if (requestParameters.requestSupportedLocations === null || requestParameters.requestSupportedLocations === undefined) {
            throw new RequiredError('requestSupportedLocations','Required parameter requestParameters.requestSupportedLocations was null or undefined when calling supportedLocations.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseSupportedLocations>({
            path: `/v4/supported-locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestSupportedLocations,
        });
    }

    /**
     */
    timeFilter(requestParameters: TimeFilterRequest): Observable<ResponseTimeFilter> {
        if (requestParameters.requestTimeFilter === null || requestParameters.requestTimeFilter === undefined) {
            throw new RequiredError('requestTimeFilter','Required parameter requestParameters.requestTimeFilter was null or undefined when calling timeFilter.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseTimeFilter>({
            path: `/v4/time-filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestTimeFilter,
        });
    }

    /**
     */
    timeFilterFast(requestParameters: TimeFilterFastRequest): Observable<ResponseTimeFilterFast> {
        if (requestParameters.requestTimeFilterFast === null || requestParameters.requestTimeFilterFast === undefined) {
            throw new RequiredError('requestTimeFilterFast','Required parameter requestParameters.requestTimeFilterFast was null or undefined when calling timeFilterFast.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseTimeFilterFast>({
            path: `/v4/time-filter/fast`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestTimeFilterFast,
        });
    }

    /**
     */
    timeFilterPostcodeDistricts(requestParameters: TimeFilterPostcodeDistrictsRequest): Observable<ResponseTimeFilterPostcodeDistricts> {
        if (requestParameters.requestTimeFilterPostcodeDistricts === null || requestParameters.requestTimeFilterPostcodeDistricts === undefined) {
            throw new RequiredError('requestTimeFilterPostcodeDistricts','Required parameter requestParameters.requestTimeFilterPostcodeDistricts was null or undefined when calling timeFilterPostcodeDistricts.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseTimeFilterPostcodeDistricts>({
            path: `/v4/time-filter/postcode-districts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestTimeFilterPostcodeDistricts,
        });
    }

    /**
     */
    timeFilterPostcodeSectors(requestParameters: TimeFilterPostcodeSectorsRequest): Observable<ResponseTimeFilterPostcodeSectors> {
        if (requestParameters.requestTimeFilterPostcodeSectors === null || requestParameters.requestTimeFilterPostcodeSectors === undefined) {
            throw new RequiredError('requestTimeFilterPostcodeSectors','Required parameter requestParameters.requestTimeFilterPostcodeSectors was null or undefined when calling timeFilterPostcodeSectors.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseTimeFilterPostcodeSectors>({
            path: `/v4/time-filter/postcode-sectors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestTimeFilterPostcodeSectors,
        });
    }

    /**
     */
    timeFilterPostcodes(requestParameters: TimeFilterPostcodesRequest): Observable<ResponseTimeFilterPostcodes> {
        if (requestParameters.requestTimeFilterPostcodes === null || requestParameters.requestTimeFilterPostcodes === undefined) {
            throw new RequiredError('requestTimeFilterPostcodes','Required parameter requestParameters.requestTimeFilterPostcodes was null or undefined when calling timeFilterPostcodes.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseTimeFilterPostcodes>({
            path: `/v4/time-filter/postcodes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestTimeFilterPostcodes,
        });
    }

    /**
     */
    timeMap(requestParameters: TimeMapRequest): Observable<ResponseTimeMap> {
        if (requestParameters.requestTimeMap === null || requestParameters.requestTimeMap === undefined) {
            throw new RequiredError('requestTimeMap','Required parameter requestParameters.requestTimeMap was null or undefined when calling timeMap.');
        }

        const queryParameters: HttpQuery = {};

        const headerParameters: HttpHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Api-Key"] = this.configuration.apiKey("X-Api-Key"); // ApiKey authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Application-Id"] = this.configuration.apiKey("X-Application-Id"); // ApplicationId authentication
        }

        return this.request<ResponseTimeMap>({
            path: `/v4/time-map`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestTimeMap,
        });
    }

}
