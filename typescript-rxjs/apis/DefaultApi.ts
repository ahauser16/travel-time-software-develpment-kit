// tslint:disable
/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined } from '../runtime';
import {
    RequestRoutes,
    RequestSupportedLocations,
    RequestTimeFilter,
    RequestTimeFilterFast,
    RequestTimeFilterPostcodeDistricts,
    RequestTimeFilterPostcodeSectors,
    RequestTimeFilterPostcodes,
    RequestTimeMap,
    ResponseError,
    ResponseGeocoding,
    ResponseMapInfo,
    ResponseRoutes,
    ResponseSupportedLocations,
    ResponseTimeFilter,
    ResponseTimeFilterFast,
    ResponseTimeFilterPostcodeDistricts,
    ResponseTimeFilterPostcodeSectors,
    ResponseTimeFilterPostcodes,
    ResponseTimeMap,
} from '../models';

export interface GeocodingReverseSearchRequest {
    lat: number;
    lng: number;
    withinCountry?: string;
}

export interface GeocodingSearchRequest {
    query: string;
    focusLat?: number;
    focusLng?: number;
    withinCountry?: string;
}

export interface RoutesRequest {
    requestRoutes: RequestRoutes;
}

export interface SupportedLocationsRequest {
    requestSupportedLocations: RequestSupportedLocations;
}

export interface TimeFilterRequest {
    requestTimeFilter: RequestTimeFilter;
}

export interface TimeFilterFastRequest {
    requestTimeFilterFast: RequestTimeFilterFast;
}

export interface TimeFilterPostcodeDistrictsRequest {
    requestTimeFilterPostcodeDistricts: RequestTimeFilterPostcodeDistricts;
}

export interface TimeFilterPostcodeSectorsRequest {
    requestTimeFilterPostcodeSectors: RequestTimeFilterPostcodeSectors;
}

export interface TimeFilterPostcodesRequest {
    requestTimeFilterPostcodes: RequestTimeFilterPostcodes;
}

export interface TimeMapRequest {
    requestTimeMap: RequestTimeMap;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     */
    geocodingReverseSearch = ({ lat, lng, withinCountry }: GeocodingReverseSearchRequest): Observable<ResponseGeocoding> => {
        throwIfNullOrUndefined(lat, 'geocodingReverseSearch');
        throwIfNullOrUndefined(lng, 'geocodingReverseSearch');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'lat': lat,
            'lng': lng,
        };

        if (withinCountry != null) { query['within.country'] = withinCountry; }

        return this.request<ResponseGeocoding>({
            path: '/v4/geocoding/reverse',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     */
    geocodingSearch = ({ query: queryAlias, focusLat, focusLng, withinCountry }: GeocodingSearchRequest): Observable<ResponseGeocoding> => {
        throwIfNullOrUndefined(queryAlias, 'geocodingSearch');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'query': queryAlias,
        };

        if (focusLat != null) { query['focus.lat'] = focusLat; }
        if (focusLng != null) { query['focus.lng'] = focusLng; }
        if (withinCountry != null) { query['within.country'] = withinCountry; }

        return this.request<ResponseGeocoding>({
            path: '/v4/geocoding/search',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     */
    mapInfo = (): Observable<ResponseMapInfo> => {
        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseMapInfo>({
            path: '/v4/map-info',
            method: 'GET',
            headers,
        });
    };

    /**
     */
    routes = ({ requestRoutes }: RoutesRequest): Observable<ResponseRoutes> => {
        throwIfNullOrUndefined(requestRoutes, 'routes');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseRoutes>({
            path: '/v4/routes',
            method: 'POST',
            headers,
            body: requestRoutes,
        });
    };

    /**
     */
    supportedLocations = ({ requestSupportedLocations }: SupportedLocationsRequest): Observable<ResponseSupportedLocations> => {
        throwIfNullOrUndefined(requestSupportedLocations, 'supportedLocations');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseSupportedLocations>({
            path: '/v4/supported-locations',
            method: 'POST',
            headers,
            body: requestSupportedLocations,
        });
    };

    /**
     */
    timeFilter = ({ requestTimeFilter }: TimeFilterRequest): Observable<ResponseTimeFilter> => {
        throwIfNullOrUndefined(requestTimeFilter, 'timeFilter');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseTimeFilter>({
            path: '/v4/time-filter',
            method: 'POST',
            headers,
            body: requestTimeFilter,
        });
    };

    /**
     */
    timeFilterFast = ({ requestTimeFilterFast }: TimeFilterFastRequest): Observable<ResponseTimeFilterFast> => {
        throwIfNullOrUndefined(requestTimeFilterFast, 'timeFilterFast');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseTimeFilterFast>({
            path: '/v4/time-filter/fast',
            method: 'POST',
            headers,
            body: requestTimeFilterFast,
        });
    };

    /**
     */
    timeFilterPostcodeDistricts = ({ requestTimeFilterPostcodeDistricts }: TimeFilterPostcodeDistrictsRequest): Observable<ResponseTimeFilterPostcodeDistricts> => {
        throwIfNullOrUndefined(requestTimeFilterPostcodeDistricts, 'timeFilterPostcodeDistricts');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseTimeFilterPostcodeDistricts>({
            path: '/v4/time-filter/postcode-districts',
            method: 'POST',
            headers,
            body: requestTimeFilterPostcodeDistricts,
        });
    };

    /**
     */
    timeFilterPostcodeSectors = ({ requestTimeFilterPostcodeSectors }: TimeFilterPostcodeSectorsRequest): Observable<ResponseTimeFilterPostcodeSectors> => {
        throwIfNullOrUndefined(requestTimeFilterPostcodeSectors, 'timeFilterPostcodeSectors');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseTimeFilterPostcodeSectors>({
            path: '/v4/time-filter/postcode-sectors',
            method: 'POST',
            headers,
            body: requestTimeFilterPostcodeSectors,
        });
    };

    /**
     */
    timeFilterPostcodes = ({ requestTimeFilterPostcodes }: TimeFilterPostcodesRequest): Observable<ResponseTimeFilterPostcodes> => {
        throwIfNullOrUndefined(requestTimeFilterPostcodes, 'timeFilterPostcodes');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseTimeFilterPostcodes>({
            path: '/v4/time-filter/postcodes',
            method: 'POST',
            headers,
            body: requestTimeFilterPostcodes,
        });
    };

    /**
     */
    timeMap = ({ requestTimeMap }: TimeMapRequest): Observable<ResponseTimeMap> => {
        throwIfNullOrUndefined(requestTimeMap, 'timeMap');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'X-Api-Key': this.configuration.apiKey('X-Api-Key') }), // ApiKey authentication
            ...(this.configuration.apiKey && { 'X-Application-Id': this.configuration.apiKey('X-Application-Id') }), // ApplicationId authentication
        };

        return this.request<ResponseTimeMap>({
            path: '/v4/time-map',
            method: 'POST',
            headers,
            body: requestTimeMap,
        });
    };

}
