/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeMap.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTimeMap::RequestTimeMap()
{
    
}

RequestTimeMap::~RequestTimeMap()
{
}

std::string RequestTimeMap::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	write_json(ss, pt, false);
	return ss.str();
}

void RequestTimeMap::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
}

std::vector<std::shared_ptr<RequestTimeMapDepartureSearch>> RequestTimeMap::getDepartureSearches() const
{
    return m_Departure_searches;
}
void RequestTimeMap::setDepartureSearches(std::vector<std::shared_ptr<RequestTimeMapDepartureSearch>> value)
{
    m_Departure_searches = value;
}
std::vector<std::shared_ptr<RequestTimeMapArrivalSearch>> RequestTimeMap::getArrivalSearches() const
{
    return m_Arrival_searches;
}
void RequestTimeMap::setArrivalSearches(std::vector<std::shared_ptr<RequestTimeMapArrivalSearch>> value)
{
    m_Arrival_searches = value;
}
std::vector<std::shared_ptr<RequestUnionOnIntersection>> RequestTimeMap::getUnions() const
{
    return m_Unions;
}
void RequestTimeMap::setUnions(std::vector<std::shared_ptr<RequestUnionOnIntersection>> value)
{
    m_Unions = value;
}
std::vector<std::shared_ptr<RequestUnionOnIntersection>> RequestTimeMap::getIntersections() const
{
    return m_Intersections;
}
void RequestTimeMap::setIntersections(std::vector<std::shared_ptr<RequestUnionOnIntersection>> value)
{
    m_Intersections = value;
}

}
}
}
}

