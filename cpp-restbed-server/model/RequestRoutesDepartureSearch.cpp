/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestRoutesDepartureSearch.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestRoutesDepartureSearch::RequestRoutesDepartureSearch()
{
    m_Id = "";
    m_Departure_location_id = "";
    m_Departure_time = "";
    
}

RequestRoutesDepartureSearch::~RequestRoutesDepartureSearch()
{
}

std::string RequestRoutesDepartureSearch::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("Id", m_Id);
	pt.put("Departure_location_id", m_Departure_location_id);
	pt.put("Departure_time", m_Departure_time);
	write_json(ss, pt, false);
	return ss.str();
}

void RequestRoutesDepartureSearch::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_Id = pt.get("Id", "");
	m_Departure_location_id = pt.get("Departure_location_id", "");
	m_Departure_time = pt.get("Departure_time", "");
}

std::string RequestRoutesDepartureSearch::getId() const
{
    return m_Id;
}
void RequestRoutesDepartureSearch::setId(std::string value)
{
    m_Id = value;
}
std::string RequestRoutesDepartureSearch::getDepartureLocationId() const
{
    return m_Departure_location_id;
}
void RequestRoutesDepartureSearch::setDepartureLocationId(std::string value)
{
    m_Departure_location_id = value;
}
std::vector<std::string> RequestRoutesDepartureSearch::getArrivalLocationIds() const
{
    return m_Arrival_location_ids;
}
void RequestRoutesDepartureSearch::setArrivalLocationIds(std::vector<std::string> value)
{
    m_Arrival_location_ids = value;
}
std::shared_ptr<RequestTransportation> RequestRoutesDepartureSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestRoutesDepartureSearch::setTransportation(std::shared_ptr<RequestTransportation> value)
{
    m_Transportation = value;
}
std::string RequestRoutesDepartureSearch::getDepartureTime() const
{
    return m_Departure_time;
}
void RequestRoutesDepartureSearch::setDepartureTime(std::string value)
{
    m_Departure_time = value;
}
std::vector<std::shared_ptr<RequestRoutesProperty>> RequestRoutesDepartureSearch::getProperties() const
{
    return m_Properties;
}
void RequestRoutesDepartureSearch::setProperties(std::vector<std::shared_ptr<RequestRoutesProperty>> value)
{
    m_Properties = value;
}
std::shared_ptr<RequestRangeFull> RequestRoutesDepartureSearch::getRange() const
{
    return m_Range;
}
void RequestRoutesDepartureSearch::setRange(std::shared_ptr<RequestRangeFull> value)
{
    m_Range = value;
}

}
}
}
}

