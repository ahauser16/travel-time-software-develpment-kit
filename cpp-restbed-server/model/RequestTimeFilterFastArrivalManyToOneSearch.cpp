/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "RequestTimeFilterFastArrivalManyToOneSearch.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

RequestTimeFilterFastArrivalManyToOneSearch::RequestTimeFilterFastArrivalManyToOneSearch()
{
    m_Id = "";
    m_Arrival_location_id = "";
    m_Travel_time = 0;
    
}

RequestTimeFilterFastArrivalManyToOneSearch::~RequestTimeFilterFastArrivalManyToOneSearch()
{
}

std::string RequestTimeFilterFastArrivalManyToOneSearch::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("Id", m_Id);
	pt.put("Arrival_location_id", m_Arrival_location_id);
	pt.put("Travel_time", m_Travel_time);
	write_json(ss, pt, false);
	return ss.str();
}

void RequestTimeFilterFastArrivalManyToOneSearch::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_Id = pt.get("Id", "");
	m_Arrival_location_id = pt.get("Arrival_location_id", "");
	m_Travel_time = pt.get("Travel_time", 0);
}

std::string RequestTimeFilterFastArrivalManyToOneSearch::getId() const
{
    return m_Id;
}
void RequestTimeFilterFastArrivalManyToOneSearch::setId(std::string value)
{
    m_Id = value;
}
std::string RequestTimeFilterFastArrivalManyToOneSearch::getArrivalLocationId() const
{
    return m_Arrival_location_id;
}
void RequestTimeFilterFastArrivalManyToOneSearch::setArrivalLocationId(std::string value)
{
    m_Arrival_location_id = value;
}
std::vector<std::string> RequestTimeFilterFastArrivalManyToOneSearch::getDepartureLocationIds() const
{
    return m_Departure_location_ids;
}
void RequestTimeFilterFastArrivalManyToOneSearch::setDepartureLocationIds(std::vector<std::string> value)
{
    m_Departure_location_ids = value;
}
std::shared_ptr<RequestTransportationFast> RequestTimeFilterFastArrivalManyToOneSearch::getTransportation() const
{
    return m_Transportation;
}
void RequestTimeFilterFastArrivalManyToOneSearch::setTransportation(std::shared_ptr<RequestTransportationFast> value)
{
    m_Transportation = value;
}
int32_t RequestTimeFilterFastArrivalManyToOneSearch::getTravelTime() const
{
    return m_Travel_time;
}
void RequestTimeFilterFastArrivalManyToOneSearch::setTravelTime(int32_t value)
{
    m_Travel_time = value;
}
std::shared_ptr<RequestArrivalTimePeriod> RequestTimeFilterFastArrivalManyToOneSearch::getArrivalTimePeriod() const
{
    return m_Arrival_time_period;
}
void RequestTimeFilterFastArrivalManyToOneSearch::setArrivalTimePeriod(std::shared_ptr<RequestArrivalTimePeriod> value)
{
    m_Arrival_time_period = value;
}
std::vector<std::shared_ptr<RequestTimeFilterFastProperty>> RequestTimeFilterFastArrivalManyToOneSearch::getProperties() const
{
    return m_Properties;
}
void RequestTimeFilterFastArrivalManyToOneSearch::setProperties(std::vector<std::shared_ptr<RequestTimeFilterFastProperty>> value)
{
    m_Properties = value;
}

}
}
}
}

