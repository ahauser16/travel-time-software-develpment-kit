/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 3.3.4.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>

#include "DefaultApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

DefaultApi::DefaultApi() {
	std::shared_ptr<DefaultApiV4GeocodingReverseResource> spDefaultApiV4GeocodingReverseResource = std::make_shared<DefaultApiV4GeocodingReverseResource>();
	this->publish(spDefaultApiV4GeocodingReverseResource);
	
	std::shared_ptr<DefaultApiV4GeocodingSearchResource> spDefaultApiV4GeocodingSearchResource = std::make_shared<DefaultApiV4GeocodingSearchResource>();
	this->publish(spDefaultApiV4GeocodingSearchResource);
	
	std::shared_ptr<DefaultApiV4Map-infoResource> spDefaultApiV4Map-infoResource = std::make_shared<DefaultApiV4Map-infoResource>();
	this->publish(spDefaultApiV4Map-infoResource);
	
	std::shared_ptr<DefaultApiV4RoutesResource> spDefaultApiV4RoutesResource = std::make_shared<DefaultApiV4RoutesResource>();
	this->publish(spDefaultApiV4RoutesResource);
	
	std::shared_ptr<DefaultApiV4Supported-locationsResource> spDefaultApiV4Supported-locationsResource = std::make_shared<DefaultApiV4Supported-locationsResource>();
	this->publish(spDefaultApiV4Supported-locationsResource);
	
	std::shared_ptr<DefaultApiV4Time-filterResource> spDefaultApiV4Time-filterResource = std::make_shared<DefaultApiV4Time-filterResource>();
	this->publish(spDefaultApiV4Time-filterResource);
	
	std::shared_ptr<DefaultApiV4Time-filterFastResource> spDefaultApiV4Time-filterFastResource = std::make_shared<DefaultApiV4Time-filterFastResource>();
	this->publish(spDefaultApiV4Time-filterFastResource);
	
	std::shared_ptr<DefaultApiV4Time-filterPostcode-districtsResource> spDefaultApiV4Time-filterPostcode-districtsResource = std::make_shared<DefaultApiV4Time-filterPostcode-districtsResource>();
	this->publish(spDefaultApiV4Time-filterPostcode-districtsResource);
	
	std::shared_ptr<DefaultApiV4Time-filterPostcode-sectorsResource> spDefaultApiV4Time-filterPostcode-sectorsResource = std::make_shared<DefaultApiV4Time-filterPostcode-sectorsResource>();
	this->publish(spDefaultApiV4Time-filterPostcode-sectorsResource);
	
	std::shared_ptr<DefaultApiV4Time-filterPostcodesResource> spDefaultApiV4Time-filterPostcodesResource = std::make_shared<DefaultApiV4Time-filterPostcodesResource>();
	this->publish(spDefaultApiV4Time-filterPostcodesResource);
	
	std::shared_ptr<DefaultApiV4Time-mapResource> spDefaultApiV4Time-mapResource = std::make_shared<DefaultApiV4Time-mapResource>();
	this->publish(spDefaultApiV4Time-mapResource);
	
}

DefaultApi::~DefaultApi() {}

void DefaultApi::startService(int const& port) {
	std::shared_ptr<restbed::Settings> settings = std::make_shared<restbed::Settings>();
	settings->set_port(port);
	settings->set_root("");
	
	this->start(settings);
}

void DefaultApi::stopService() {
	this->stop();
}

DefaultApiV4GeocodingReverseResource::DefaultApiV4GeocodingReverseResource()
{
	this->set_path("/v4/geocoding/reverse/");
	this->set_method_handler("GET",
		std::bind(&DefaultApiV4GeocodingReverseResource::GET_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4GeocodingReverseResource::~DefaultApiV4GeocodingReverseResource()
{
}

void DefaultApiV4GeocodingReverseResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const double focusPeriodlat = request->get_query_parameter("focusPeriodlat", 0.0);
			const double focusPeriodlng = request->get_query_parameter("focusPeriodlng", 0.0);
			const std::string withinPeriodcountry = request->get_query_parameter("withinPeriodcountry", "");

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Match a query string to geographic coordinates. [Docs link](http://docs.traveltimeplatform.com/reference/geocoding-search/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

}



DefaultApiV4GeocodingSearchResource::DefaultApiV4GeocodingSearchResource()
{
	this->set_path("/v4/geocoding/search/");
	this->set_method_handler("GET",
		std::bind(&DefaultApiV4GeocodingSearchResource::GET_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4GeocodingSearchResource::~DefaultApiV4GeocodingSearchResource()
{
}

void DefaultApiV4GeocodingSearchResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			
			// Getting the query params
			const std::string query = request->get_query_parameter("query", "");
			const std::string withinPeriodcountry = request->get_query_parameter("withinPeriodcountry", "");
			const double focusPeriodlat = request->get_query_parameter("focusPeriodlat", 0.0);
			const double focusPeriodlng = request->get_query_parameter("focusPeriodlng", 0.0);

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Match a query string to geographic coordinates. [Docs link](http://docs.traveltimeplatform.com/reference/geocoding-search/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

}



DefaultApiV4Map-infoResource::DefaultApiV4Map-infoResource()
{
	this->set_path("/v4/map-info/");
	this->set_method_handler("GET",
		std::bind(&DefaultApiV4Map-infoResource::GET_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Map-infoResource::~DefaultApiV4Map-infoResource()
{
}

void DefaultApiV4Map-infoResource::GET_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Returns information about currently supported countries. [Docs link](http://docs.traveltimeplatform.com/reference/map-info/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

}



DefaultApiV4RoutesResource::DefaultApiV4RoutesResource()
{
	this->set_path("/v4/routes/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4RoutesResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4RoutesResource::~DefaultApiV4RoutesResource()
{
}

void DefaultApiV4RoutesResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Returns routing information between source and destinations. [Docs link](http://docs.traveltimeplatform.com/reference/routes/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}



DefaultApiV4Supported-locationsResource::DefaultApiV4Supported-locationsResource()
{
	this->set_path("/v4/supported-locations/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4Supported-locationsResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Supported-locationsResource::~DefaultApiV4Supported-locationsResource()
{
}

void DefaultApiV4Supported-locationsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Find out what points are supported by our api. [Docs link](http://docs.traveltimeplatform.com/reference/supported-locations/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}



DefaultApiV4Time-filterResource::DefaultApiV4Time-filterResource()
{
	this->set_path("/v4/time-filter/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4Time-filterResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Time-filterResource::~DefaultApiV4Time-filterResource()
{
}

void DefaultApiV4Time-filterResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Given origin and destination points filter out points that cannot be reached within specified time limit. [Docs link](http://docs.traveltimeplatform.com/reference/time-filter)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}



DefaultApiV4Time-filterFastResource::DefaultApiV4Time-filterFastResource()
{
	this->set_path("/v4/time-filter/fast/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4Time-filterFastResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Time-filterFastResource::~DefaultApiV4Time-filterFastResource()
{
}

void DefaultApiV4Time-filterFastResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "A very fast version of Time Filter. [Docs link](http://docs.traveltimeplatform.com/reference/time-filter-fast/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}



DefaultApiV4Time-filterPostcode-districtsResource::DefaultApiV4Time-filterPostcode-districtsResource()
{
	this->set_path("/v4/time-filter/postcode-districts/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4Time-filterPostcode-districtsResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Time-filterPostcode-districtsResource::~DefaultApiV4Time-filterPostcode-districtsResource()
{
}

void DefaultApiV4Time-filterPostcode-districtsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Find districts that have a certain coverage from origin and get statistics about postcodes within such districts. [Docs link](http://docs.traveltimeplatform.com/reference/postcode-district-filter/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}



DefaultApiV4Time-filterPostcode-sectorsResource::DefaultApiV4Time-filterPostcode-sectorsResource()
{
	this->set_path("/v4/time-filter/postcode-sectors/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4Time-filterPostcode-sectorsResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Time-filterPostcode-sectorsResource::~DefaultApiV4Time-filterPostcode-sectorsResource()
{
}

void DefaultApiV4Time-filterPostcode-sectorsResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Find sectors that have a certain coverage from origin and get statistics about postcodes within such sectors. [Docs link](http://docs.traveltimeplatform.com/reference/postcode-sector-filter/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}



DefaultApiV4Time-filterPostcodesResource::DefaultApiV4Time-filterPostcodesResource()
{
	this->set_path("/v4/time-filter/postcodes/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4Time-filterPostcodesResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Time-filterPostcodesResource::~DefaultApiV4Time-filterPostcodesResource()
{
}

void DefaultApiV4Time-filterPostcodesResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Find reachable postcodes from origin and get statistics about such postcodes. [Docs link](http://docs.traveltimeplatform.com/reference/postcode-search/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}



DefaultApiV4Time-mapResource::DefaultApiV4Time-mapResource()
{
	this->set_path("/v4/time-map/");
	this->set_method_handler("POST",
		std::bind(&DefaultApiV4Time-mapResource::POST_method_handler, this,
			std::placeholders::_1));
}

DefaultApiV4Time-mapResource::~DefaultApiV4Time-mapResource()
{
}

void DefaultApiV4Time-mapResource::POST_method_handler(const std::shared_ptr<restbed::Session> session) {

	const auto request = session->get_request();
	// Body params are present, therefore we have to fetch them
	int content_length = request->get_header("Content-Length", 0);
	session->fetch(content_length,
		[ this ]( const std::shared_ptr<restbed::Session> session, const restbed::Bytes & body )
		{

			const auto request = session->get_request();
			std::string requestBody = restbed::String::format("%.*s\n", ( int ) body.size( ), body.data( ));
			/**
			 * Get body params or form params here from the requestBody string
			 */
			
			

			
			// Change the value of this variable to the appropriate response before sending the response
			int status_code = 200;
			
			/**
			 * Process the received information here
			 */
			
			if (status_code == 200) {
				session->close(200, "Given origin coordinates, find shapes of zones reachable within corresponding travel time. [Docs link](http://docs.traveltimeplatform.com/reference/time-map/)", { {"Connection", "close"} });
				return;
			}
			if (status_code == 0) {
				session->close(0, "The json body returned upon error. [Docs link](http://docs.traveltimeplatform.com/reference/error-response)", { {"Connection", "close"} });
				return;
			}

		});
}




}
}
}
}

