/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi() {}

OAIDefaultApi::~OAIDefaultApi() {}

OAIDefaultApi::OAIDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIDefaultApi::geocodingReverseSearch(double focus_lat, double focus_lng, QString* within_country) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/geocoding/reverse");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("focus.lat"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(focus_lat)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("focus.lng"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(focus_lng)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("within.country"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(within_country)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::geocodingReverseSearchCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::geocodingReverseSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseGeocoding* output = static_cast<OAIResponseGeocoding*>(create(json, QString("OAIResponseGeocoding")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseGeocoding*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit geocodingReverseSearchSignal(output);
    } else {
        emit geocodingReverseSearchSignalE(output, error_type, error_str);
        emit geocodingReverseSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::geocodingSearch(QString* query, QString* within_country, double focus_lat, double focus_lng) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/geocoding/search");


    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("query"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(query)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("within.country"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(within_country)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("focus.lat"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(focus_lat)));

    if (fullPath.indexOf("?") > 0)
      fullPath.append("&");
    else
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("focus.lng"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(focus_lng)));


    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::geocodingSearchCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::geocodingSearchCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseGeocoding* output = static_cast<OAIResponseGeocoding*>(create(json, QString("OAIResponseGeocoding")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseGeocoding*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit geocodingSearchSignal(output);
    } else {
        emit geocodingSearchSignalE(output, error_type, error_str);
        emit geocodingSearchSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::mapInfo() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/map-info");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::mapInfoCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::mapInfoCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseMapInfo* output = static_cast<OAIResponseMapInfo*>(create(json, QString("OAIResponseMapInfo")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseMapInfo*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit mapInfoSignal(output);
    } else {
        emit mapInfoSignalE(output, error_type, error_str);
        emit mapInfoSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::routes(OAIRequestRoutes& oai_request_routes) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/routes");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_routes.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::routesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::routesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseRoutes* output = static_cast<OAIResponseRoutes*>(create(json, QString("OAIResponseRoutes")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseRoutes*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit routesSignal(output);
    } else {
        emit routesSignalE(output, error_type, error_str);
        emit routesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::supportedLocations(OAIRequestSupportedLocations& oai_request_supported_locations) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/supported-locations");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_supported_locations.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::supportedLocationsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::supportedLocationsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseSupportedLocations* output = static_cast<OAIResponseSupportedLocations*>(create(json, QString("OAIResponseSupportedLocations")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseSupportedLocations*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit supportedLocationsSignal(output);
    } else {
        emit supportedLocationsSignalE(output, error_type, error_str);
        emit supportedLocationsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::timeFilter(OAIRequestTimeFilter& oai_request_time_filter) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/time-filter");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_time_filter.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::timeFilterCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::timeFilterCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseTimeFilter* output = static_cast<OAIResponseTimeFilter*>(create(json, QString("OAIResponseTimeFilter")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseTimeFilter*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit timeFilterSignal(output);
    } else {
        emit timeFilterSignalE(output, error_type, error_str);
        emit timeFilterSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::timeFilterFast(OAIRequestTimeFilterFast& oai_request_time_filter_fast) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/time-filter/fast");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_time_filter_fast.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::timeFilterFastCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::timeFilterFastCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseTimeFilterFast* output = static_cast<OAIResponseTimeFilterFast*>(create(json, QString("OAIResponseTimeFilterFast")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseTimeFilterFast*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit timeFilterFastSignal(output);
    } else {
        emit timeFilterFastSignalE(output, error_type, error_str);
        emit timeFilterFastSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::timeFilterPostcodeDistricts(OAIRequestTimeFilterPostcodeDistricts& oai_request_time_filter_postcode_districts) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/time-filter/postcode-districts");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_time_filter_postcode_districts.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::timeFilterPostcodeDistrictsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::timeFilterPostcodeDistrictsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseTimeFilterPostcodeDistricts* output = static_cast<OAIResponseTimeFilterPostcodeDistricts*>(create(json, QString("OAIResponseTimeFilterPostcodeDistricts")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseTimeFilterPostcodeDistricts*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit timeFilterPostcodeDistrictsSignal(output);
    } else {
        emit timeFilterPostcodeDistrictsSignalE(output, error_type, error_str);
        emit timeFilterPostcodeDistrictsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::timeFilterPostcodeSectors(OAIRequestTimeFilterPostcodeSectors& oai_request_time_filter_postcode_sectors) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/time-filter/postcode-sectors");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_time_filter_postcode_sectors.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::timeFilterPostcodeSectorsCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::timeFilterPostcodeSectorsCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseTimeFilterPostcodeSectors* output = static_cast<OAIResponseTimeFilterPostcodeSectors*>(create(json, QString("OAIResponseTimeFilterPostcodeSectors")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseTimeFilterPostcodeSectors*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit timeFilterPostcodeSectorsSignal(output);
    } else {
        emit timeFilterPostcodeSectorsSignalE(output, error_type, error_str);
        emit timeFilterPostcodeSectorsSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::timeFilterPostcodes(OAIRequestTimeFilterPostcodes& oai_request_time_filter_postcodes) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/time-filter/postcodes");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_time_filter_postcodes.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::timeFilterPostcodesCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::timeFilterPostcodesCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseTimeFilterPostcodes* output = static_cast<OAIResponseTimeFilterPostcodes*>(create(json, QString("OAIResponseTimeFilterPostcodes")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseTimeFilterPostcodes*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit timeFilterPostcodesSignal(output);
    } else {
        emit timeFilterPostcodesSignalE(output, error_type, error_str);
        emit timeFilterPostcodesSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::timeMap(OAIRequestTimeMap& oai_request_time_map) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/v4/time-map");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "POST");


    
    QString output = oai_request_time_map.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::timeMapCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::timeMapCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIResponseTimeMap* output = static_cast<OAIResponseTimeMap*>(create(json, QString("OAIResponseTimeMap")));
    auto wrapper = new OAIQObjectWrapper<OAIResponseTimeMap*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit timeMapSignal(output);
    } else {
        emit timeMapSignalE(output, error_type, error_str);
        emit timeMapSignalEFull(worker, error_type, error_str);
    }
}


}
