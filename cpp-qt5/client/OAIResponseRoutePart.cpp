/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseRoutePart.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseRoutePart::OAIResponseRoutePart(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseRoutePart::OAIResponseRoutePart() {
    init();
}

OAIResponseRoutePart::~OAIResponseRoutePart() {
    this->cleanup();
}

void
OAIResponseRoutePart::init() {
    id = new QString("");
    m_id_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    mode = new OAIResponseTransportationMode();
    m_mode_isSet = false;
    directions = new QString("");
    m_directions_isSet = false;
    distance = 0;
    m_distance_isSet = false;
    travel_time = 0;
    m_travel_time_isSet = false;
    coords = new QList<OAICoords*>();
    m_coords_isSet = false;
    direction = new QString("");
    m_direction_isSet = false;
    road = new QString("");
    m_road_isSet = false;
    turn = new QString("");
    m_turn_isSet = false;
    line = new QString("");
    m_line_isSet = false;
    departure_station = new QString("");
    m_departure_station_isSet = false;
    arrival_station = new QString("");
    m_arrival_station_isSet = false;
    departs_at = new QString("");
    m_departs_at_isSet = false;
    arrives_at = new QString("");
    m_arrives_at_isSet = false;
    num_stops = 0;
    m_num_stops_isSet = false;
}

void
OAIResponseRoutePart::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(mode != nullptr) { 
        delete mode;
    }
    if(directions != nullptr) { 
        delete directions;
    }


    if(coords != nullptr) { 
        auto arr = coords;
        for(auto o: *arr) { 
            delete o;
        }
        delete coords;
    }
    if(direction != nullptr) { 
        delete direction;
    }
    if(road != nullptr) { 
        delete road;
    }
    if(turn != nullptr) { 
        delete turn;
    }
    if(line != nullptr) { 
        delete line;
    }
    if(departure_station != nullptr) { 
        delete departure_station;
    }
    if(arrival_station != nullptr) { 
        delete arrival_station;
    }
    if(departs_at != nullptr) { 
        delete departs_at;
    }
    if(arrives_at != nullptr) { 
        delete arrives_at;
    }

}

OAIResponseRoutePart*
OAIResponseRoutePart::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseRoutePart::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&mode, pJson["mode"], "OAIResponseTransportationMode", "OAIResponseTransportationMode");
    
    ::OpenAPI::setValue(&directions, pJson["directions"], "QString", "QString");
    
    ::OpenAPI::setValue(&distance, pJson["distance"], "qint32", "");
    
    ::OpenAPI::setValue(&travel_time, pJson["travel_time"], "qint32", "");
    
    
    ::OpenAPI::setValue(&coords, pJson["coords"], "QList", "OAICoords");
    ::OpenAPI::setValue(&direction, pJson["direction"], "QString", "QString");
    
    ::OpenAPI::setValue(&road, pJson["road"], "QString", "QString");
    
    ::OpenAPI::setValue(&turn, pJson["turn"], "QString", "QString");
    
    ::OpenAPI::setValue(&line, pJson["line"], "QString", "QString");
    
    ::OpenAPI::setValue(&departure_station, pJson["departure_station"], "QString", "QString");
    
    ::OpenAPI::setValue(&arrival_station, pJson["arrival_station"], "QString", "QString");
    
    ::OpenAPI::setValue(&departs_at, pJson["departs_at"], "QString", "QString");
    
    ::OpenAPI::setValue(&arrives_at, pJson["arrives_at"], "QString", "QString");
    
    ::OpenAPI::setValue(&num_stops, pJson["num_stops"], "qint32", "");
    
}

QString
OAIResponseRoutePart::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseRoutePart::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if((mode != nullptr) && (mode->isSet())){
        toJsonValue(QString("mode"), mode, obj, QString("OAIResponseTransportationMode"));
    }
    if(directions != nullptr && *directions != QString("")){
        toJsonValue(QString("directions"), directions, obj, QString("QString"));
    }
    if(m_distance_isSet){
        obj.insert("distance", QJsonValue(distance));
    }
    if(m_travel_time_isSet){
        obj.insert("travel_time", QJsonValue(travel_time));
    }
    if(coords->size() > 0){
        toJsonArray((QList<void*>*)coords, obj, "coords", "OAICoords");
    }
    if(direction != nullptr && *direction != QString("")){
        toJsonValue(QString("direction"), direction, obj, QString("QString"));
    }
    if(road != nullptr && *road != QString("")){
        toJsonValue(QString("road"), road, obj, QString("QString"));
    }
    if(turn != nullptr && *turn != QString("")){
        toJsonValue(QString("turn"), turn, obj, QString("QString"));
    }
    if(line != nullptr && *line != QString("")){
        toJsonValue(QString("line"), line, obj, QString("QString"));
    }
    if(departure_station != nullptr && *departure_station != QString("")){
        toJsonValue(QString("departure_station"), departure_station, obj, QString("QString"));
    }
    if(arrival_station != nullptr && *arrival_station != QString("")){
        toJsonValue(QString("arrival_station"), arrival_station, obj, QString("QString"));
    }
    if(departs_at != nullptr && *departs_at != QString("")){
        toJsonValue(QString("departs_at"), departs_at, obj, QString("QString"));
    }
    if(arrives_at != nullptr && *arrives_at != QString("")){
        toJsonValue(QString("arrives_at"), arrives_at, obj, QString("QString"));
    }
    if(m_num_stops_isSet){
        obj.insert("num_stops", QJsonValue(num_stops));
    }

    return obj;
}

QString*
OAIResponseRoutePart::getId() {
    return id;
}
void
OAIResponseRoutePart::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIResponseRoutePart::getType() {
    return type;
}
void
OAIResponseRoutePart::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIResponseTransportationMode*
OAIResponseRoutePart::getMode() {
    return mode;
}
void
OAIResponseRoutePart::setMode(OAIResponseTransportationMode* mode) {
    this->mode = mode;
    this->m_mode_isSet = true;
}

QString*
OAIResponseRoutePart::getDirections() {
    return directions;
}
void
OAIResponseRoutePart::setDirections(QString* directions) {
    this->directions = directions;
    this->m_directions_isSet = true;
}

qint32
OAIResponseRoutePart::getDistance() {
    return distance;
}
void
OAIResponseRoutePart::setDistance(qint32 distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}

qint32
OAIResponseRoutePart::getTravelTime() {
    return travel_time;
}
void
OAIResponseRoutePart::setTravelTime(qint32 travel_time) {
    this->travel_time = travel_time;
    this->m_travel_time_isSet = true;
}

QList<OAICoords*>*
OAIResponseRoutePart::getCoords() {
    return coords;
}
void
OAIResponseRoutePart::setCoords(QList<OAICoords*>* coords) {
    this->coords = coords;
    this->m_coords_isSet = true;
}

QString*
OAIResponseRoutePart::getDirection() {
    return direction;
}
void
OAIResponseRoutePart::setDirection(QString* direction) {
    this->direction = direction;
    this->m_direction_isSet = true;
}

QString*
OAIResponseRoutePart::getRoad() {
    return road;
}
void
OAIResponseRoutePart::setRoad(QString* road) {
    this->road = road;
    this->m_road_isSet = true;
}

QString*
OAIResponseRoutePart::getTurn() {
    return turn;
}
void
OAIResponseRoutePart::setTurn(QString* turn) {
    this->turn = turn;
    this->m_turn_isSet = true;
}

QString*
OAIResponseRoutePart::getLine() {
    return line;
}
void
OAIResponseRoutePart::setLine(QString* line) {
    this->line = line;
    this->m_line_isSet = true;
}

QString*
OAIResponseRoutePart::getDepartureStation() {
    return departure_station;
}
void
OAIResponseRoutePart::setDepartureStation(QString* departure_station) {
    this->departure_station = departure_station;
    this->m_departure_station_isSet = true;
}

QString*
OAIResponseRoutePart::getArrivalStation() {
    return arrival_station;
}
void
OAIResponseRoutePart::setArrivalStation(QString* arrival_station) {
    this->arrival_station = arrival_station;
    this->m_arrival_station_isSet = true;
}

QString*
OAIResponseRoutePart::getDepartsAt() {
    return departs_at;
}
void
OAIResponseRoutePart::setDepartsAt(QString* departs_at) {
    this->departs_at = departs_at;
    this->m_departs_at_isSet = true;
}

QString*
OAIResponseRoutePart::getArrivesAt() {
    return arrives_at;
}
void
OAIResponseRoutePart::setArrivesAt(QString* arrives_at) {
    this->arrives_at = arrives_at;
    this->m_arrives_at_isSet = true;
}

qint32
OAIResponseRoutePart::getNumStops() {
    return num_stops;
}
void
OAIResponseRoutePart::setNumStops(qint32 num_stops) {
    this->num_stops = num_stops;
    this->m_num_stops_isSet = true;
}


bool
OAIResponseRoutePart::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(mode != nullptr && mode->isSet()){ isObjectUpdated = true; break;}
        if(directions != nullptr && *directions != QString("")){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
        if(m_travel_time_isSet){ isObjectUpdated = true; break;}
        if(coords->size() > 0){ isObjectUpdated = true; break;}
        if(direction != nullptr && *direction != QString("")){ isObjectUpdated = true; break;}
        if(road != nullptr && *road != QString("")){ isObjectUpdated = true; break;}
        if(turn != nullptr && *turn != QString("")){ isObjectUpdated = true; break;}
        if(line != nullptr && *line != QString("")){ isObjectUpdated = true; break;}
        if(departure_station != nullptr && *departure_station != QString("")){ isObjectUpdated = true; break;}
        if(arrival_station != nullptr && *arrival_station != QString("")){ isObjectUpdated = true; break;}
        if(departs_at != nullptr && *departs_at != QString("")){ isObjectUpdated = true; break;}
        if(arrives_at != nullptr && *arrives_at != QString("")){ isObjectUpdated = true; break;}
        if(m_num_stops_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

