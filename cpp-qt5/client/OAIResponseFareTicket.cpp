/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseFareTicket.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseFareTicket::OAIResponseFareTicket(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseFareTicket::OAIResponseFareTicket() {
    init();
}

OAIResponseFareTicket::~OAIResponseFareTicket() {
    this->cleanup();
}

void
OAIResponseFareTicket::init() {
    type = new QString("");
    m_type_isSet = false;
    price = 0.0;
    m_price_isSet = false;
    currency = new QString("");
    m_currency_isSet = false;
}

void
OAIResponseFareTicket::cleanup() {
    if(type != nullptr) { 
        delete type;
    }

    if(currency != nullptr) { 
        delete currency;
    }
}

OAIResponseFareTicket*
OAIResponseFareTicket::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseFareTicket::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&price, pJson["price"], "double", "");
    
    ::OpenAPI::setValue(&currency, pJson["currency"], "QString", "QString");
    
}

QString
OAIResponseFareTicket::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseFareTicket::asJsonObject() {
    QJsonObject obj;
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(m_price_isSet){
        obj.insert("price", QJsonValue(price));
    }
    if(currency != nullptr && *currency != QString("")){
        toJsonValue(QString("currency"), currency, obj, QString("QString"));
    }

    return obj;
}

QString*
OAIResponseFareTicket::getType() {
    return type;
}
void
OAIResponseFareTicket::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

double
OAIResponseFareTicket::getPrice() {
    return price;
}
void
OAIResponseFareTicket::setPrice(double price) {
    this->price = price;
    this->m_price_isSet = true;
}

QString*
OAIResponseFareTicket::getCurrency() {
    return currency;
}
void
OAIResponseFareTicket::setCurrency(QString* currency) {
    this->currency = currency;
    this->m_currency_isSet = true;
}


bool
OAIResponseFareTicket::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(m_price_isSet){ isObjectUpdated = true; break;}
        if(currency != nullptr && *currency != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

