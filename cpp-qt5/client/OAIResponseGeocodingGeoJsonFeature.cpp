/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseGeocodingGeoJsonFeature.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseGeocodingGeoJsonFeature::OAIResponseGeocodingGeoJsonFeature(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseGeocodingGeoJsonFeature::OAIResponseGeocodingGeoJsonFeature() {
    init();
}

OAIResponseGeocodingGeoJsonFeature::~OAIResponseGeocodingGeoJsonFeature() {
    this->cleanup();
}

void
OAIResponseGeocodingGeoJsonFeature::init() {
    type = new QString("");
    m_type_isSet = false;
    geometry = new OAIResponseGeocodingGeometry();
    m_geometry_isSet = false;
    properties = new OAIResponseGeocodingProperties();
    m_properties_isSet = false;
}

void
OAIResponseGeocodingGeoJsonFeature::cleanup() {
    if(type != nullptr) { 
        delete type;
    }
    if(geometry != nullptr) { 
        delete geometry;
    }
    if(properties != nullptr) { 
        delete properties;
    }
}

OAIResponseGeocodingGeoJsonFeature*
OAIResponseGeocodingGeoJsonFeature::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseGeocodingGeoJsonFeature::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&geometry, pJson["geometry"], "OAIResponseGeocodingGeometry", "OAIResponseGeocodingGeometry");
    
    ::OpenAPI::setValue(&properties, pJson["properties"], "OAIResponseGeocodingProperties", "OAIResponseGeocodingProperties");
    
}

QString
OAIResponseGeocodingGeoJsonFeature::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseGeocodingGeoJsonFeature::asJsonObject() {
    QJsonObject obj;
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if((geometry != nullptr) && (geometry->isSet())){
        toJsonValue(QString("geometry"), geometry, obj, QString("OAIResponseGeocodingGeometry"));
    }
    if((properties != nullptr) && (properties->isSet())){
        toJsonValue(QString("properties"), properties, obj, QString("OAIResponseGeocodingProperties"));
    }

    return obj;
}

QString*
OAIResponseGeocodingGeoJsonFeature::getType() {
    return type;
}
void
OAIResponseGeocodingGeoJsonFeature::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAIResponseGeocodingGeometry*
OAIResponseGeocodingGeoJsonFeature::getGeometry() {
    return geometry;
}
void
OAIResponseGeocodingGeoJsonFeature::setGeometry(OAIResponseGeocodingGeometry* geometry) {
    this->geometry = geometry;
    this->m_geometry_isSet = true;
}

OAIResponseGeocodingProperties*
OAIResponseGeocodingGeoJsonFeature::getProperties() {
    return properties;
}
void
OAIResponseGeocodingGeoJsonFeature::setProperties(OAIResponseGeocodingProperties* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}


bool
OAIResponseGeocodingGeoJsonFeature::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(geometry != nullptr && geometry->isSet()){ isObjectUpdated = true; break;}
        if(properties != nullptr && properties->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

