/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRequestRoutesDepartureSearch.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRequestRoutesDepartureSearch::OAIRequestRoutesDepartureSearch(QString json) {
    init();
    this->fromJson(json);
}

OAIRequestRoutesDepartureSearch::OAIRequestRoutesDepartureSearch() {
    init();
}

OAIRequestRoutesDepartureSearch::~OAIRequestRoutesDepartureSearch() {
    this->cleanup();
}

void
OAIRequestRoutesDepartureSearch::init() {
    id = new QString("");
    m_id_isSet = false;
    departure_location_id = new QString("");
    m_departure_location_id_isSet = false;
    arrival_location_ids = new QList<QString*>();
    m_arrival_location_ids_isSet = false;
    transportation = new OAIRequestTransportation();
    m_transportation_isSet = false;
    departure_time = NULL;
    m_departure_time_isSet = false;
    properties = new QList<OAIRequestRoutesProperty*>();
    m_properties_isSet = false;
    range = new OAIRequestRangeFull();
    m_range_isSet = false;
}

void
OAIRequestRoutesDepartureSearch::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(departure_location_id != nullptr) { 
        delete departure_location_id;
    }
    if(arrival_location_ids != nullptr) { 
        auto arr = arrival_location_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete arrival_location_ids;
    }
    if(transportation != nullptr) { 
        delete transportation;
    }
    if(departure_time != nullptr) { 
        delete departure_time;
    }
    if(properties != nullptr) { 
        auto arr = properties;
        for(auto o: *arr) { 
            delete o;
        }
        delete properties;
    }
    if(range != nullptr) { 
        delete range;
    }
}

OAIRequestRoutesDepartureSearch*
OAIRequestRoutesDepartureSearch::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRequestRoutesDepartureSearch::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    ::OpenAPI::setValue(&departure_location_id, pJson["departure_location_id"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&arrival_location_ids, pJson["arrival_location_ids"], "QList", "QString");
    ::OpenAPI::setValue(&transportation, pJson["transportation"], "OAIRequestTransportation", "OAIRequestTransportation");
    
    ::OpenAPI::setValue(&departure_time, pJson["departure_time"], "QDateTime", "QDateTime");
    
    
    ::OpenAPI::setValue(&properties, pJson["properties"], "QList", "OAIRequestRoutesProperty");
    ::OpenAPI::setValue(&range, pJson["range"], "OAIRequestRangeFull", "OAIRequestRangeFull");
    
}

QString
OAIRequestRoutesDepartureSearch::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRequestRoutesDepartureSearch::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(departure_location_id != nullptr && *departure_location_id != QString("")){
        toJsonValue(QString("departure_location_id"), departure_location_id, obj, QString("QString"));
    }
    if(arrival_location_ids->size() > 0){
        toJsonArray((QList<void*>*)arrival_location_ids, obj, "arrival_location_ids", "QString");
    }
    if((transportation != nullptr) && (transportation->isSet())){
        toJsonValue(QString("transportation"), transportation, obj, QString("OAIRequestTransportation"));
    }
    if(departure_time != nullptr) { 
        toJsonValue(QString("departure_time"), departure_time, obj, QString("QDateTime"));
    }
    if(properties->size() > 0){
        toJsonArray((QList<void*>*)properties, obj, "properties", "OAIRequestRoutesProperty");
    }
    if((range != nullptr) && (range->isSet())){
        toJsonValue(QString("range"), range, obj, QString("OAIRequestRangeFull"));
    }

    return obj;
}

QString*
OAIRequestRoutesDepartureSearch::getId() {
    return id;
}
void
OAIRequestRoutesDepartureSearch::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QString*
OAIRequestRoutesDepartureSearch::getDepartureLocationId() {
    return departure_location_id;
}
void
OAIRequestRoutesDepartureSearch::setDepartureLocationId(QString* departure_location_id) {
    this->departure_location_id = departure_location_id;
    this->m_departure_location_id_isSet = true;
}

QList<QString*>*
OAIRequestRoutesDepartureSearch::getArrivalLocationIds() {
    return arrival_location_ids;
}
void
OAIRequestRoutesDepartureSearch::setArrivalLocationIds(QList<QString*>* arrival_location_ids) {
    this->arrival_location_ids = arrival_location_ids;
    this->m_arrival_location_ids_isSet = true;
}

OAIRequestTransportation*
OAIRequestRoutesDepartureSearch::getTransportation() {
    return transportation;
}
void
OAIRequestRoutesDepartureSearch::setTransportation(OAIRequestTransportation* transportation) {
    this->transportation = transportation;
    this->m_transportation_isSet = true;
}

QDateTime*
OAIRequestRoutesDepartureSearch::getDepartureTime() {
    return departure_time;
}
void
OAIRequestRoutesDepartureSearch::setDepartureTime(QDateTime* departure_time) {
    this->departure_time = departure_time;
    this->m_departure_time_isSet = true;
}

QList<OAIRequestRoutesProperty*>*
OAIRequestRoutesDepartureSearch::getProperties() {
    return properties;
}
void
OAIRequestRoutesDepartureSearch::setProperties(QList<OAIRequestRoutesProperty*>* properties) {
    this->properties = properties;
    this->m_properties_isSet = true;
}

OAIRequestRangeFull*
OAIRequestRoutesDepartureSearch::getRange() {
    return range;
}
void
OAIRequestRoutesDepartureSearch::setRange(OAIRequestRangeFull* range) {
    this->range = range;
    this->m_range_isSet = true;
}


bool
OAIRequestRoutesDepartureSearch::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(departure_location_id != nullptr && *departure_location_id != QString("")){ isObjectUpdated = true; break;}
        if(arrival_location_ids->size() > 0){ isObjectUpdated = true; break;}
        if(transportation != nullptr && transportation->isSet()){ isObjectUpdated = true; break;}
        if(properties->size() > 0){ isObjectUpdated = true; break;}
        if(range != nullptr && range->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

