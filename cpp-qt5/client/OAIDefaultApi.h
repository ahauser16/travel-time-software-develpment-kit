/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef _OAI_OAIDefaultApi_H_
#define _OAI_OAIDefaultApi_H_

#include "OAIHttpRequest.h"

#include "OAIRequestRoutes.h"
#include "OAIRequestSupportedLocations.h"
#include "OAIRequestTimeFilter.h"
#include "OAIRequestTimeFilterFast.h"
#include "OAIRequestTimeFilterPostcodeDistricts.h"
#include "OAIRequestTimeFilterPostcodeSectors.h"
#include "OAIRequestTimeFilterPostcodes.h"
#include "OAIRequestTimeMap.h"
#include "OAIResponseError.h"
#include "OAIResponseGeocoding.h"
#include "OAIResponseMapInfo.h"
#include "OAIResponseRoutes.h"
#include "OAIResponseSupportedLocations.h"
#include "OAIResponseTimeFilter.h"
#include "OAIResponseTimeFilterFast.h"
#include "OAIResponseTimeFilterPostcodeDistricts.h"
#include "OAIResponseTimeFilterPostcodeSectors.h"
#include "OAIResponseTimeFilterPostcodes.h"
#include "OAIResponseTimeMap.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIDefaultApi: public QObject {
    Q_OBJECT

public:
    OAIDefaultApi();
    OAIDefaultApi(QString host, QString basePath);
    ~OAIDefaultApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void geocodingReverseSearch(double focus_lat, double focus_lng, QString* within_country);
    void geocodingSearch(QString* query, QString* within_country, double focus_lat, double focus_lng);
    void mapInfo();
    void routes(OAIRequestRoutes& oai_request_routes);
    void supportedLocations(OAIRequestSupportedLocations& oai_request_supported_locations);
    void timeFilter(OAIRequestTimeFilter& oai_request_time_filter);
    void timeFilterFast(OAIRequestTimeFilterFast& oai_request_time_filter_fast);
    void timeFilterPostcodeDistricts(OAIRequestTimeFilterPostcodeDistricts& oai_request_time_filter_postcode_districts);
    void timeFilterPostcodeSectors(OAIRequestTimeFilterPostcodeSectors& oai_request_time_filter_postcode_sectors);
    void timeFilterPostcodes(OAIRequestTimeFilterPostcodes& oai_request_time_filter_postcodes);
    void timeMap(OAIRequestTimeMap& oai_request_time_map);
    
private:
    void geocodingReverseSearchCallback (OAIHttpRequestWorker * worker);
    void geocodingSearchCallback (OAIHttpRequestWorker * worker);
    void mapInfoCallback (OAIHttpRequestWorker * worker);
    void routesCallback (OAIHttpRequestWorker * worker);
    void supportedLocationsCallback (OAIHttpRequestWorker * worker);
    void timeFilterCallback (OAIHttpRequestWorker * worker);
    void timeFilterFastCallback (OAIHttpRequestWorker * worker);
    void timeFilterPostcodeDistrictsCallback (OAIHttpRequestWorker * worker);
    void timeFilterPostcodeSectorsCallback (OAIHttpRequestWorker * worker);
    void timeFilterPostcodesCallback (OAIHttpRequestWorker * worker);
    void timeMapCallback (OAIHttpRequestWorker * worker);
    
signals:
    void geocodingReverseSearchSignal(OAIResponseGeocoding* summary);
    void geocodingSearchSignal(OAIResponseGeocoding* summary);
    void mapInfoSignal(OAIResponseMapInfo* summary);
    void routesSignal(OAIResponseRoutes* summary);
    void supportedLocationsSignal(OAIResponseSupportedLocations* summary);
    void timeFilterSignal(OAIResponseTimeFilter* summary);
    void timeFilterFastSignal(OAIResponseTimeFilterFast* summary);
    void timeFilterPostcodeDistrictsSignal(OAIResponseTimeFilterPostcodeDistricts* summary);
    void timeFilterPostcodeSectorsSignal(OAIResponseTimeFilterPostcodeSectors* summary);
    void timeFilterPostcodesSignal(OAIResponseTimeFilterPostcodes* summary);
    void timeMapSignal(OAIResponseTimeMap* summary);
    
    void geocodingReverseSearchSignalE(OAIResponseGeocoding* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void geocodingSearchSignalE(OAIResponseGeocoding* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void mapInfoSignalE(OAIResponseMapInfo* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void routesSignalE(OAIResponseRoutes* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void supportedLocationsSignalE(OAIResponseSupportedLocations* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterSignalE(OAIResponseTimeFilter* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterFastSignalE(OAIResponseTimeFilterFast* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterPostcodeDistrictsSignalE(OAIResponseTimeFilterPostcodeDistricts* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterPostcodeSectorsSignalE(OAIResponseTimeFilterPostcodeSectors* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterPostcodesSignalE(OAIResponseTimeFilterPostcodes* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeMapSignalE(OAIResponseTimeMap* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void geocodingReverseSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void geocodingSearchSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void mapInfoSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void routesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void supportedLocationsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterFastSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterPostcodeDistrictsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterPostcodeSectorsSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeFilterPostcodesSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void timeMapSignalEFull(OAIHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
