/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRequestUnionOnIntersection.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRequestUnionOnIntersection::OAIRequestUnionOnIntersection(QString json) {
    init();
    this->fromJson(json);
}

OAIRequestUnionOnIntersection::OAIRequestUnionOnIntersection() {
    init();
}

OAIRequestUnionOnIntersection::~OAIRequestUnionOnIntersection() {
    this->cleanup();
}

void
OAIRequestUnionOnIntersection::init() {
    id = new QString("");
    m_id_isSet = false;
    search_ids = new QList<QString*>();
    m_search_ids_isSet = false;
}

void
OAIRequestUnionOnIntersection::cleanup() {
    if(id != nullptr) { 
        delete id;
    }
    if(search_ids != nullptr) { 
        auto arr = search_ids;
        for(auto o: *arr) { 
            delete o;
        }
        delete search_ids;
    }
}

OAIRequestUnionOnIntersection*
OAIRequestUnionOnIntersection::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRequestUnionOnIntersection::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&id, pJson["id"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&search_ids, pJson["search_ids"], "QList", "QString");
}

QString
OAIRequestUnionOnIntersection::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRequestUnionOnIntersection::asJsonObject() {
    QJsonObject obj;
    if(id != nullptr && *id != QString("")){
        toJsonValue(QString("id"), id, obj, QString("QString"));
    }
    if(search_ids->size() > 0){
        toJsonArray((QList<void*>*)search_ids, obj, "search_ids", "QString");
    }

    return obj;
}

QString*
OAIRequestUnionOnIntersection::getId() {
    return id;
}
void
OAIRequestUnionOnIntersection::setId(QString* id) {
    this->id = id;
    this->m_id_isSet = true;
}

QList<QString*>*
OAIRequestUnionOnIntersection::getSearchIds() {
    return search_ids;
}
void
OAIRequestUnionOnIntersection::setSearchIds(QList<QString*>* search_ids) {
    this->search_ids = search_ids;
    this->m_search_ids_isSet = true;
}


bool
OAIRequestUnionOnIntersection::isSet(){
    bool isObjectUpdated = false;
    do{
        if(id != nullptr && *id != QString("")){ isObjectUpdated = true; break;}
        if(search_ids->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

