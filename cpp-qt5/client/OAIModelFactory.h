/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef ModelFactory_H_
#define ModelFactory_H_

#include "OAIObject.h"

#include "OAICoords.h"
#include "OAIRequestArrivalTimePeriod.h"
#include "OAIRequestLocation.h"
#include "OAIRequestRangeFull.h"
#include "OAIRequestRangeNoMaxResults.h"
#include "OAIRequestRoutes.h"
#include "OAIRequestRoutesArrivalSearch.h"
#include "OAIRequestRoutesDepartureSearch.h"
#include "OAIRequestRoutesProperty.h"
#include "OAIRequestSupportedLocations.h"
#include "OAIRequestTimeFilter.h"
#include "OAIRequestTimeFilterArrivalSearch.h"
#include "OAIRequestTimeFilterDepartureSearch.h"
#include "OAIRequestTimeFilterFast.h"
#include "OAIRequestTimeFilterFastArrivalManyToOneSearch.h"
#include "OAIRequestTimeFilterFastArrivalOneToManySearch.h"
#include "OAIRequestTimeFilterFastArrivalSearches.h"
#include "OAIRequestTimeFilterFastProperty.h"
#include "OAIRequestTimeFilterPostcodeDistricts.h"
#include "OAIRequestTimeFilterPostcodeDistrictsArrivalSearch.h"
#include "OAIRequestTimeFilterPostcodeDistrictsDepartureSearch.h"
#include "OAIRequestTimeFilterPostcodeDistrictsProperty.h"
#include "OAIRequestTimeFilterPostcodeSectors.h"
#include "OAIRequestTimeFilterPostcodeSectorsArrivalSearch.h"
#include "OAIRequestTimeFilterPostcodeSectorsDepartureSearch.h"
#include "OAIRequestTimeFilterPostcodeSectorsProperty.h"
#include "OAIRequestTimeFilterPostcodes.h"
#include "OAIRequestTimeFilterPostcodesArrivalSearch.h"
#include "OAIRequestTimeFilterPostcodesDepartureSearch.h"
#include "OAIRequestTimeFilterPostcodesProperty.h"
#include "OAIRequestTimeFilterProperty.h"
#include "OAIRequestTimeMap.h"
#include "OAIRequestTimeMapArrivalSearch.h"
#include "OAIRequestTimeMapDepartureSearch.h"
#include "OAIRequestTimeMapProperty.h"
#include "OAIRequestTransportation.h"
#include "OAIRequestTransportationFast.h"
#include "OAIRequestUnionOnIntersection.h"
#include "OAIResponseBoundingBox.h"
#include "OAIResponseBox.h"
#include "OAIResponseDistanceBreakdownItem.h"
#include "OAIResponseError.h"
#include "OAIResponseFareTicket.h"
#include "OAIResponseFares.h"
#include "OAIResponseFaresBreakdownItem.h"
#include "OAIResponseFaresFast.h"
#include "OAIResponseGeocoding.h"
#include "OAIResponseGeocodingGeoJsonFeature.h"
#include "OAIResponseGeocodingGeometry.h"
#include "OAIResponseGeocodingProperties.h"
#include "OAIResponseMapInfo.h"
#include "OAIResponseMapInfoFeatures.h"
#include "OAIResponseMapInfoFeaturesPublicTransport.h"
#include "OAIResponseMapInfoMap.h"
#include "OAIResponseRoute.h"
#include "OAIResponseRoutePart.h"
#include "OAIResponseRoutes.h"
#include "OAIResponseRoutesLocation.h"
#include "OAIResponseRoutesProperties.h"
#include "OAIResponseRoutesResult.h"
#include "OAIResponseShape.h"
#include "OAIResponseSupportedLocation.h"
#include "OAIResponseSupportedLocations.h"
#include "OAIResponseTimeFilter.h"
#include "OAIResponseTimeFilterFast.h"
#include "OAIResponseTimeFilterFastLocation.h"
#include "OAIResponseTimeFilterFastProperties.h"
#include "OAIResponseTimeFilterFastResult.h"
#include "OAIResponseTimeFilterLocation.h"
#include "OAIResponseTimeFilterPostcode.h"
#include "OAIResponseTimeFilterPostcodeDistrict.h"
#include "OAIResponseTimeFilterPostcodeDistrictProperties.h"
#include "OAIResponseTimeFilterPostcodeDistricts.h"
#include "OAIResponseTimeFilterPostcodeDistrictsResult.h"
#include "OAIResponseTimeFilterPostcodeSector.h"
#include "OAIResponseTimeFilterPostcodeSectorProperties.h"
#include "OAIResponseTimeFilterPostcodeSectors.h"
#include "OAIResponseTimeFilterPostcodeSectorsResult.h"
#include "OAIResponseTimeFilterPostcodes.h"
#include "OAIResponseTimeFilterPostcodesProperties.h"
#include "OAIResponseTimeFilterPostcodesResult.h"
#include "OAIResponseTimeFilterProperties.h"
#include "OAIResponseTimeFilterResult.h"
#include "OAIResponseTimeMap.h"
#include "OAIResponseTimeMapBoundingBoxes.h"
#include "OAIResponseTimeMapBoundingBoxesResult.h"
#include "OAIResponseTimeMapProperties.h"
#include "OAIResponseTimeMapResult.h"
#include "OAIResponseTimeMapWkt.h"
#include "OAIResponseTimeMapWktResult.h"
#include "OAIResponseTransportationMode.h"
#include "OAIResponseTravelTimeStatistics.h"

namespace OpenAPI {

  inline void* create(QString type) {
    if(QString("OAICoords").compare(type) == 0) {
      return new OAICoords();
    }
    if(QString("OAIRequestArrivalTimePeriod").compare(type) == 0) {
      return new OAIRequestArrivalTimePeriod();
    }
    if(QString("OAIRequestLocation").compare(type) == 0) {
      return new OAIRequestLocation();
    }
    if(QString("OAIRequestRangeFull").compare(type) == 0) {
      return new OAIRequestRangeFull();
    }
    if(QString("OAIRequestRangeNoMaxResults").compare(type) == 0) {
      return new OAIRequestRangeNoMaxResults();
    }
    if(QString("OAIRequestRoutes").compare(type) == 0) {
      return new OAIRequestRoutes();
    }
    if(QString("OAIRequestRoutesArrivalSearch").compare(type) == 0) {
      return new OAIRequestRoutesArrivalSearch();
    }
    if(QString("OAIRequestRoutesDepartureSearch").compare(type) == 0) {
      return new OAIRequestRoutesDepartureSearch();
    }
    if(QString("OAIRequestRoutesProperty").compare(type) == 0) {
      return new OAIRequestRoutesProperty();
    }
    if(QString("OAIRequestSupportedLocations").compare(type) == 0) {
      return new OAIRequestSupportedLocations();
    }
    if(QString("OAIRequestTimeFilter").compare(type) == 0) {
      return new OAIRequestTimeFilter();
    }
    if(QString("OAIRequestTimeFilterArrivalSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterArrivalSearch();
    }
    if(QString("OAIRequestTimeFilterDepartureSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterDepartureSearch();
    }
    if(QString("OAIRequestTimeFilterFast").compare(type) == 0) {
      return new OAIRequestTimeFilterFast();
    }
    if(QString("OAIRequestTimeFilterFastArrivalManyToOneSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterFastArrivalManyToOneSearch();
    }
    if(QString("OAIRequestTimeFilterFastArrivalOneToManySearch").compare(type) == 0) {
      return new OAIRequestTimeFilterFastArrivalOneToManySearch();
    }
    if(QString("OAIRequestTimeFilterFastArrivalSearches").compare(type) == 0) {
      return new OAIRequestTimeFilterFastArrivalSearches();
    }
    if(QString("OAIRequestTimeFilterFastProperty").compare(type) == 0) {
      return new OAIRequestTimeFilterFastProperty();
    }
    if(QString("OAIRequestTimeFilterPostcodeDistricts").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeDistricts();
    }
    if(QString("OAIRequestTimeFilterPostcodeDistrictsArrivalSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeDistrictsArrivalSearch();
    }
    if(QString("OAIRequestTimeFilterPostcodeDistrictsDepartureSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeDistrictsDepartureSearch();
    }
    if(QString("OAIRequestTimeFilterPostcodeDistrictsProperty").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeDistrictsProperty();
    }
    if(QString("OAIRequestTimeFilterPostcodeSectors").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeSectors();
    }
    if(QString("OAIRequestTimeFilterPostcodeSectorsArrivalSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeSectorsArrivalSearch();
    }
    if(QString("OAIRequestTimeFilterPostcodeSectorsDepartureSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeSectorsDepartureSearch();
    }
    if(QString("OAIRequestTimeFilterPostcodeSectorsProperty").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodeSectorsProperty();
    }
    if(QString("OAIRequestTimeFilterPostcodes").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodes();
    }
    if(QString("OAIRequestTimeFilterPostcodesArrivalSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodesArrivalSearch();
    }
    if(QString("OAIRequestTimeFilterPostcodesDepartureSearch").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodesDepartureSearch();
    }
    if(QString("OAIRequestTimeFilterPostcodesProperty").compare(type) == 0) {
      return new OAIRequestTimeFilterPostcodesProperty();
    }
    if(QString("OAIRequestTimeFilterProperty").compare(type) == 0) {
      return new OAIRequestTimeFilterProperty();
    }
    if(QString("OAIRequestTimeMap").compare(type) == 0) {
      return new OAIRequestTimeMap();
    }
    if(QString("OAIRequestTimeMapArrivalSearch").compare(type) == 0) {
      return new OAIRequestTimeMapArrivalSearch();
    }
    if(QString("OAIRequestTimeMapDepartureSearch").compare(type) == 0) {
      return new OAIRequestTimeMapDepartureSearch();
    }
    if(QString("OAIRequestTimeMapProperty").compare(type) == 0) {
      return new OAIRequestTimeMapProperty();
    }
    if(QString("OAIRequestTransportation").compare(type) == 0) {
      return new OAIRequestTransportation();
    }
    if(QString("OAIRequestTransportationFast").compare(type) == 0) {
      return new OAIRequestTransportationFast();
    }
    if(QString("OAIRequestUnionOnIntersection").compare(type) == 0) {
      return new OAIRequestUnionOnIntersection();
    }
    if(QString("OAIResponseBoundingBox").compare(type) == 0) {
      return new OAIResponseBoundingBox();
    }
    if(QString("OAIResponseBox").compare(type) == 0) {
      return new OAIResponseBox();
    }
    if(QString("OAIResponseDistanceBreakdownItem").compare(type) == 0) {
      return new OAIResponseDistanceBreakdownItem();
    }
    if(QString("OAIResponseError").compare(type) == 0) {
      return new OAIResponseError();
    }
    if(QString("OAIResponseFareTicket").compare(type) == 0) {
      return new OAIResponseFareTicket();
    }
    if(QString("OAIResponseFares").compare(type) == 0) {
      return new OAIResponseFares();
    }
    if(QString("OAIResponseFaresBreakdownItem").compare(type) == 0) {
      return new OAIResponseFaresBreakdownItem();
    }
    if(QString("OAIResponseFaresFast").compare(type) == 0) {
      return new OAIResponseFaresFast();
    }
    if(QString("OAIResponseGeocoding").compare(type) == 0) {
      return new OAIResponseGeocoding();
    }
    if(QString("OAIResponseGeocodingGeoJsonFeature").compare(type) == 0) {
      return new OAIResponseGeocodingGeoJsonFeature();
    }
    if(QString("OAIResponseGeocodingGeometry").compare(type) == 0) {
      return new OAIResponseGeocodingGeometry();
    }
    if(QString("OAIResponseGeocodingProperties").compare(type) == 0) {
      return new OAIResponseGeocodingProperties();
    }
    if(QString("OAIResponseMapInfo").compare(type) == 0) {
      return new OAIResponseMapInfo();
    }
    if(QString("OAIResponseMapInfoFeatures").compare(type) == 0) {
      return new OAIResponseMapInfoFeatures();
    }
    if(QString("OAIResponseMapInfoFeaturesPublicTransport").compare(type) == 0) {
      return new OAIResponseMapInfoFeaturesPublicTransport();
    }
    if(QString("OAIResponseMapInfoMap").compare(type) == 0) {
      return new OAIResponseMapInfoMap();
    }
    if(QString("OAIResponseRoute").compare(type) == 0) {
      return new OAIResponseRoute();
    }
    if(QString("OAIResponseRoutePart").compare(type) == 0) {
      return new OAIResponseRoutePart();
    }
    if(QString("OAIResponseRoutes").compare(type) == 0) {
      return new OAIResponseRoutes();
    }
    if(QString("OAIResponseRoutesLocation").compare(type) == 0) {
      return new OAIResponseRoutesLocation();
    }
    if(QString("OAIResponseRoutesProperties").compare(type) == 0) {
      return new OAIResponseRoutesProperties();
    }
    if(QString("OAIResponseRoutesResult").compare(type) == 0) {
      return new OAIResponseRoutesResult();
    }
    if(QString("OAIResponseShape").compare(type) == 0) {
      return new OAIResponseShape();
    }
    if(QString("OAIResponseSupportedLocation").compare(type) == 0) {
      return new OAIResponseSupportedLocation();
    }
    if(QString("OAIResponseSupportedLocations").compare(type) == 0) {
      return new OAIResponseSupportedLocations();
    }
    if(QString("OAIResponseTimeFilter").compare(type) == 0) {
      return new OAIResponseTimeFilter();
    }
    if(QString("OAIResponseTimeFilterFast").compare(type) == 0) {
      return new OAIResponseTimeFilterFast();
    }
    if(QString("OAIResponseTimeFilterFastLocation").compare(type) == 0) {
      return new OAIResponseTimeFilterFastLocation();
    }
    if(QString("OAIResponseTimeFilterFastProperties").compare(type) == 0) {
      return new OAIResponseTimeFilterFastProperties();
    }
    if(QString("OAIResponseTimeFilterFastResult").compare(type) == 0) {
      return new OAIResponseTimeFilterFastResult();
    }
    if(QString("OAIResponseTimeFilterLocation").compare(type) == 0) {
      return new OAIResponseTimeFilterLocation();
    }
    if(QString("OAIResponseTimeFilterPostcode").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcode();
    }
    if(QString("OAIResponseTimeFilterPostcodeDistrict").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeDistrict();
    }
    if(QString("OAIResponseTimeFilterPostcodeDistrictProperties").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeDistrictProperties();
    }
    if(QString("OAIResponseTimeFilterPostcodeDistricts").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeDistricts();
    }
    if(QString("OAIResponseTimeFilterPostcodeDistrictsResult").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeDistrictsResult();
    }
    if(QString("OAIResponseTimeFilterPostcodeSector").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeSector();
    }
    if(QString("OAIResponseTimeFilterPostcodeSectorProperties").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeSectorProperties();
    }
    if(QString("OAIResponseTimeFilterPostcodeSectors").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeSectors();
    }
    if(QString("OAIResponseTimeFilterPostcodeSectorsResult").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodeSectorsResult();
    }
    if(QString("OAIResponseTimeFilterPostcodes").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodes();
    }
    if(QString("OAIResponseTimeFilterPostcodesProperties").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodesProperties();
    }
    if(QString("OAIResponseTimeFilterPostcodesResult").compare(type) == 0) {
      return new OAIResponseTimeFilterPostcodesResult();
    }
    if(QString("OAIResponseTimeFilterProperties").compare(type) == 0) {
      return new OAIResponseTimeFilterProperties();
    }
    if(QString("OAIResponseTimeFilterResult").compare(type) == 0) {
      return new OAIResponseTimeFilterResult();
    }
    if(QString("OAIResponseTimeMap").compare(type) == 0) {
      return new OAIResponseTimeMap();
    }
    if(QString("OAIResponseTimeMapBoundingBoxes").compare(type) == 0) {
      return new OAIResponseTimeMapBoundingBoxes();
    }
    if(QString("OAIResponseTimeMapBoundingBoxesResult").compare(type) == 0) {
      return new OAIResponseTimeMapBoundingBoxesResult();
    }
    if(QString("OAIResponseTimeMapProperties").compare(type) == 0) {
      return new OAIResponseTimeMapProperties();
    }
    if(QString("OAIResponseTimeMapResult").compare(type) == 0) {
      return new OAIResponseTimeMapResult();
    }
    if(QString("OAIResponseTimeMapWkt").compare(type) == 0) {
      return new OAIResponseTimeMapWkt();
    }
    if(QString("OAIResponseTimeMapWktResult").compare(type) == 0) {
      return new OAIResponseTimeMapWktResult();
    }
    if(QString("OAIResponseTransportationMode").compare(type) == 0) {
      return new OAIResponseTransportationMode();
    }
    if(QString("OAIResponseTravelTimeStatistics").compare(type) == 0) {
      return new OAIResponseTravelTimeStatistics();
    }
    
    return nullptr;
  }

  inline void* create(QString json, QString type) {
    if(type.startsWith("QString")) {
      return new QString();
    }    
    auto val = static_cast<OAIObject*>(create(type));
    if(val != nullptr) {
      return val->fromJson(json);
    }
    return nullptr;
  }

}

#endif /* ModelFactory_H_ */
