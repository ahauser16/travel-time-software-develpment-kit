/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseGeocodingProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseGeocodingProperties::OAIResponseGeocodingProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseGeocodingProperties::OAIResponseGeocodingProperties() {
    init();
}

OAIResponseGeocodingProperties::~OAIResponseGeocodingProperties() {
    this->cleanup();
}

void
OAIResponseGeocodingProperties::init() {
    name = new QString("");
    m_name_isSet = false;
    label = new QString("");
    m_label_isSet = false;
    score = 0.0;
    m_score_isSet = false;
    house_number = new QString("");
    m_house_number_isSet = false;
    street = new QString("");
    m_street_isSet = false;
    region = new QString("");
    m_region_isSet = false;
    region_code = new QString("");
    m_region_code_isSet = false;
    neighbourhood = new QString("");
    m_neighbourhood_isSet = false;
    county = new QString("");
    m_county_isSet = false;
    macroregion = new QString("");
    m_macroregion_isSet = false;
    city = new QString("");
    m_city_isSet = false;
    country = new QString("");
    m_country_isSet = false;
    country_code = new QString("");
    m_country_code_isSet = false;
    continent = new QString("");
    m_continent_isSet = false;
    postcode = new QString("");
    m_postcode_isSet = false;
    features = new OAIResponseMapInfoFeatures();
    m_features_isSet = false;
}

void
OAIResponseGeocodingProperties::cleanup() {
    if(name != nullptr) { 
        delete name;
    }
    if(label != nullptr) { 
        delete label;
    }

    if(house_number != nullptr) { 
        delete house_number;
    }
    if(street != nullptr) { 
        delete street;
    }
    if(region != nullptr) { 
        delete region;
    }
    if(region_code != nullptr) { 
        delete region_code;
    }
    if(neighbourhood != nullptr) { 
        delete neighbourhood;
    }
    if(county != nullptr) { 
        delete county;
    }
    if(macroregion != nullptr) { 
        delete macroregion;
    }
    if(city != nullptr) { 
        delete city;
    }
    if(country != nullptr) { 
        delete country;
    }
    if(country_code != nullptr) { 
        delete country_code;
    }
    if(continent != nullptr) { 
        delete continent;
    }
    if(postcode != nullptr) { 
        delete postcode;
    }
    if(features != nullptr) { 
        delete features;
    }
}

OAIResponseGeocodingProperties*
OAIResponseGeocodingProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseGeocodingProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&name, pJson["name"], "QString", "QString");
    
    ::OpenAPI::setValue(&label, pJson["label"], "QString", "QString");
    
    ::OpenAPI::setValue(&score, pJson["score"], "double", "");
    
    ::OpenAPI::setValue(&house_number, pJson["house_number"], "QString", "QString");
    
    ::OpenAPI::setValue(&street, pJson["street"], "QString", "QString");
    
    ::OpenAPI::setValue(&region, pJson["region"], "QString", "QString");
    
    ::OpenAPI::setValue(&region_code, pJson["region_code"], "QString", "QString");
    
    ::OpenAPI::setValue(&neighbourhood, pJson["neighbourhood"], "QString", "QString");
    
    ::OpenAPI::setValue(&county, pJson["county"], "QString", "QString");
    
    ::OpenAPI::setValue(&macroregion, pJson["macroregion"], "QString", "QString");
    
    ::OpenAPI::setValue(&city, pJson["city"], "QString", "QString");
    
    ::OpenAPI::setValue(&country, pJson["country"], "QString", "QString");
    
    ::OpenAPI::setValue(&country_code, pJson["country_code"], "QString", "QString");
    
    ::OpenAPI::setValue(&continent, pJson["continent"], "QString", "QString");
    
    ::OpenAPI::setValue(&postcode, pJson["postcode"], "QString", "QString");
    
    ::OpenAPI::setValue(&features, pJson["features"], "OAIResponseMapInfoFeatures", "OAIResponseMapInfoFeatures");
    
}

QString
OAIResponseGeocodingProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseGeocodingProperties::asJsonObject() {
    QJsonObject obj;
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(label != nullptr && *label != QString("")){
        toJsonValue(QString("label"), label, obj, QString("QString"));
    }
    if(m_score_isSet){
        obj.insert("score", QJsonValue(score));
    }
    if(house_number != nullptr && *house_number != QString("")){
        toJsonValue(QString("house_number"), house_number, obj, QString("QString"));
    }
    if(street != nullptr && *street != QString("")){
        toJsonValue(QString("street"), street, obj, QString("QString"));
    }
    if(region != nullptr && *region != QString("")){
        toJsonValue(QString("region"), region, obj, QString("QString"));
    }
    if(region_code != nullptr && *region_code != QString("")){
        toJsonValue(QString("region_code"), region_code, obj, QString("QString"));
    }
    if(neighbourhood != nullptr && *neighbourhood != QString("")){
        toJsonValue(QString("neighbourhood"), neighbourhood, obj, QString("QString"));
    }
    if(county != nullptr && *county != QString("")){
        toJsonValue(QString("county"), county, obj, QString("QString"));
    }
    if(macroregion != nullptr && *macroregion != QString("")){
        toJsonValue(QString("macroregion"), macroregion, obj, QString("QString"));
    }
    if(city != nullptr && *city != QString("")){
        toJsonValue(QString("city"), city, obj, QString("QString"));
    }
    if(country != nullptr && *country != QString("")){
        toJsonValue(QString("country"), country, obj, QString("QString"));
    }
    if(country_code != nullptr && *country_code != QString("")){
        toJsonValue(QString("country_code"), country_code, obj, QString("QString"));
    }
    if(continent != nullptr && *continent != QString("")){
        toJsonValue(QString("continent"), continent, obj, QString("QString"));
    }
    if(postcode != nullptr && *postcode != QString("")){
        toJsonValue(QString("postcode"), postcode, obj, QString("QString"));
    }
    if((features != nullptr) && (features->isSet())){
        toJsonValue(QString("features"), features, obj, QString("OAIResponseMapInfoFeatures"));
    }

    return obj;
}

QString*
OAIResponseGeocodingProperties::getName() {
    return name;
}
void
OAIResponseGeocodingProperties::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getLabel() {
    return label;
}
void
OAIResponseGeocodingProperties::setLabel(QString* label) {
    this->label = label;
    this->m_label_isSet = true;
}

double
OAIResponseGeocodingProperties::getScore() {
    return score;
}
void
OAIResponseGeocodingProperties::setScore(double score) {
    this->score = score;
    this->m_score_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getHouseNumber() {
    return house_number;
}
void
OAIResponseGeocodingProperties::setHouseNumber(QString* house_number) {
    this->house_number = house_number;
    this->m_house_number_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getStreet() {
    return street;
}
void
OAIResponseGeocodingProperties::setStreet(QString* street) {
    this->street = street;
    this->m_street_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getRegion() {
    return region;
}
void
OAIResponseGeocodingProperties::setRegion(QString* region) {
    this->region = region;
    this->m_region_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getRegionCode() {
    return region_code;
}
void
OAIResponseGeocodingProperties::setRegionCode(QString* region_code) {
    this->region_code = region_code;
    this->m_region_code_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getNeighbourhood() {
    return neighbourhood;
}
void
OAIResponseGeocodingProperties::setNeighbourhood(QString* neighbourhood) {
    this->neighbourhood = neighbourhood;
    this->m_neighbourhood_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getCounty() {
    return county;
}
void
OAIResponseGeocodingProperties::setCounty(QString* county) {
    this->county = county;
    this->m_county_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getMacroregion() {
    return macroregion;
}
void
OAIResponseGeocodingProperties::setMacroregion(QString* macroregion) {
    this->macroregion = macroregion;
    this->m_macroregion_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getCity() {
    return city;
}
void
OAIResponseGeocodingProperties::setCity(QString* city) {
    this->city = city;
    this->m_city_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getCountry() {
    return country;
}
void
OAIResponseGeocodingProperties::setCountry(QString* country) {
    this->country = country;
    this->m_country_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getCountryCode() {
    return country_code;
}
void
OAIResponseGeocodingProperties::setCountryCode(QString* country_code) {
    this->country_code = country_code;
    this->m_country_code_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getContinent() {
    return continent;
}
void
OAIResponseGeocodingProperties::setContinent(QString* continent) {
    this->continent = continent;
    this->m_continent_isSet = true;
}

QString*
OAIResponseGeocodingProperties::getPostcode() {
    return postcode;
}
void
OAIResponseGeocodingProperties::setPostcode(QString* postcode) {
    this->postcode = postcode;
    this->m_postcode_isSet = true;
}

OAIResponseMapInfoFeatures*
OAIResponseGeocodingProperties::getFeatures() {
    return features;
}
void
OAIResponseGeocodingProperties::setFeatures(OAIResponseMapInfoFeatures* features) {
    this->features = features;
    this->m_features_isSet = true;
}


bool
OAIResponseGeocodingProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(label != nullptr && *label != QString("")){ isObjectUpdated = true; break;}
        if(m_score_isSet){ isObjectUpdated = true; break;}
        if(house_number != nullptr && *house_number != QString("")){ isObjectUpdated = true; break;}
        if(street != nullptr && *street != QString("")){ isObjectUpdated = true; break;}
        if(region != nullptr && *region != QString("")){ isObjectUpdated = true; break;}
        if(region_code != nullptr && *region_code != QString("")){ isObjectUpdated = true; break;}
        if(neighbourhood != nullptr && *neighbourhood != QString("")){ isObjectUpdated = true; break;}
        if(county != nullptr && *county != QString("")){ isObjectUpdated = true; break;}
        if(macroregion != nullptr && *macroregion != QString("")){ isObjectUpdated = true; break;}
        if(city != nullptr && *city != QString("")){ isObjectUpdated = true; break;}
        if(country != nullptr && *country != QString("")){ isObjectUpdated = true; break;}
        if(country_code != nullptr && *country_code != QString("")){ isObjectUpdated = true; break;}
        if(continent != nullptr && *continent != QString("")){ isObjectUpdated = true; break;}
        if(postcode != nullptr && *postcode != QString("")){ isObjectUpdated = true; break;}
        if(features != nullptr && features->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

