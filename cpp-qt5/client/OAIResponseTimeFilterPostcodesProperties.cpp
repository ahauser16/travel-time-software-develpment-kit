/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseTimeFilterPostcodesProperties.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseTimeFilterPostcodesProperties::OAIResponseTimeFilterPostcodesProperties(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseTimeFilterPostcodesProperties::OAIResponseTimeFilterPostcodesProperties() {
    init();
}

OAIResponseTimeFilterPostcodesProperties::~OAIResponseTimeFilterPostcodesProperties() {
    this->cleanup();
}

void
OAIResponseTimeFilterPostcodesProperties::init() {
    travel_time = 0;
    m_travel_time_isSet = false;
    distance = 0;
    m_distance_isSet = false;
}

void
OAIResponseTimeFilterPostcodesProperties::cleanup() {


}

OAIResponseTimeFilterPostcodesProperties*
OAIResponseTimeFilterPostcodesProperties::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseTimeFilterPostcodesProperties::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&travel_time, pJson["travel_time"], "qint32", "");
    
    ::OpenAPI::setValue(&distance, pJson["distance"], "qint32", "");
    
}

QString
OAIResponseTimeFilterPostcodesProperties::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseTimeFilterPostcodesProperties::asJsonObject() {
    QJsonObject obj;
    if(m_travel_time_isSet){
        obj.insert("travel_time", QJsonValue(travel_time));
    }
    if(m_distance_isSet){
        obj.insert("distance", QJsonValue(distance));
    }

    return obj;
}

qint32
OAIResponseTimeFilterPostcodesProperties::getTravelTime() {
    return travel_time;
}
void
OAIResponseTimeFilterPostcodesProperties::setTravelTime(qint32 travel_time) {
    this->travel_time = travel_time;
    this->m_travel_time_isSet = true;
}

qint32
OAIResponseTimeFilterPostcodesProperties::getDistance() {
    return distance;
}
void
OAIResponseTimeFilterPostcodesProperties::setDistance(qint32 distance) {
    this->distance = distance;
    this->m_distance_isSet = true;
}


bool
OAIResponseTimeFilterPostcodesProperties::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_travel_time_isSet){ isObjectUpdated = true; break;}
        if(m_distance_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

