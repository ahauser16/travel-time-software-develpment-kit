/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseMapInfoFeatures.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseMapInfoFeatures::OAIResponseMapInfoFeatures(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseMapInfoFeatures::OAIResponseMapInfoFeatures() {
    init();
}

OAIResponseMapInfoFeatures::~OAIResponseMapInfoFeatures() {
    this->cleanup();
}

void
OAIResponseMapInfoFeatures::init() {
    public_transport = new OAIResponseMapInfoFeaturesPublicTransport();
    m_public_transport_isSet = false;
    fares = false;
    m_fares_isSet = false;
    postcodes = false;
    m_postcodes_isSet = false;
}

void
OAIResponseMapInfoFeatures::cleanup() {
    if(public_transport != nullptr) { 
        delete public_transport;
    }


}

OAIResponseMapInfoFeatures*
OAIResponseMapInfoFeatures::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseMapInfoFeatures::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&public_transport, pJson["public_transport"], "OAIResponseMapInfoFeaturesPublicTransport", "OAIResponseMapInfoFeaturesPublicTransport");
    
    ::OpenAPI::setValue(&fares, pJson["fares"], "bool", "");
    
    ::OpenAPI::setValue(&postcodes, pJson["postcodes"], "bool", "");
    
}

QString
OAIResponseMapInfoFeatures::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseMapInfoFeatures::asJsonObject() {
    QJsonObject obj;
    if((public_transport != nullptr) && (public_transport->isSet())){
        toJsonValue(QString("public_transport"), public_transport, obj, QString("OAIResponseMapInfoFeaturesPublicTransport"));
    }
    if(m_fares_isSet){
        obj.insert("fares", QJsonValue(fares));
    }
    if(m_postcodes_isSet){
        obj.insert("postcodes", QJsonValue(postcodes));
    }

    return obj;
}

OAIResponseMapInfoFeaturesPublicTransport*
OAIResponseMapInfoFeatures::getPublicTransport() {
    return public_transport;
}
void
OAIResponseMapInfoFeatures::setPublicTransport(OAIResponseMapInfoFeaturesPublicTransport* public_transport) {
    this->public_transport = public_transport;
    this->m_public_transport_isSet = true;
}

bool
OAIResponseMapInfoFeatures::isFares() {
    return fares;
}
void
OAIResponseMapInfoFeatures::setFares(bool fares) {
    this->fares = fares;
    this->m_fares_isSet = true;
}

bool
OAIResponseMapInfoFeatures::isPostcodes() {
    return postcodes;
}
void
OAIResponseMapInfoFeatures::setPostcodes(bool postcodes) {
    this->postcodes = postcodes;
    this->m_postcodes_isSet = true;
}


bool
OAIResponseMapInfoFeatures::isSet(){
    bool isObjectUpdated = false;
    do{
        if(public_transport != nullptr && public_transport->isSet()){ isObjectUpdated = true; break;}
        if(m_fares_isSet){ isObjectUpdated = true; break;}
        if(m_postcodes_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

