/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseTimeFilterFastResult.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseTimeFilterFastResult::OAIResponseTimeFilterFastResult(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseTimeFilterFastResult::OAIResponseTimeFilterFastResult() {
    init();
}

OAIResponseTimeFilterFastResult::~OAIResponseTimeFilterFastResult() {
    this->cleanup();
}

void
OAIResponseTimeFilterFastResult::init() {
    search_id = new QString("");
    m_search_id_isSet = false;
    locations = new QList<OAIResponseTimeFilterFastLocation*>();
    m_locations_isSet = false;
    unreachable = new QList<QString*>();
    m_unreachable_isSet = false;
}

void
OAIResponseTimeFilterFastResult::cleanup() {
    if(search_id != nullptr) { 
        delete search_id;
    }
    if(locations != nullptr) { 
        auto arr = locations;
        for(auto o: *arr) { 
            delete o;
        }
        delete locations;
    }
    if(unreachable != nullptr) { 
        auto arr = unreachable;
        for(auto o: *arr) { 
            delete o;
        }
        delete unreachable;
    }
}

OAIResponseTimeFilterFastResult*
OAIResponseTimeFilterFastResult::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseTimeFilterFastResult::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&search_id, pJson["search_id"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&locations, pJson["locations"], "QList", "OAIResponseTimeFilterFastLocation");
    
    ::OpenAPI::setValue(&unreachable, pJson["unreachable"], "QList", "QString");
}

QString
OAIResponseTimeFilterFastResult::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseTimeFilterFastResult::asJsonObject() {
    QJsonObject obj;
    if(search_id != nullptr && *search_id != QString("")){
        toJsonValue(QString("search_id"), search_id, obj, QString("QString"));
    }
    if(locations->size() > 0){
        toJsonArray((QList<void*>*)locations, obj, "locations", "OAIResponseTimeFilterFastLocation");
    }
    if(unreachable->size() > 0){
        toJsonArray((QList<void*>*)unreachable, obj, "unreachable", "QString");
    }

    return obj;
}

QString*
OAIResponseTimeFilterFastResult::getSearchId() {
    return search_id;
}
void
OAIResponseTimeFilterFastResult::setSearchId(QString* search_id) {
    this->search_id = search_id;
    this->m_search_id_isSet = true;
}

QList<OAIResponseTimeFilterFastLocation*>*
OAIResponseTimeFilterFastResult::getLocations() {
    return locations;
}
void
OAIResponseTimeFilterFastResult::setLocations(QList<OAIResponseTimeFilterFastLocation*>* locations) {
    this->locations = locations;
    this->m_locations_isSet = true;
}

QList<QString*>*
OAIResponseTimeFilterFastResult::getUnreachable() {
    return unreachable;
}
void
OAIResponseTimeFilterFastResult::setUnreachable(QList<QString*>* unreachable) {
    this->unreachable = unreachable;
    this->m_unreachable_isSet = true;
}


bool
OAIResponseTimeFilterFastResult::isSet(){
    bool isObjectUpdated = false;
    do{
        if(search_id != nullptr && *search_id != QString("")){ isObjectUpdated = true; break;}
        if(locations->size() > 0){ isObjectUpdated = true; break;}
        if(unreachable->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

