/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIRequestTimeFilterPostcodeSectors.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIRequestTimeFilterPostcodeSectors::OAIRequestTimeFilterPostcodeSectors(QString json) {
    init();
    this->fromJson(json);
}

OAIRequestTimeFilterPostcodeSectors::OAIRequestTimeFilterPostcodeSectors() {
    init();
}

OAIRequestTimeFilterPostcodeSectors::~OAIRequestTimeFilterPostcodeSectors() {
    this->cleanup();
}

void
OAIRequestTimeFilterPostcodeSectors::init() {
    departure_searches = new QList<OAIRequestTimeFilterPostcodeSectorsDepartureSearch*>();
    m_departure_searches_isSet = false;
    arrival_searches = new QList<OAIRequestTimeFilterPostcodeSectorsArrivalSearch*>();
    m_arrival_searches_isSet = false;
}

void
OAIRequestTimeFilterPostcodeSectors::cleanup() {
    if(departure_searches != nullptr) { 
        auto arr = departure_searches;
        for(auto o: *arr) { 
            delete o;
        }
        delete departure_searches;
    }
    if(arrival_searches != nullptr) { 
        auto arr = arrival_searches;
        for(auto o: *arr) { 
            delete o;
        }
        delete arrival_searches;
    }
}

OAIRequestTimeFilterPostcodeSectors*
OAIRequestTimeFilterPostcodeSectors::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIRequestTimeFilterPostcodeSectors::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&departure_searches, pJson["departure_searches"], "QList", "OAIRequestTimeFilterPostcodeSectorsDepartureSearch");
    
    ::OpenAPI::setValue(&arrival_searches, pJson["arrival_searches"], "QList", "OAIRequestTimeFilterPostcodeSectorsArrivalSearch");
}

QString
OAIRequestTimeFilterPostcodeSectors::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIRequestTimeFilterPostcodeSectors::asJsonObject() {
    QJsonObject obj;
    if(departure_searches->size() > 0){
        toJsonArray((QList<void*>*)departure_searches, obj, "departure_searches", "OAIRequestTimeFilterPostcodeSectorsDepartureSearch");
    }
    if(arrival_searches->size() > 0){
        toJsonArray((QList<void*>*)arrival_searches, obj, "arrival_searches", "OAIRequestTimeFilterPostcodeSectorsArrivalSearch");
    }

    return obj;
}

QList<OAIRequestTimeFilterPostcodeSectorsDepartureSearch*>*
OAIRequestTimeFilterPostcodeSectors::getDepartureSearches() {
    return departure_searches;
}
void
OAIRequestTimeFilterPostcodeSectors::setDepartureSearches(QList<OAIRequestTimeFilterPostcodeSectorsDepartureSearch*>* departure_searches) {
    this->departure_searches = departure_searches;
    this->m_departure_searches_isSet = true;
}

QList<OAIRequestTimeFilterPostcodeSectorsArrivalSearch*>*
OAIRequestTimeFilterPostcodeSectors::getArrivalSearches() {
    return arrival_searches;
}
void
OAIRequestTimeFilterPostcodeSectors::setArrivalSearches(QList<OAIRequestTimeFilterPostcodeSectorsArrivalSearch*>* arrival_searches) {
    this->arrival_searches = arrival_searches;
    this->m_arrival_searches_isSet = true;
}


bool
OAIRequestTimeFilterPostcodeSectors::isSet(){
    bool isObjectUpdated = false;
    do{
        if(departure_searches->size() > 0){ isObjectUpdated = true; break;}
        if(arrival_searches->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

