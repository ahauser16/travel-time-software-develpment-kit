/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseGeocodingGeometry.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseGeocodingGeometry::OAIResponseGeocodingGeometry(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseGeocodingGeometry::OAIResponseGeocodingGeometry() {
    init();
}

OAIResponseGeocodingGeometry::~OAIResponseGeocodingGeometry() {
    this->cleanup();
}

void
OAIResponseGeocodingGeometry::init() {
    type = new QString("");
    m_type_isSet = false;
    coordinates = new QList<double>();
    m_coordinates_isSet = false;
}

void
OAIResponseGeocodingGeometry::cleanup() {
    if(type != nullptr) { 
        delete type;
    }

    if(coordinates != nullptr) { 
        delete coordinates;
    }
}

OAIResponseGeocodingGeometry*
OAIResponseGeocodingGeometry::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseGeocodingGeometry::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&coordinates, pJson["coordinates"], "QList", "double");
}

QString
OAIResponseGeocodingGeometry::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseGeocodingGeometry::asJsonObject() {
    QJsonObject obj;
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if(coordinates->size() > 0){
        toJsonArray((QList<void*>*)coordinates, obj, "coordinates", "");
    }

    return obj;
}

QString*
OAIResponseGeocodingGeometry::getType() {
    return type;
}
void
OAIResponseGeocodingGeometry::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

QList<double>*
OAIResponseGeocodingGeometry::getCoordinates() {
    return coordinates;
}
void
OAIResponseGeocodingGeometry::setCoordinates(QList<double>* coordinates) {
    this->coordinates = coordinates;
    this->m_coordinates_isSet = true;
}


bool
OAIResponseGeocodingGeometry::isSet(){
    bool isObjectUpdated = false;
    do{
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(m_coordinates_isSet){ isObjectUpdated = true; break;}
        if(coordinates->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

