/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseError.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseError::OAIResponseError(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseError::OAIResponseError() {
    init();
}

OAIResponseError::~OAIResponseError() {
    this->cleanup();
}

void
OAIResponseError::init() {
    http_status = 0;
    m_http_status_isSet = false;
    error_code = 0;
    m_error_code_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    documentation_link = new QString("");
    m_documentation_link_isSet = false;
    additional_info = new QMap<QString, QList<QString*>*>();
    m_additional_info_isSet = false;
}

void
OAIResponseError::cleanup() {


    if(description != nullptr) { 
        delete description;
    }
    if(documentation_link != nullptr) { 
        delete documentation_link;
    }
    if(additional_info != nullptr) { 
        auto arr = additional_info;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete additional_info;
    }
}

OAIResponseError*
OAIResponseError::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseError::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&http_status, pJson["http_status"], "qint32", "");
    
    ::OpenAPI::setValue(&error_code, pJson["error_code"], "qint32", "");
    
    ::OpenAPI::setValue(&description, pJson["description"], "QString", "QString");
    
    ::OpenAPI::setValue(&documentation_link, pJson["documentation_link"], "QString", "QString");
    
    
    
    if(pJson["additional_info"].isObject()){
        auto varmap = pJson["additional_info"].toObject().toVariantMap();
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                auto additional_info_item = new QList<QString*>();
                
    		    auto jsonval = QJsonValue::fromVariant(varmap.value(val));
    		    ::OpenAPI::setValue((QMap<QString, void *>*)&additional_info_item, jsonval, "QList", "QString");

                additional_info->insert(additional_info->end(), val, additional_info_item);
            }
        }
    }
}

QString
OAIResponseError::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseError::asJsonObject() {
    QJsonObject obj;
    if(m_http_status_isSet){
        obj.insert("http_status", QJsonValue(http_status));
    }
    if(m_error_code_isSet){
        obj.insert("error_code", QJsonValue(error_code));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(documentation_link != nullptr && *documentation_link != QString("")){
        toJsonValue(QString("documentation_link"), documentation_link, obj, QString("QString"));
    }
    if(additional_info->size() > 0){
        
        QJsonObject mapobj;
        for(auto itemkey : additional_info->keys()){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)additional_info->value(itemkey), jobj, itemkey, "QString");
            mapobj.insert(itemkey, jobj);
        }
        obj.insert("additional_info", mapobj);
    }

    return obj;
}

qint32
OAIResponseError::getHttpStatus() {
    return http_status;
}
void
OAIResponseError::setHttpStatus(qint32 http_status) {
    this->http_status = http_status;
    this->m_http_status_isSet = true;
}

qint32
OAIResponseError::getErrorCode() {
    return error_code;
}
void
OAIResponseError::setErrorCode(qint32 error_code) {
    this->error_code = error_code;
    this->m_error_code_isSet = true;
}

QString*
OAIResponseError::getDescription() {
    return description;
}
void
OAIResponseError::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
OAIResponseError::getDocumentationLink() {
    return documentation_link;
}
void
OAIResponseError::setDocumentationLink(QString* documentation_link) {
    this->documentation_link = documentation_link;
    this->m_documentation_link_isSet = true;
}

QMap<QString, QList<QString*>*>*
OAIResponseError::getAdditionalInfo() {
    return additional_info;
}
void
OAIResponseError::setAdditionalInfo(QMap<QString, QList<QString*>*>* additional_info) {
    this->additional_info = additional_info;
    this->m_additional_info_isSet = true;
}


bool
OAIResponseError::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_http_status_isSet){ isObjectUpdated = true; break;}
        if(m_error_code_isSet){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(documentation_link != nullptr && *documentation_link != QString("")){ isObjectUpdated = true; break;}
        if(additional_info->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

