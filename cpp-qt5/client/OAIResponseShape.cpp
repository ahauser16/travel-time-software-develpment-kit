/**
 * TravelTime Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@igeolise.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAIResponseShape.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAIResponseShape::OAIResponseShape(QString json) {
    init();
    this->fromJson(json);
}

OAIResponseShape::OAIResponseShape() {
    init();
}

OAIResponseShape::~OAIResponseShape() {
    this->cleanup();
}

void
OAIResponseShape::init() {
    shell = new QList<OAICoords*>();
    m_shell_isSet = false;
    holes = new QList<QList<OAICoords*>*>();
    m_holes_isSet = false;
}

void
OAIResponseShape::cleanup() {
    if(shell != nullptr) { 
        auto arr = shell;
        for(auto o: *arr) { 
            delete o;
        }
        delete shell;
    }
    if(holes != nullptr) { 
        auto arr = holes;
        for(auto o: *arr) { 
            for(auto o1: *o) {
                delete o1;
            }
            delete o;
        }
        delete holes;
    }
}

OAIResponseShape*
OAIResponseShape::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAIResponseShape::fromJsonObject(QJsonObject pJson) {
    
    ::OpenAPI::setValue(&shell, pJson["shell"], "QList", "OAICoords");
    
    
    if(pJson["holes"].isArray()){
        auto arr = pJson["holes"].toArray();
        for (const QJsonValue & jval : arr) {
            auto holes_item = new QList<OAICoords*>();
            
            auto jsonval = jval.toObject();
            ::OpenAPI::setValue(holes_item, jsonval, "QList", "OAICoords");
            holes->push_back(holes_item);
        }
    }
}

QString
OAIResponseShape::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAIResponseShape::asJsonObject() {
    QJsonObject obj;
    if(shell->size() > 0){
        toJsonArray((QList<void*>*)shell, obj, "shell", "OAICoords");
    }
    if(holes->size() > 0){
        QJsonArray jarray;
        for(auto items : *holes){
            QJsonObject jobj;
            toJsonArray((QList<void*>*)items, jobj, "holes", "OAICoords");
            jarray.append(jobj.value("holes"));
        }
        obj.insert("holes", jarray);
    }

    return obj;
}

QList<OAICoords*>*
OAIResponseShape::getShell() {
    return shell;
}
void
OAIResponseShape::setShell(QList<OAICoords*>* shell) {
    this->shell = shell;
    this->m_shell_isSet = true;
}

QList<QList<OAICoords*>*>*
OAIResponseShape::getHoles() {
    return holes;
}
void
OAIResponseShape::setHoles(QList<QList<OAICoords*>*>* holes) {
    this->holes = holes;
    this->m_holes_isSet = true;
}


bool
OAIResponseShape::isSet(){
    bool isObjectUpdated = false;
    do{
        if(shell->size() > 0){ isObjectUpdated = true; break;}
        if(holes->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

