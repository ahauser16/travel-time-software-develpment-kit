/* 
 * TravelTime Platform API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@igeolise.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using traveltimeplatform.Client;
using traveltimeplatform.Model;

namespace traveltimeplatform.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        ResponseGeocoding GeocodingReverseSearch (double focusLat, double focusLng, string withinCountry = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        ApiResponse<ResponseGeocoding> GeocodingReverseSearchWithHttpInfo (double focusLat, double focusLng, string withinCountry = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        ResponseGeocoding GeocodingSearch (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        ApiResponse<ResponseGeocoding> GeocodingSearchWithHttpInfo (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseMapInfo</returns>
        ResponseMapInfo MapInfo ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseMapInfo</returns>
        ApiResponse<ResponseMapInfo> MapInfoWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ResponseRoutes</returns>
        ResponseRoutes Routes (RequestRoutes requestRoutes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ApiResponse of ResponseRoutes</returns>
        ApiResponse<ResponseRoutes> RoutesWithHttpInfo (RequestRoutes requestRoutes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ResponseSupportedLocations</returns>
        ResponseSupportedLocations SupportedLocations (RequestSupportedLocations requestSupportedLocations);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ApiResponse of ResponseSupportedLocations</returns>
        ApiResponse<ResponseSupportedLocations> SupportedLocationsWithHttpInfo (RequestSupportedLocations requestSupportedLocations);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ResponseTimeFilter</returns>
        ResponseTimeFilter TimeFilter (RequestTimeFilter requestTimeFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ApiResponse of ResponseTimeFilter</returns>
        ApiResponse<ResponseTimeFilter> TimeFilterWithHttpInfo (RequestTimeFilter requestTimeFilter);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ResponseTimeFilterFast</returns>
        ResponseTimeFilterFast TimeFilterFast (RequestTimeFilterFast requestTimeFilterFast);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ApiResponse of ResponseTimeFilterFast</returns>
        ApiResponse<ResponseTimeFilterFast> TimeFilterFastWithHttpInfo (RequestTimeFilterFast requestTimeFilterFast);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ResponseTimeFilterPostcodeDistricts</returns>
        ResponseTimeFilterPostcodeDistricts TimeFilterPostcodeDistricts (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeDistricts</returns>
        ApiResponse<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsWithHttpInfo (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ResponseTimeFilterPostcodeSectors</returns>
        ResponseTimeFilterPostcodeSectors TimeFilterPostcodeSectors (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeSectors</returns>
        ApiResponse<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsWithHttpInfo (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ResponseTimeFilterPostcodes</returns>
        ResponseTimeFilterPostcodes TimeFilterPostcodes (RequestTimeFilterPostcodes requestTimeFilterPostcodes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodes</returns>
        ApiResponse<ResponseTimeFilterPostcodes> TimeFilterPostcodesWithHttpInfo (RequestTimeFilterPostcodes requestTimeFilterPostcodes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ResponseTimeMap</returns>
        ResponseTimeMap TimeMap (RequestTimeMap requestTimeMap);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ApiResponse of ResponseTimeMap</returns>
        ApiResponse<ResponseTimeMap> TimeMapWithHttpInfo (RequestTimeMap requestTimeMap);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>Task of ResponseGeocoding</returns>
        System.Threading.Tasks.Task<ResponseGeocoding> GeocodingReverseSearchAsync (double focusLat, double focusLng, string withinCountry = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingReverseSearchAsyncWithHttpInfo (double focusLat, double focusLng, string withinCountry = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>Task of ResponseGeocoding</returns>
        System.Threading.Tasks.Task<ResponseGeocoding> GeocodingSearchAsync (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeocoding>> GeocodingSearchAsyncWithHttpInfo (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseMapInfo</returns>
        System.Threading.Tasks.Task<ResponseMapInfo> MapInfoAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseMapInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseMapInfo>> MapInfoAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>Task of ResponseRoutes</returns>
        System.Threading.Tasks.Task<ResponseRoutes> RoutesAsync (RequestRoutes requestRoutes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>Task of ApiResponse (ResponseRoutes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRoutes>> RoutesAsyncWithHttpInfo (RequestRoutes requestRoutes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>Task of ResponseSupportedLocations</returns>
        System.Threading.Tasks.Task<ResponseSupportedLocations> SupportedLocationsAsync (RequestSupportedLocations requestSupportedLocations);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>Task of ApiResponse (ResponseSupportedLocations)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSupportedLocations>> SupportedLocationsAsyncWithHttpInfo (RequestSupportedLocations requestSupportedLocations);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>Task of ResponseTimeFilter</returns>
        System.Threading.Tasks.Task<ResponseTimeFilter> TimeFilterAsync (RequestTimeFilter requestTimeFilter);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilter)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilter>> TimeFilterAsyncWithHttpInfo (RequestTimeFilter requestTimeFilter);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>Task of ResponseTimeFilterFast</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterFast> TimeFilterFastAsync (RequestTimeFilterFast requestTimeFilterFast);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterFast)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterFast>> TimeFilterFastAsyncWithHttpInfo (RequestTimeFilterFast requestTimeFilterFast);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>Task of ResponseTimeFilterPostcodeDistricts</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsAsync (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeDistricts)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeDistricts>> TimeFilterPostcodeDistrictsAsyncWithHttpInfo (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>Task of ResponseTimeFilterPostcodeSectors</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsAsync (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeSectors)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodeSectors>> TimeFilterPostcodeSectorsAsyncWithHttpInfo (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>Task of ResponseTimeFilterPostcodes</returns>
        System.Threading.Tasks.Task<ResponseTimeFilterPostcodes> TimeFilterPostcodesAsync (RequestTimeFilterPostcodes requestTimeFilterPostcodes);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodes)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeFilterPostcodes>> TimeFilterPostcodesAsyncWithHttpInfo (RequestTimeFilterPostcodes requestTimeFilterPostcodes);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>Task of ResponseTimeMap</returns>
        System.Threading.Tasks.Task<ResponseTimeMap> TimeMapAsync (RequestTimeMap requestTimeMap);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>Task of ApiResponse (ResponseTimeMap)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTimeMap>> TimeMapAsyncWithHttpInfo (RequestTimeMap requestTimeMap);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private traveltimeplatform.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = traveltimeplatform.Client.Configuration.MergeConfigurations(
                traveltimeplatform.Client.GlobalConfiguration.Instance,
                new traveltimeplatform.Client.Configuration { BasePath = basePath }
            );
            this.Client = new traveltimeplatform.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new traveltimeplatform.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = traveltimeplatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(traveltimeplatform.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = traveltimeplatform.Client.Configuration.MergeConfigurations(
                traveltimeplatform.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new traveltimeplatform.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new traveltimeplatform.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = traveltimeplatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(traveltimeplatform.Client.ISynchronousClient client,traveltimeplatform.Client.IAsynchronousClient asyncClient, traveltimeplatform.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = traveltimeplatform.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public traveltimeplatform.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public traveltimeplatform.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public traveltimeplatform.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public traveltimeplatform.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        public ResponseGeocoding GeocodingReverseSearch (double focusLat, double focusLng, string withinCountry = null)
        {
             traveltimeplatform.Client.ApiResponse<ResponseGeocoding> localVarResponse = GeocodingReverseSearchWithHttpInfo(focusLat, focusLng, withinCountry);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseGeocoding > GeocodingReverseSearchWithHttpInfo (double focusLat, double focusLng, string withinCountry = null)
        {
            // verify the required parameter 'focusLat' is set
            if (focusLat == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'focusLat' when calling DefaultApi->GeocodingReverseSearch");

            // verify the required parameter 'focusLng' is set
            if (focusLng == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'focusLng' when calling DefaultApi->GeocodingReverseSearch");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (focusLat != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lat", focusLat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (focusLng != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lng", focusLng))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (withinCountry != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Get< ResponseGeocoding >("/v4/geocoding/reverse", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GeocodingReverseSearch", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>Task of ResponseGeocoding</returns>
        public async System.Threading.Tasks.Task<ResponseGeocoding> GeocodingReverseSearchAsync (double focusLat, double focusLng, string withinCountry = null)
        {
             traveltimeplatform.Client.ApiResponse<ResponseGeocoding> localVarResponse = await GeocodingReverseSearchAsyncWithHttpInfo(focusLat, focusLng, withinCountry);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="focusLat"></param>
        /// <param name="focusLng"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseGeocoding>> GeocodingReverseSearchAsyncWithHttpInfo (double focusLat, double focusLng, string withinCountry = null)
        {
            // verify the required parameter 'focusLat' is set
            if (focusLat == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'focusLat' when calling DefaultApi->GeocodingReverseSearch");

            // verify the required parameter 'focusLng' is set
            if (focusLng == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'focusLng' when calling DefaultApi->GeocodingReverseSearch");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (focusLat != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lat", focusLat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (focusLng != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lng", focusLng))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (withinCountry != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ResponseGeocoding>("/v4/geocoding/reverse", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GeocodingReverseSearch", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>ResponseGeocoding</returns>
        public ResponseGeocoding GeocodingSearch (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null)
        {
             traveltimeplatform.Client.ApiResponse<ResponseGeocoding> localVarResponse = GeocodingSearchWithHttpInfo(query, withinCountry, focusLat, focusLng);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>ApiResponse of ResponseGeocoding</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseGeocoding > GeocodingSearchWithHttpInfo (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'query' when calling DefaultApi->GeocodingSearch");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (query != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "query", query))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (withinCountry != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (focusLat != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lat", focusLat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (focusLng != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lng", focusLng))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Get< ResponseGeocoding >("/v4/geocoding/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GeocodingSearch", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>Task of ResponseGeocoding</returns>
        public async System.Threading.Tasks.Task<ResponseGeocoding> GeocodingSearchAsync (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null)
        {
             traveltimeplatform.Client.ApiResponse<ResponseGeocoding> localVarResponse = await GeocodingSearchAsyncWithHttpInfo(query, withinCountry, focusLat, focusLng);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query"></param>
        /// <param name="withinCountry"> (optional)</param>
        /// <param name="focusLat"> (optional)</param>
        /// <param name="focusLng"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGeocoding)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseGeocoding>> GeocodingSearchAsyncWithHttpInfo (string query, string withinCountry = null, double? focusLat = null, double? focusLng = null)
        {
            // verify the required parameter 'query' is set
            if (query == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'query' when calling DefaultApi->GeocodingSearch");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (query != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "query", query))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (withinCountry != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "within.country", withinCountry))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (focusLat != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lat", focusLat))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (focusLng != null)
            {
                foreach (var kvp in traveltimeplatform.Client.ClientUtils.ParameterToMultiMap("", "focus.lng", focusLng))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ResponseGeocoding>("/v4/geocoding/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GeocodingSearch", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ResponseMapInfo</returns>
        public ResponseMapInfo MapInfo ()
        {
             traveltimeplatform.Client.ApiResponse<ResponseMapInfo> localVarResponse = MapInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ResponseMapInfo</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseMapInfo > MapInfoWithHttpInfo ()
        {
            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Get< ResponseMapInfo >("/v4/map-info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MapInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ResponseMapInfo</returns>
        public async System.Threading.Tasks.Task<ResponseMapInfo> MapInfoAsync ()
        {
             traveltimeplatform.Client.ApiResponse<ResponseMapInfo> localVarResponse = await MapInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ResponseMapInfo)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseMapInfo>> MapInfoAsyncWithHttpInfo ()
        {

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ResponseMapInfo>("/v4/map-info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("MapInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ResponseRoutes</returns>
        public ResponseRoutes Routes (RequestRoutes requestRoutes)
        {
             traveltimeplatform.Client.ApiResponse<ResponseRoutes> localVarResponse = RoutesWithHttpInfo(requestRoutes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>ApiResponse of ResponseRoutes</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseRoutes > RoutesWithHttpInfo (RequestRoutes requestRoutes)
        {
            // verify the required parameter 'requestRoutes' is set
            if (requestRoutes == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestRoutes' when calling DefaultApi->Routes");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestRoutes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseRoutes >("/v4/routes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Routes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>Task of ResponseRoutes</returns>
        public async System.Threading.Tasks.Task<ResponseRoutes> RoutesAsync (RequestRoutes requestRoutes)
        {
             traveltimeplatform.Client.ApiResponse<ResponseRoutes> localVarResponse = await RoutesAsyncWithHttpInfo(requestRoutes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestRoutes"></param>
        /// <returns>Task of ApiResponse (ResponseRoutes)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseRoutes>> RoutesAsyncWithHttpInfo (RequestRoutes requestRoutes)
        {
            // verify the required parameter 'requestRoutes' is set
            if (requestRoutes == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestRoutes' when calling DefaultApi->Routes");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestRoutes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseRoutes>("/v4/routes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("Routes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ResponseSupportedLocations</returns>
        public ResponseSupportedLocations SupportedLocations (RequestSupportedLocations requestSupportedLocations)
        {
             traveltimeplatform.Client.ApiResponse<ResponseSupportedLocations> localVarResponse = SupportedLocationsWithHttpInfo(requestSupportedLocations);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>ApiResponse of ResponseSupportedLocations</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseSupportedLocations > SupportedLocationsWithHttpInfo (RequestSupportedLocations requestSupportedLocations)
        {
            // verify the required parameter 'requestSupportedLocations' is set
            if (requestSupportedLocations == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestSupportedLocations' when calling DefaultApi->SupportedLocations");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestSupportedLocations;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseSupportedLocations >("/v4/supported-locations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SupportedLocations", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>Task of ResponseSupportedLocations</returns>
        public async System.Threading.Tasks.Task<ResponseSupportedLocations> SupportedLocationsAsync (RequestSupportedLocations requestSupportedLocations)
        {
             traveltimeplatform.Client.ApiResponse<ResponseSupportedLocations> localVarResponse = await SupportedLocationsAsyncWithHttpInfo(requestSupportedLocations);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestSupportedLocations"></param>
        /// <returns>Task of ApiResponse (ResponseSupportedLocations)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseSupportedLocations>> SupportedLocationsAsyncWithHttpInfo (RequestSupportedLocations requestSupportedLocations)
        {
            // verify the required parameter 'requestSupportedLocations' is set
            if (requestSupportedLocations == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestSupportedLocations' when calling DefaultApi->SupportedLocations");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestSupportedLocations;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseSupportedLocations>("/v4/supported-locations", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SupportedLocations", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ResponseTimeFilter</returns>
        public ResponseTimeFilter TimeFilter (RequestTimeFilter requestTimeFilter)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilter> localVarResponse = TimeFilterWithHttpInfo(requestTimeFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>ApiResponse of ResponseTimeFilter</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseTimeFilter > TimeFilterWithHttpInfo (RequestTimeFilter requestTimeFilter)
        {
            // verify the required parameter 'requestTimeFilter' is set
            if (requestTimeFilter == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilter' when calling DefaultApi->TimeFilter");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestTimeFilter;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseTimeFilter >("/v4/time-filter", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilter", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>Task of ResponseTimeFilter</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilter> TimeFilterAsync (RequestTimeFilter requestTimeFilter)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilter> localVarResponse = await TimeFilterAsyncWithHttpInfo(requestTimeFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilter"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilter)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseTimeFilter>> TimeFilterAsyncWithHttpInfo (RequestTimeFilter requestTimeFilter)
        {
            // verify the required parameter 'requestTimeFilter' is set
            if (requestTimeFilter == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilter' when calling DefaultApi->TimeFilter");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestTimeFilter;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseTimeFilter>("/v4/time-filter", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilter", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ResponseTimeFilterFast</returns>
        public ResponseTimeFilterFast TimeFilterFast (RequestTimeFilterFast requestTimeFilterFast)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterFast> localVarResponse = TimeFilterFastWithHttpInfo(requestTimeFilterFast);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>ApiResponse of ResponseTimeFilterFast</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseTimeFilterFast > TimeFilterFastWithHttpInfo (RequestTimeFilterFast requestTimeFilterFast)
        {
            // verify the required parameter 'requestTimeFilterFast' is set
            if (requestTimeFilterFast == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterFast' when calling DefaultApi->TimeFilterFast");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestTimeFilterFast;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseTimeFilterFast >("/v4/time-filter/fast", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterFast", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>Task of ResponseTimeFilterFast</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterFast> TimeFilterFastAsync (RequestTimeFilterFast requestTimeFilterFast)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterFast> localVarResponse = await TimeFilterFastAsyncWithHttpInfo(requestTimeFilterFast);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterFast"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterFast)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseTimeFilterFast>> TimeFilterFastAsyncWithHttpInfo (RequestTimeFilterFast requestTimeFilterFast)
        {
            // verify the required parameter 'requestTimeFilterFast' is set
            if (requestTimeFilterFast == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterFast' when calling DefaultApi->TimeFilterFast");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestTimeFilterFast;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseTimeFilterFast>("/v4/time-filter/fast", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterFast", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ResponseTimeFilterPostcodeDistricts</returns>
        public ResponseTimeFilterPostcodeDistricts TimeFilterPostcodeDistricts (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodeDistricts> localVarResponse = TimeFilterPostcodeDistrictsWithHttpInfo(requestTimeFilterPostcodeDistricts);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeDistricts</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseTimeFilterPostcodeDistricts > TimeFilterPostcodeDistrictsWithHttpInfo (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
            // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
            if (requestTimeFilterPostcodeDistricts == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeDistricts' when calling DefaultApi->TimeFilterPostcodeDistricts");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestTimeFilterPostcodeDistricts;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseTimeFilterPostcodeDistricts >("/v4/time-filter/postcode-districts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterPostcodeDistricts", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>Task of ResponseTimeFilterPostcodeDistricts</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodeDistricts> TimeFilterPostcodeDistrictsAsync (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodeDistricts> localVarResponse = await TimeFilterPostcodeDistrictsAsyncWithHttpInfo(requestTimeFilterPostcodeDistricts);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeDistricts"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeDistricts)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodeDistricts>> TimeFilterPostcodeDistrictsAsyncWithHttpInfo (RequestTimeFilterPostcodeDistricts requestTimeFilterPostcodeDistricts)
        {
            // verify the required parameter 'requestTimeFilterPostcodeDistricts' is set
            if (requestTimeFilterPostcodeDistricts == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeDistricts' when calling DefaultApi->TimeFilterPostcodeDistricts");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestTimeFilterPostcodeDistricts;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseTimeFilterPostcodeDistricts>("/v4/time-filter/postcode-districts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterPostcodeDistricts", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ResponseTimeFilterPostcodeSectors</returns>
        public ResponseTimeFilterPostcodeSectors TimeFilterPostcodeSectors (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodeSectors> localVarResponse = TimeFilterPostcodeSectorsWithHttpInfo(requestTimeFilterPostcodeSectors);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodeSectors</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseTimeFilterPostcodeSectors > TimeFilterPostcodeSectorsWithHttpInfo (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
            // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
            if (requestTimeFilterPostcodeSectors == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeSectors' when calling DefaultApi->TimeFilterPostcodeSectors");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestTimeFilterPostcodeSectors;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseTimeFilterPostcodeSectors >("/v4/time-filter/postcode-sectors", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterPostcodeSectors", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>Task of ResponseTimeFilterPostcodeSectors</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodeSectors> TimeFilterPostcodeSectorsAsync (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodeSectors> localVarResponse = await TimeFilterPostcodeSectorsAsyncWithHttpInfo(requestTimeFilterPostcodeSectors);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodeSectors"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodeSectors)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodeSectors>> TimeFilterPostcodeSectorsAsyncWithHttpInfo (RequestTimeFilterPostcodeSectors requestTimeFilterPostcodeSectors)
        {
            // verify the required parameter 'requestTimeFilterPostcodeSectors' is set
            if (requestTimeFilterPostcodeSectors == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodeSectors' when calling DefaultApi->TimeFilterPostcodeSectors");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestTimeFilterPostcodeSectors;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseTimeFilterPostcodeSectors>("/v4/time-filter/postcode-sectors", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterPostcodeSectors", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ResponseTimeFilterPostcodes</returns>
        public ResponseTimeFilterPostcodes TimeFilterPostcodes (RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodes> localVarResponse = TimeFilterPostcodesWithHttpInfo(requestTimeFilterPostcodes);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>ApiResponse of ResponseTimeFilterPostcodes</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseTimeFilterPostcodes > TimeFilterPostcodesWithHttpInfo (RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
            // verify the required parameter 'requestTimeFilterPostcodes' is set
            if (requestTimeFilterPostcodes == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodes' when calling DefaultApi->TimeFilterPostcodes");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestTimeFilterPostcodes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseTimeFilterPostcodes >("/v4/time-filter/postcodes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterPostcodes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>Task of ResponseTimeFilterPostcodes</returns>
        public async System.Threading.Tasks.Task<ResponseTimeFilterPostcodes> TimeFilterPostcodesAsync (RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodes> localVarResponse = await TimeFilterPostcodesAsyncWithHttpInfo(requestTimeFilterPostcodes);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeFilterPostcodes"></param>
        /// <returns>Task of ApiResponse (ResponseTimeFilterPostcodes)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseTimeFilterPostcodes>> TimeFilterPostcodesAsyncWithHttpInfo (RequestTimeFilterPostcodes requestTimeFilterPostcodes)
        {
            // verify the required parameter 'requestTimeFilterPostcodes' is set
            if (requestTimeFilterPostcodes == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeFilterPostcodes' when calling DefaultApi->TimeFilterPostcodes");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestTimeFilterPostcodes;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseTimeFilterPostcodes>("/v4/time-filter/postcodes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeFilterPostcodes", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ResponseTimeMap</returns>
        public ResponseTimeMap TimeMap (RequestTimeMap requestTimeMap)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeMap> localVarResponse = TimeMapWithHttpInfo(requestTimeMap);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>ApiResponse of ResponseTimeMap</returns>
        public traveltimeplatform.Client.ApiResponse< ResponseTimeMap > TimeMapWithHttpInfo (RequestTimeMap requestTimeMap)
        {
            // verify the required parameter 'requestTimeMap' is set
            if (requestTimeMap == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeMap' when calling DefaultApi->TimeMap");

            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "application/vnd.wkt+json",
                "application/vnd.wkt-no-holes+json",
                "application/vnd.bounding-boxes+json"
            };

            var localVarContentType = traveltimeplatform.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = traveltimeplatform.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = requestTimeMap;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = this.Client.Post< ResponseTimeMap >("/v4/time-map", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeMap", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>Task of ResponseTimeMap</returns>
        public async System.Threading.Tasks.Task<ResponseTimeMap> TimeMapAsync (RequestTimeMap requestTimeMap)
        {
             traveltimeplatform.Client.ApiResponse<ResponseTimeMap> localVarResponse = await TimeMapAsyncWithHttpInfo(requestTimeMap);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="traveltimeplatform.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestTimeMap"></param>
        /// <returns>Task of ApiResponse (ResponseTimeMap)</returns>
        public async System.Threading.Tasks.Task<traveltimeplatform.Client.ApiResponse<ResponseTimeMap>> TimeMapAsyncWithHttpInfo (RequestTimeMap requestTimeMap)
        {
            // verify the required parameter 'requestTimeMap' is set
            if (requestTimeMap == null)
                throw new traveltimeplatform.Client.ApiException(400, "Missing required parameter 'requestTimeMap' when calling DefaultApi->TimeMap");


            traveltimeplatform.Client.RequestOptions requestOptions = new traveltimeplatform.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "application/vnd.wkt+json",
                "application/vnd.wkt-no-holes+json",
                "application/vnd.bounding-boxes+json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = requestTimeMap;

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                requestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }
            // authentication (ApplicationId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Application-Id")))
            {
                requestOptions.HeaderParameters.Add("X-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Application-Id"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ResponseTimeMap>("/v4/time-map", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TimeMap", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
